import { IRTreeRenderer } from "./renderer";
export interface IRTreeNodeArgs<T> {
    parentItem: IRTreeNode<T> | null;
    ulContext: HTMLUListElement;
    caption: string;
    level: number;
    data: T;
    renderer: IRTreeRenderer<T>;
    defaultChecked?: boolean;
    icon?: string;
}
export declare class IRTreeNode<T = unknown> {
    liTreeItem: HTMLLIElement;
    divTreeItemContent: HTMLDivElement;
    nodeRenderContent: HTMLElement | undefined;
    ulTreeList: HTMLUListElement;
    iconExpand: HTMLElement;
    data: T;
    level: number;
    parentItem: IRTreeNode<T> | null;
    private children;
    private _caption;
    private _checked;
    private _renderer;
    private _iconClass;
    private _iconColor;
    constructor({ parentItem, ulContext, icon, caption, data, level, defaultChecked, renderer }: IRTreeNodeArgs<T>);
    get items(): IRTreeNode<T>[];
    get count(): number;
    get caption(): string;
    get iconClass(): string | undefined;
    get hasChildren(): boolean;
    get expanded(): boolean;
    get selected(): boolean;
    get iconColor(): string | undefined;
    get checked(): boolean;
    set caption(text: string);
    set checked(checked: boolean);
    set iconClass(iconClass: string | undefined);
    set iconColor(color: string | undefined);
    set hasChildren(value: boolean);
    removeItems(): void;
    addNode(node: IRTreeNode<T>): void;
    updateCheckedWithPropagation(checked: boolean): void;
    updateCheckedStatus(): void;
    delete(): void;
    collapse(): void;
    scrollIntoView(): void;
    expand(): void;
    toggle(): void;
    select(): void;
    release(): void;
    render(): void;
    onDragStart(_ev: DragEvent): void;
    onDrop(_ev: DragEvent): void;
    onDragOver(_ev: DragEvent): boolean;
    onSelect(_node: IRTreeNode<T>): void;
    onRelease(_node: IRTreeNode<T>): void;
    onRemove(_node: IRTreeNode<T>): void;
    onExpanding(_node: IRTreeNode<T>): boolean;
    onExpand(_node: IRTreeNode<T>): void;
    onRender(_element: HTMLElement): void;
    onCollapsing(_node: IRTreeNode<T>): boolean;
    onCollapse(_node: IRTreeNode<T>): void;
    private removeChildNode;
    private emitDeleteRecursive;
    private clearDragging;
}
//# sourceMappingURL=treeNode.d.ts.map
declare type IdType = string | number | null;
declare type Position = 'top' | 'bottom' | 'left' | 'right' | null;
export declare const DefaultTheme: {
    id: IdType;
    type: string;
    render: string;
    text: string;
    editable: boolean;
    foreColor: string;
    fontSize: number;
    fontFamily: string;
    textDecoration: string;
    visibleOverText: boolean;
    opacity: number;
    cursor: string;
    borderColor: string;
    borderWidth: number;
    borderDash: number;
    isSelected: boolean;
    isMonitoring: boolean;
    isHovered: boolean;
    tooltipText: string;
    tooltipFontFamily: string;
    tooltipFontSize: number;
    tooltipForeColor: string;
    tooltipFill: string;
    tooltipBorderColor: string;
    tooltipBorderWidth: number;
    tooltipBorderDash: number;
    tooltipMaxWidth: number;
    tooltipPadding: number;
    tooltipTextDecoration: string;
    tooltipVisible: boolean;
    'borderWidth.selected': number;
    'borderColor.selected': string;
    'node.width': number;
    'node.height': number;
    'node.fill': string;
    'node.x': number;
    'node.y': number;
    'node.connectorGap': number;
    'node.connectorSize': number;
    'node.resizerEnabled': boolean;
    'node.connectorEnabled': boolean;
    'node.commentTopLeft': string;
    'node.commentTopCenter': string;
    'node.commentTopRight': string;
    'node.commentBottomLeft': string;
    'node.commentBottomCenter': string;
    'node.commentBottomRight': string;
    'node.commentFontSize': number;
    'node.commentForeColor': string;
    'node.commentFontFamily': string;
    'connection.points': never[];
    'connection.sourceObjId': IdType;
    'connection.sourcePos': Position;
    'connection.destinationObjId': IdType;
    'connection.destinationPos': Position;
    'connection.width': number;
    'connection.arrowBorderColor': string;
    'connection.arrowBorderWidth': number;
    'connection.arrowFill': string;
    'connection.arrowSize': number;
    'connection.textBorderColor': string;
    'connection.textBorderWidth': number;
    'connection.textBorderDash': number;
    'connection.textBorderFill': string;
    'connection.connectorFill': string;
    'connection.connectorSize': number;
    'connection.adjusterSize': number;
    'connection.adjusterFill': string;
    'group.margin': number;
    'group.borderAlwaysAppearance': boolean;
};
export {};
//# sourceMappingURL=theme.d.ts.map
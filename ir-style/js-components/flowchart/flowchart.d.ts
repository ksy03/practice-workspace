export namespace EVENT_TYPE {
    const CLICK: string;
    const CLICK_NODE: string;
    const DOUBLE_CLICK_NODE: string;
    const CLICK_CONNECTION: string;
    const DOUBLE_CLICK_CONNECTION: string;
    const NEW_OBJECT: string;
    const REMOVE_OBJECT: string;
    const SELECT_OBJECT: string;
    const RELEASE_OBJECT: string;
    const UNDO: string;
    const REDO: string;
    const COMMAND: string;
    const CHANGE_CLASS: string;
    const DISCONNECT_NODE: string;
    const CONNECT_NODE: string;
    const MOUSEUP_SHEET: string;
}
export class IRFlowchart extends IRComponent {
    constructor({ contextElement, width, height }: HTMLDivElement);
    _wheelZoom: boolean;
    _gridMode: boolean;
    _editMode: boolean;
    _readonly: boolean;
    _simpleConnectingMode: boolean;
    _moveScreenOnSelect: boolean;
    _selectNodeOnHover: boolean;
    _tooltipHidden: boolean;
    _traceMode: boolean;
    _singleSelection: boolean;
    _isChanged: boolean;
    keyMap: {};
    _appendMode: {
        mode: null;
        data: null;
        dragged: boolean;
    };
    _size: {
        width: number;
        height: number;
    };
    _wrapperSize: {
        width: number;
        height: number;
    };
    _svgSize: {
        width: number;
        height: number;
    };
    _appendingObject: RenderObject | null;
    emitter: {
        emit: (event: any, args: any) => void;
        on: (event: any, callback: any) => any;
        off: (event: any, callback: any) => boolean;
    };
    div: HTMLDivElement;
    _iContainer: ContainerInterface;
    _seqMng: SequenceManager;
    _objectManager: ObjectManager;
    _actionController: ActionController;
    _moveHandler: MoveHandler;
    _resizeHandler: ResizeHandler;
    _renderManager: RenderManager;
    _objMouseHandler: ObjectMouseHandler;
    theme: {
        id: string | number | null;
        type: string;
        render: string;
        text: string;
        editable: boolean;
        foreColor: string;
        fontSize: number;
        fontFamily: string;
        textDecoration: string;
        visibleOverText: boolean;
        opacity: number;
        cursor: string;
        borderColor: string;
        borderWidth: number;
        borderDash: number;
        isSelected: boolean;
        isMonitoring: boolean;
        isHovered: boolean;
        tooltipText: string;
        tooltipFontFamily: string;
        tooltipFontSize: number;
        tooltipForeColor: string;
        tooltipFill: string;
        tooltipBorderColor: string;
        tooltipBorderWidth: number;
        tooltipBorderDash: number;
        tooltipMaxWidth: number;
        tooltipPadding: number;
        tooltipTextDecoration: string;
        tooltipVisible: boolean;
        'borderWidth.selected': number;
        'borderColor.selected': string;
        'node.width': number;
        'node.height': number;
        'node.fill': string;
        'node.x': number;
        'node.y': number;
        'node.connectorGap': number;
        'node.connectorSize': number;
        'node.resizerEnabled': boolean;
        'node.connectorEnabled': boolean;
        'node.commentTopLeft': string;
        'node.commentTopCenter': string;
        'node.commentTopRight': string;
        'node.commentBottomLeft': string;
        'node.commentBottomCenter': string;
        'node.commentBottomRight': string;
        'node.commentFontSize': number;
        'node.commentForeColor': string;
        'node.commentFontFamily': string;
        'connection.points': never[];
        'connection.sourceObjId': string | number | null;
        'connection.sourcePos': "left" | "top" | "bottom" | "right" | null;
        'connection.destinationObjId': string | number | null;
        'connection.destinationPos': "left" | "top" | "bottom" | "right" | null;
        'connection.width': number;
        'connection.arrowBorderColor': string;
        'connection.arrowBorderWidth': number;
        'connection.arrowFill': string;
        'connection.arrowSize': number;
        'connection.textBorderColor': string;
        'connection.textBorderWidth': number;
        'connection.textBorderDash': number;
        'connection.textBorderFill': string;
        'connection.connectorFill': string;
        'connection.connectorSize': number;
        'connection.adjusterSize': number;
        'connection.adjusterFill': string;
        'group.margin': number;
        'group.borderAlwaysAppearance': boolean;
    };
    defaultRule: typeof util.defaultRule;
    set readonly(arg: boolean);
    get readonly(): boolean;
    set simpleConnectingMode(arg: boolean);
    get simpleConnectingMode(): boolean;
    set editMode(arg: boolean);
    get editMode(): boolean;
    set gridMode(arg: boolean);
    get gridMode(): boolean;
    set tooltipHidden(arg: boolean);
    get tooltipHidden(): boolean;
    set moveScreenOnSelect(arg: boolean);
    get moveScreenOnSelect(): boolean;
    set selectNodeOnHover(arg: boolean);
    get selectNodeOnHover(): boolean;
    set wheelZoom(arg: boolean);
    get wheelZoom(): boolean;
    set traceMode(arg: boolean);
    get traceMode(): boolean;
    set singleSelection(arg: boolean);
    get singleSelection(): boolean;
    _initD3Elements(div: any, svg: any, width: any, height: any): void;
    logger: import("../..").Logger | undefined;
    d3Div: d3.Selection<any, any, null, undefined> | undefined;
    d3Svg: d3.Selection<any, any, null, undefined> | undefined;
    d3Grid: d3.Selection<SVGRectElement, any, null, undefined> | undefined;
    d3Container: d3.Selection<SVGGElement, any, null, undefined> | undefined;
    selection: {
        rect: d3.Selection<any, any, any, any> | null;
        startX: number;
        startY: number;
    } | undefined;
    $emit(event: EventType, ...args: any[]): void;
    $on(event: EventType, callback: Function): any;
    $off(event: EventType, callback: Function | null): boolean;
    moveWrapper(func: () => void): void;
    addSvgDefs(defsElement: SVGElement): void;
    addLinearGradientDefs(id: string, rotate: number, offsets: string[], colors: string[]): void;
    add(data: {
        id: string | number | null;
        type: string;
        render: string;
        text: string;
        editable: boolean;
        foreColor: string;
        fontSize: number;
        fontFamily: string;
        textDecoration: string;
        visibleOverText: boolean;
        opacity: number;
        cursor: string;
        borderColor: string;
        borderWidth: number;
        borderDash: number;
        isSelected: boolean;
        isMonitoring: boolean;
        isHovered: boolean;
        tooltipText: string;
        tooltipFontFamily: string;
        tooltipFontSize: number;
        tooltipForeColor: string;
        tooltipFill: string;
        tooltipBorderColor: string;
        tooltipBorderWidth: number;
        tooltipBorderDash: number;
        tooltipMaxWidth: number;
        tooltipPadding: number;
        tooltipTextDecoration: string;
        tooltipVisible: boolean;
        'borderWidth.selected': number;
        'borderColor.selected': string;
        'node.width': number;
        'node.height': number;
        'node.fill': string;
        'node.x': number;
        'node.y': number;
        'node.connectorGap': number;
        'node.connectorSize': number;
        'node.resizerEnabled': boolean;
        'node.connectorEnabled': boolean;
        'node.commentTopLeft': string;
        'node.commentTopCenter': string;
        'node.commentTopRight': string;
        'node.commentBottomLeft': string;
        'node.commentBottomCenter': string;
        'node.commentBottomRight': string;
        'node.commentFontSize': number;
        'node.commentForeColor': string;
        'node.commentFontFamily': string;
        'connection.points': never[];
        'connection.sourceObjId': string | number | null;
        'connection.sourcePos': "left" | "top" | "bottom" | "right" | null;
        'connection.destinationObjId': string | number | null;
        'connection.destinationPos': "left" | "top" | "bottom" | "right" | null;
        'connection.width': number;
        'connection.arrowBorderColor': string;
        'connection.arrowBorderWidth': number;
        'connection.arrowFill': string;
        'connection.arrowSize': number;
        'connection.textBorderColor': string;
        'connection.textBorderWidth': number;
        'connection.textBorderDash': number;
        'connection.textBorderFill': string;
        'connection.connectorFill': string;
        'connection.connectorSize': number;
        'connection.adjusterSize': number;
        'connection.adjusterFill': string;
        'group.margin': number;
        'group.borderAlwaysAppearance': boolean;
    }, zIndex?: number): RenderObject;
    remove(object: any): void;
    zoomTo(scale: number): void;
    recordNewObjectsAction(...objects: RenderObject[]): void;
    emitChangedStatus(): void;
    getScale(): number;
    getSelectedConnections(sorted?: boolean | undefined): Connection[];
    _editObjProp(changedInfoList: ChangedInfo[]): void;
    editSelectedObjProp(key: string, newValue: any): void;
    append(mode: string, data: {}): void;
    resetScreen(): void;
    getWrapperSize(): {
        width: any;
        height: any;
    };
    getTransform(): d3.ZoomTransform;
    updateMinimumSvgSize(): void;
    updateSvgSize(): void;
    refreshSvgSize(): void;
    render(): void;
    getObjectList(): RenderObject[];
    clearActionList(): void;
    undoAction(): void;
    redoAction(): void;
    _objectClickHandler(obj: RenderObject, event: string): void;
    _commonObserveCallback(arg: ObserverArg): void;
    _connectionObserveCallback(arg: ObserverArg): void;
    _observerCallback(arg: ObserverArg): void;
    _selectCallbackHandler(obj: RenderObject, userInteraction: boolean, typeClick: any): void;
    _releaseCallbackHandler(obj: RenderObject, userInteraction: boolean): void;
    _editTextModeCallback(): void;
    _getXYOnSheet(x: number, y: number): {
        x: number;
        y: number;
    };
    _validateAppendMode({ mode, data }: {
        mode: string;
        data: {};
    }): boolean;
    _getProperlyPointsToCreate(data: any): any;
    _getProperlyNodePosToCreate(data: any): {
        "node.x": any;
        "node.y": any;
    };
    _initAppendObj(): void;
    _mouseMoveOnSheetHandler(ev: any): void;
    _setZIndexOnSelected(command: any): void;
    bringToFront(): void;
    bringToBack(): void;
    _moveSelectedObjects(x: number, y: number): void;
    getObjectOrNull(id: string | number): RenderObject | null;
    selectObjectById(id: string | number): void;
    _addCommonMouseAction(obj: RenderObject): void;
    _isSingleSelection(Key: boolean): boolean;
    _addClickActionOnNode(node: Node): void;
    classedOnSvg(flag: boolean, ...classes: string[]): void;
    _addDragActionOnNode(node: Node): void;
    _addDragActionOnConnector(node: Node): void;
    _addNodeEvent(node: Node): void;
    _addClickActionOnConnection(con: Connection): void;
    _addDragActionOnConnection(con: Connection): void;
    _addDragActionOnConnectionConnector(con: any): void;
    _addConnectionEvent(con: Connection): void;
    _addGroupEvent(group: Group): void;
    _addObjectEvent(obj: RenderObject): void;
    _initDrag(dragEvent: string): void;
    _terminateDrag(dragEvent: string): void;
    _updateNegativePos(): void;
    getCountOfSelectedObject(): number;
    selectAllObjects(): void;
    releaseAllObjects(clickObj: RenderObject | null): void;
    align(direction: 'top' | 'left' | 'bottom' | 'right' | 'center' | 'middle', nodeList: Node[] | null): void;
    distribute(direction: 'v' | 'h', nodeList: Node[] | null): void;
    getSelectedObjects(sorted?: boolean | undefined): RenderObject[];
    removeSelected(): void;
    _getChildElementOrNull(index: number): Element | null;
    _getNodeAndPosUnderXY(curPosX: number, curPosY: number, simpleMode?: boolean): {
        node: Node;
        pos: string;
    } | {
        node: null;
        pos: null;
    };
    moveSelectedNode(x: any, y: any): void;
    getSelectedNodes(sorted?: boolean | undefined): Node[];
    getNodeConnections(node: Node): Connection[];
    moveScreenByObject(obj: RenderObject): void;
    clearAppendMode(): void;
    _getClipInfo(): {
        copyDateTime: Date;
        objects: Object[];
    };
    cut(): Promise<void>;
    copy(): Promise<void>;
    _createPastingObjs(clipData: any): void;
    paste(): Promise<void>;
    fitSizeOnText(): void;
    _getShortestPositions(source: Node, target: Node): {
        dist: number;
        sourcePos: string;
        destinationPos: string;
    };
    _setShortestPosition(con: Connection): void;
    updateShortestConnections(): void;
    updateShortestNodes(): void;
    _getPositionOnSimpleConnecting(startPoint: {
        x: number;
        y: number;
    }, targetNode: Node): null;
    selectType(render: string): void;
    clearChangedStatus(): void;
    clear(): void;
    group(data?: {}): void;
    ungroup(): void;
    _moveAppendingNode(x: number, y: number): void;
    _getSvgXYOnDrag(x: any, y: any, scaled?: boolean): {
        x: any;
        y: any;
    };
    _dragStartHandlerOnSelection(ev: any): void;
    _dragHandlerOnSelection(ev: any): void;
    _dragEndHandlerOnSelection(ev: any): void;
    _createAppendObj(): void;
    _dragController(ev: any): void;
    cancelCreatingConnection(): void;
    _changeObjRender(obj: any, render: any): void;
    changeRender(obj: RenderObject, render: string): void;
    _editTextCallbackHandler(objData: {}, oldText: string, newText: string): void;
    _moveAppendingConnection(x: number, y: number): void;
    _adjDragCallbackHandler(objData: {}, oldPoints: [], newPoints: []): void;
    _renderCallBack(obj: RenderObject): void;
    _clickOnSheetHandler(ev: any): void;
    _createAppendingConnection(x: number, y: number, toX: number, toY: number, data: {}): void;
    _endAppendingConnection(): void;
    handleKeydownF2(): void;
    handleKeydownDelete(): void;
    handleKeydownArrows(x: any, y: any): void;
    handleKeydownEscape(): void;
}
import { IRComponent } from "../base";
import RenderObject from "./obj/base";
import ContainerInterface from "./util/icontainer";
import SequenceManager from "./util/seqmng";
import ObjectManager from "./util/objmng";
import ActionController from "./action/controller";
import MoveHandler from "./action/movehandler";
import ResizeHandler from "./action/resizehandler";
import RenderManager from "./util/rendermng";
import ObjectMouseHandler from "./util/objmousehandler";
import * as util from "./util/functions";
import * as d3 from "d3";
import Connection from "./obj/connection";
import { ChangedInfo } from "./action/command/edit";
import { ObserverArg } from "./util/observe";
import Node from "./obj/node";
import Group from "./obj/group";
//# sourceMappingURL=flowchart.d.ts.map
import _ from 'lodash';
import { IRGridCellMetaInfo, IRGridRenderInfo, IRGridBodyInfo, IRGridCell, IRGridCellMetaInfoParam } from "./cell";
import { IRGridEmitter } from './emitter';
import { IRGridFinderArgs } from './finder';
import { IRGridCommand } from "./grid.command";
import { IRGridRow } from "./row";
import { UndoCommand, UndoOptions } from './undo-redo';
import { IRGridRange } from "./utils";
import { IRComponent } from "../base";
export declare type IRGridPlugin<T = unknown> = (_grid: IRGrid, _table: HTMLTableElement, _context: HTMLElement) => T;
declare type IRGridColHeaderArgs = Partial<IRGridRenderInfo>;
declare type IRGridRowHeaderArgs = Partial<Omit<IRGridRenderInfo, "rowCount">>;
declare type IRGridBodyArgs = Partial<IRGridBodyInfo>;
declare type IRGridCellCopyMetaInfo = {
    refCellText: string | undefined;
    rowSpan: number;
    colSpan: number;
};
export interface IRGridArgs {
    contextElement: HTMLElement;
    colHeader?: Partial<IRGridColHeaderArgs>;
    rowHeader?: Partial<IRGridRowHeaderArgs>;
    body?: Partial<IRGridBodyArgs>;
    defaultColumnCellFormat?: Record<"all" | number, IRGridCellMetaInfoParam>;
    plugins?: IRGridPlugin[];
    undoManagerOptions?: UndoOptions;
}
export declare class IRGrid extends IRComponent {
    private fixedTopTable;
    private bodyTable;
    private divWrapper;
    private colgroup;
    private tbody;
    private totalHeight;
    private totalWidth;
    private _readonly;
    private _rowList;
    private colHeader;
    private rowHeader;
    private body;
    private lastSelection?;
    private defaultColumnCellFormat;
    private mergeManager;
    private virtualRenderer;
    private clipboardManager;
    private selector;
    private _headerRows;
    private _headerColumns;
    private _activeCell;
    private _emitter;
    private _isScheduledRender;
    private _scheduledUpdateRowStart;
    private _undoManager;
    private _cursorManager;
    private _commandManager;
    private _copyOptions;
    constructor({ contextElement, colHeader, rowHeader, body, defaultColumnCellFormat, plugins, undoManagerOptions }: IRGridArgs);
    get emitter(): IRGridEmitter;
    get fixedRowCount(): number;
    get fixedColumnCount(): number;
    get lastColumnId(): number;
    get width(): number;
    get height(): number;
    get fixedRowHeight(): number;
    get fixedColumnWidth(): number;
    get scrollArea(): {
        scrollTop: number;
        scrollLeft: number;
        scrollHeight: number;
        scrollWidth: number;
    };
    get scrollTop(): number;
    get scrollLeft(): number;
    get scrollBottom(): number;
    get scrollRight(): number;
    get minColWidth(): number;
    get maxColWidth(): number;
    get minRowHeight(): number;
    get maxRowHeight(): number;
    get headerRows(): number;
    get headerColumns(): number;
    get headerWidth(): number;
    get headerHeight(): number;
    get activeCell(): IRGridCell | null;
    set activeCell(cell: IRGridCell | null);
    set readonly(flag: boolean);
    addPlugin<T>(plugin: IRGridPlugin<T>): T;
    getMergeArea(row: number, col: number): {
        rowSpan: number;
        colSpan: number;
    };
    isMerged(row: number, col: number): boolean;
    splitCells(row: number, col: number): void;
    mergeCells(top: number, left: number, bottom: number, right: number): void;
    findRowOrNull(offsetY: number): IRGridRow | null;
    findCellOrNull(offsetY: number, offsetX: number): IRGridCell | null;
    getBaseCell(row: number, col: number): {
        row: number;
        col: number;
    };
    releaseCells(): void;
    clearRows(): void;
    getColumnLeft(col: number): number;
    selectRange(top: number, left: number, bottom: number, right: number, cell?: IRGridCell): IRGridRange;
    selectAll(): IRGridRange;
    getCellWidth(cell: IRGridCell): number;
    getCellHeight(cell: IRGridCell): number;
    getSelection(): IRGridRange | undefined;
    scrollOnRow(row: number): void;
    scrollOnCol(col: number): void;
    resetScroll(): void;
    scrollInView(row: number, col: number): void;
    focus(): void;
    setText(row: number, col: number, value: string | number): void;
    getText(row: number, col: number): string;
    getValue(row: number, col: number): string | undefined;
    getColumnWidth(col: number): number;
    setColumnWidth(col: number, width: number): void;
    getRowHeight(row: number): number;
    setRowHeight(row: number, height: number): void;
    setRowTextColor(row: number, color: string): void;
    getObject(row: number, col: number): object | undefined;
    setObject(row: number, col: number, obj: object): void;
    cell(row: number, col: number): IRGridCell;
    isBased(row: number, col: number): boolean;
    getCell(row: number, col: number): IRGridCellMetaInfo;
    setCell(row: number, col: number, cellInfo: IRGridCellMetaInfoParam): void;
    selectCell(row: number, col: number): void;
    getRowCount(): number;
    getColCount(): number;
    getFreezedRowCount(): number;
    getFreezedColumnCount(): number;
    getRow(row: number): IRGridRow;
    getRowLodash(): _.Collection<IRGridRow>;
    addRow(height?: number): number;
    removeRow(row: number): boolean;
    removeColumn(col: number): boolean;
    removeRows(top: number, bottom: number): boolean;
    removeColumns(left: number, right: number): boolean;
    addColumn(width?: number): number;
    insertRow(row: number, height?: number): boolean;
    insertRows(row: number, count: number, height?: number): boolean;
    insertColumn(col: number, width?: number): boolean;
    insertColumns(col: number, count: number, width?: number): boolean;
    autoSizeColumn(col: number): void;
    autoSizeColumns(left: number, right: number): void;
    autoSizeRow(row: number): void;
    autoSizeRows(top: number, bottom: number): void;
    copyToClipboard(): void;
    undo(): void;
    redo(): void;
    paste(payload: string, cellCopyMetaInfoList?: IRGridCellCopyMetaInfo[]): void;
    hasRow(row: number): boolean;
    hasColumn(col: number): boolean;
    setRowVisible(row: number, visible: boolean): boolean;
    getRowVisible(row: number): boolean;
    setColumnVisible(col: number, visible: boolean): boolean;
    getColumnVisible(col: number): boolean;
    createFinder(args?: IRGridFinderArgs): {
        resetCursor: () => void;
        findNext: (options: import("./finder").IRGridFinderOptions) => IRGridCell | null;
        getAllMatchedCell: (options?: import("./finder").IRGridFinderOptions | undefined) => IRGridCell[];
    };
    selectColumn(col: number): void;
    selectColumns(left: number, right: number): void;
    selectRow(row: number): void;
    selectRows(top: number, bottom: number): void;
    freezeRows(freezingRowCount: number): void;
    freezeColumns(columnId: number): void;
    clearUndoStack(): void;
    setClipboardOptions(copyOptions: Partial<IRGridCellCopyMetaInfo>): void;
    doCommand<T extends keyof IRGridCommand>(commandKey: T, args: IRGridCommand[T]): void;
    sort(compareFunc: (a: IRGridRow, b: IRGridRow) => number, order: "ASC" | "DESC"): void;
    onSelectCell(_cell: IRGridCell): void;
    onResizeContext(): void;
    onResizeColumn(_colId: number): void;
    onEditCellDone(_cell: IRGridCell, _isChanged: boolean, _beforeText: string, _endKeyCode: string, _selStart: number, _selEnd: number): void;
    onSelectChanged(_selection: IRGridRange): void;
    onClearCell(_cell: IRGridCell): void;
    onColumnClick(cell: IRGridCell): void;
    onRowClick(cell: IRGridCell): void;
    onCreatingCell(_cell: IRGridCell): void;
    onCellRightClick(_cell: IRGridCell, _ev: MouseEvent): void;
    onEditKeyDown(_event: KeyboardEvent, _row: number, _col: number, _data: IRGridCellMetaInfo): void;
    onMountedRow(_row: number): void;
    onClipboardBeforePasteCell(_cell: IRGridCell, _text: string): boolean;
    onClipboardBeforePaste(_range: IRGridRange): void;
    onClipboardAfterPasteCell(_cell: IRGridCell): void;
    onClipboardAfterPaste(_range: IRGridRange): void;
    onAutoInsertRow(_row: number): boolean;
    onAutoInsertColumn(_col: number): boolean;
    onDoubleClickCell(cell: IRGridCell): void;
    onDropOnCell(_row: number, _col: number, _ev: DragEvent): void;
    onDragStartCell(cell: IRGridCell, ev: DragEvent): boolean;
    onNativePaste(ev: ClipboardEvent): void;
    onNativeCut(ev: ClipboardEvent): void;
    onGetCopyInfo(cell: IRGridCell): IRGridCellCopyMetaInfo;
    onNativeCopy(ev: ClipboardEvent): void;
    onCopy(): void;
    onUndo(_command: UndoCommand): void;
    onRedo(_command: UndoCommand): void;
    onContextMenu(_ev: MouseEvent, _cell: IRGridCell | null): void;
    private onInnerDoneCellEdit;
    private onCheckCellReadonly;
    private initPlugins;
    private initTableRowCol;
    private updateLastSectionProperly;
    private updateLastSelection;
    private createColElement;
    private addColGroup;
    private updateCurrentScrollBodyRowsLeft;
    private initColumnHeaderCell;
    private initRowHeaderCell;
    private initBodyCell;
    private createIRGridCell;
    private updateRowLeft;
    private updateRowsTopFrom;
    private getColElement;
    private setTableWidth;
    private setTableHeight;
    private onResized;
    private createIRGridRow;
    private scheduleRender;
}
export {};
//# sourceMappingURL=grid.d.ts.map
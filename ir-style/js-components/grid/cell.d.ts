import { IRGridEmitter } from './emitter';
import { HorizontalAlignment, IRIntent, VerticalAlignment } from "../../types";
export declare type IRGridCellRenderer = (_row: number, _col: number, _data: IRGridCellMetaInfo) => HTMLElement;
export declare type IRGridResizerCallback = (_row: number, _col: number) => boolean;
export declare type IRGridCellAddress = `${number},${number}`;
export interface IRGridRenderInfo {
    cellRenderer: IRGridCellRenderer;
    rowCount: number;
    colCount: number;
    defaultSize: number;
    minSize: number;
    maxSize: number;
}
export declare type IRGridRowHeaderInfo = Omit<IRGridRenderInfo, "rowCount">;
export declare type IRGridBodyInfo = Omit<IRGridRenderInfo, "colCount" | "defaultSize" | "minSize" | "maxSize">;
export declare type IRGridCellRenderType = "checkbox" | "select" | "datePicker" | "progress" | "default" | "rowNo" | "radio";
export declare type IRGridCellType = "col-header" | "row-header" | "body-cell";
export declare type IRGridCellWidthCalculation = (_cell: HTMLTableCellElement, _metaInfo: IRGridCellMetaInfo) => number;
export interface IRGridCellArgs {
    row: number;
    col: number;
    tag: "td" | "th";
    metaInfo: IRGridCellMetaInfo;
    cellRenderer: IRGridCellRenderer;
}
export interface IRGridCellMetaInfo {
    text?: string;
    label?: string;
    value?: string;
    editable?: boolean;
    readonly?: boolean;
    cellType?: IRGridCellRenderType;
    disabled?: boolean;
    tooltip?: string;
    hasMemo?: boolean;
    isError?: boolean;
    horizontalAlign?: HorizontalAlignment;
    verticalAlign?: VerticalAlignment;
    icon?: string;
    iconColor?: string;
    object?: object;
    textColor?: string;
    backColor?: string;
    clipboardEnabled?: boolean;
    dropDisabled?: boolean;
    draggable?: boolean;
    onCalculateWidth?: IRGridCellWidthCalculation;
    onCalculateHeight?: IRGridCellWidthCalculation;
    fontSize?: string;
    fontFamily?: string;
    intent?: IRIntent;
    emitter: IRGridEmitter;
    sortOrder?: "ASC" | "DESC";
}
export declare type IRGridCellMetaInfoParam = Omit<IRGridCellMetaInfo, "emitter">;
export declare class IRGridCell {
    private _mergeMain?;
    private _isEditing;
    private _row;
    private _col;
    private _cellRenderer;
    private _element;
    private _mark;
    private _metaInfo;
    private _lastEditSelection;
    constructor({ row, col, tag, metaInfo, cellRenderer }: IRGridCellArgs);
    get isFreezed(): boolean;
    get dropDisabled(): boolean | undefined;
    get isHeaderCell(): boolean;
    get isMerged(): boolean;
    get isSelected(): boolean;
    get innerHeight(): number;
    get mergeArea(): {
        top: number;
        left: number;
        bottom: number;
        right: number;
    };
    get innerWidth(): number;
    get isEditing(): boolean;
    get mergeInfo(): {
        rowSpan: number;
        colSpan: number;
    };
    get mergeMain(): IRGridCell | undefined;
    get row(): number;
    get col(): number;
    get bottom(): number;
    get right(): number;
    get visible(): boolean;
    get cellRenderer(): IRGridCellRenderer;
    get text(): string;
    get cellType(): IRGridCellType;
    get value(): string | undefined;
    get cellAddress(): IRGridCellAddress;
    get object(): object | undefined;
    get metaInfo(): IRGridCellMetaInfo;
    get element(): HTMLTableCellElement;
    get editable(): boolean;
    get lastSelectionStart(): number;
    get lastSelectionEnd(): number;
    get cellInfo(): IRGridCellMetaInfoParam;
    set visible(visible: boolean);
    set isDragOver(flag: boolean);
    set text(text: string);
    set cellInfo(cellInfo: IRGridCellMetaInfoParam);
    set cellType(type: IRGridCellType);
    set height(height: number | null);
    set mergeInfo({ rowSpan, colSpan }: {
        rowSpan: number;
        colSpan: number;
    });
    set mergeMain(cell: IRGridCell | undefined);
    set row(row: number);
    set col(col: number);
    set cellRenderer(renderer: IRGridCellRenderer);
    select(): void;
    release(): void;
    activate(): void;
    deactivate(): void;
    setBorderLeft(): void;
    setBorderTop(): void;
    setBorderBottom(): void;
    setBorderRight(): void;
    updateReadonlyStatus(): void;
    updateCellStatus(): void;
    render(): void;
    doEditMode(data?: string): boolean;
    clear(): void;
    freeze(): void;
    unfreeze(): void;
    onClick(_cell: IRGridCell): void;
    onDblClick(_cell: IRGridCell): void;
    onRightClick(_cell: IRGridCell, _ev: MouseEvent): void;
    onSelect(_cell: IRGridCell): void;
    onEditDone(_cell: IRGridCell, _isChanged: boolean, _beforeText: string, _endKeyCode: string, _selStart: number, _selEnd: number): void;
    onStartEdit(_cell: IRGridCell): void;
    onClear(_cell: IRGridCell): void;
    onEditKeyDown(_ev: KeyboardEvent, _row: number, _col: number, _meta: IRGridCellMetaInfo): void;
    onCheckReadonly(): boolean;
    onMoveLeftOnEdit(_ctrlKey: boolean, _shiftKey: boolean): void;
    onMoveRightOnEdit(_ctrlKey: boolean, _shiftKey: boolean): void;
    onMoveUpOnEdit(_ctrlKey: boolean, _shiftKey: boolean): void;
    onMoveDownOnEdit(_ctrlKey: boolean, _shiftKey: boolean): void;
    onTabOnEdit(_ctrlKey: boolean, _shiftKey: boolean): void;
    onEnterOnEdit(_ctrlKey: boolean, _shiftKey: boolean): void;
    private removeChildren;
    private syncClassAddWithMergeMain;
    private syncClassRemoveWithMergeMain;
    private addMark;
    private removeMark;
}
//# sourceMappingURL=cell.d.ts.map
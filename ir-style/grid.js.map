{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/emittery@0.10.2/node_modules/emittery/index.js", "../src/js-components/grid/grid.ts", "../src/js-components/grid/cell.ts", "../src/js-components/grid/grid.classNames.ts", "../src/js-components/grid/row.ts", "../src/js-components/grid/utils.ts", "../src/js-components/grid/cell-renderer.ts", "../src/js-components/grid/clipboard.ts", "../src/js-components/grid/cursor.ts", "../src/js-components/grid/emitter.ts", "../src/js-components/grid/finder.ts", "../src/js-components/grid/iterator.ts", "../src/js-components/grid/grid.command.ts", "../src/js-components/grid/merge.ts", "../src/js-components/grid/plugins/resizer.ts", "../src/js-components/grid/plugins/cell-selector.ts", "../src/js-components/grid/selector.ts", "../src/js-components/grid/plugins/default-key.ts", "../src/js-components/grid/plugins/row-selection.ts", "../src/js-components/grid/plugins/column-fill.ts", "../src/js-components/grid/plugins/cell-observer.ts", "../src/js-components/grid/plugins/cell-drop.ts", "../src/js-components/grid/plugins/single-cell-drag.ts", "../src/js-components/grid/undo-redo.ts", "../src/js-components/grid/virtual.ts", "../src/js-components/grid/sub-ui/checkbox.ts", "../src/js-components/grid/sub-ui/select.ts", "../src/js-components/grid/sub-ui/datePicker.ts", "../src/components/progress/progress.classNames.ts", "../src/js-components/grid/sub-ui/progress.ts", "../src/js-components/grid/sub-ui/button.ts", "../src/components/radio/radio.classNames.ts", "../src/js-components/grid/sub-ui/radio.ts", "../src/js-components/grid/sort-by-column.ts"],
  "sourcesContent": ["'use strict';\n\nconst anyMap = new WeakMap();\nconst eventsMap = new WeakMap();\nconst producersMap = new WeakMap();\nconst anyProducer = Symbol('anyProducer');\nconst resolvedPromise = Promise.resolve();\n\nconst listenerAdded = Symbol('listenerAdded');\nconst listenerRemoved = Symbol('listenerRemoved');\n\nlet isGlobalDebugEnabled = false;\n\nfunction assertEventName(eventName) {\n\tif (typeof eventName !== 'string' && typeof eventName !== 'symbol') {\n\t\tthrow new TypeError('eventName must be a string or a symbol');\n\t}\n}\n\nfunction assertListener(listener) {\n\tif (typeof listener !== 'function') {\n\t\tthrow new TypeError('listener must be a function');\n\t}\n}\n\nfunction getListeners(instance, eventName) {\n\tconst events = eventsMap.get(instance);\n\tif (!events.has(eventName)) {\n\t\tevents.set(eventName, new Set());\n\t}\n\n\treturn events.get(eventName);\n}\n\nfunction getEventProducers(instance, eventName) {\n\tconst key = typeof eventName === 'string' || typeof eventName === 'symbol' ? eventName : anyProducer;\n\tconst producers = producersMap.get(instance);\n\tif (!producers.has(key)) {\n\t\tproducers.set(key, new Set());\n\t}\n\n\treturn producers.get(key);\n}\n\nfunction enqueueProducers(instance, eventName, eventData) {\n\tconst producers = producersMap.get(instance);\n\tif (producers.has(eventName)) {\n\t\tfor (const producer of producers.get(eventName)) {\n\t\t\tproducer.enqueue(eventData);\n\t\t}\n\t}\n\n\tif (producers.has(anyProducer)) {\n\t\tconst item = Promise.all([eventName, eventData]);\n\t\tfor (const producer of producers.get(anyProducer)) {\n\t\t\tproducer.enqueue(item);\n\t\t}\n\t}\n}\n\nfunction iterator(instance, eventNames) {\n\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n\tlet isFinished = false;\n\tlet flush = () => {};\n\tlet queue = [];\n\n\tconst producer = {\n\t\tenqueue(item) {\n\t\t\tqueue.push(item);\n\t\t\tflush();\n\t\t},\n\t\tfinish() {\n\t\t\tisFinished = true;\n\t\t\tflush();\n\t\t}\n\t};\n\n\tfor (const eventName of eventNames) {\n\t\tgetEventProducers(instance, eventName).add(producer);\n\t}\n\n\treturn {\n\t\tasync next() {\n\t\t\tif (!queue) {\n\t\t\t\treturn {done: true};\n\t\t\t}\n\n\t\t\tif (queue.length === 0) {\n\t\t\t\tif (isFinished) {\n\t\t\t\t\tqueue = undefined;\n\t\t\t\t\treturn this.next();\n\t\t\t\t}\n\n\t\t\t\tawait new Promise(resolve => {\n\t\t\t\t\tflush = resolve;\n\t\t\t\t});\n\n\t\t\t\treturn this.next();\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdone: false,\n\t\t\t\tvalue: await queue.shift()\n\t\t\t};\n\t\t},\n\n\t\tasync return(value) {\n\t\t\tqueue = undefined;\n\n\t\t\tfor (const eventName of eventNames) {\n\t\t\t\tgetEventProducers(instance, eventName).delete(producer);\n\t\t\t}\n\n\t\t\tflush();\n\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\t{done: true, value: await value} :\n\t\t\t\t{done: true};\n\t\t},\n\n\t\t[Symbol.asyncIterator]() {\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\nfunction defaultMethodNamesOrAssert(methodNames) {\n\tif (methodNames === undefined) {\n\t\treturn allEmitteryMethods;\n\t}\n\n\tif (!Array.isArray(methodNames)) {\n\t\tthrow new TypeError('`methodNames` must be an array of strings');\n\t}\n\n\tfor (const methodName of methodNames) {\n\t\tif (!allEmitteryMethods.includes(methodName)) {\n\t\t\tif (typeof methodName !== 'string') {\n\t\t\t\tthrow new TypeError('`methodNames` element must be a string');\n\t\t\t}\n\n\t\t\tthrow new Error(`${methodName} is not Emittery method`);\n\t\t}\n\t}\n\n\treturn methodNames;\n}\n\nconst isListenerSymbol = symbol => symbol === listenerAdded || symbol === listenerRemoved;\n\nclass Emittery {\n\tstatic mixin(emitteryPropertyName, methodNames) {\n\t\tmethodNames = defaultMethodNamesOrAssert(methodNames);\n\t\treturn target => {\n\t\t\tif (typeof target !== 'function') {\n\t\t\t\tthrow new TypeError('`target` must be function');\n\t\t\t}\n\n\t\t\tfor (const methodName of methodNames) {\n\t\t\t\tif (target.prototype[methodName] !== undefined) {\n\t\t\t\t\tthrow new Error(`The property \\`${methodName}\\` already exists on \\`target\\``);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getEmitteryProperty() {\n\t\t\t\tObject.defineProperty(this, emitteryPropertyName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: new Emittery()\n\t\t\t\t});\n\t\t\t\treturn this[emitteryPropertyName];\n\t\t\t}\n\n\t\t\tObject.defineProperty(target.prototype, emitteryPropertyName, {\n\t\t\t\tenumerable: false,\n\t\t\t\tget: getEmitteryProperty\n\t\t\t});\n\n\t\t\tconst emitteryMethodCaller = methodName => function (...args) {\n\t\t\t\treturn this[emitteryPropertyName][methodName](...args);\n\t\t\t};\n\n\t\t\tfor (const methodName of methodNames) {\n\t\t\t\tObject.defineProperty(target.prototype, methodName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: emitteryMethodCaller(methodName)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\t}\n\n\tstatic get isDebugEnabled() {\n\t\tif (typeof process !== 'object') {\n\t\t\treturn isGlobalDebugEnabled;\n\t\t}\n\n\t\tconst {env} = process || {env: {}};\n\t\treturn env.DEBUG === 'emittery' || env.DEBUG === '*' || isGlobalDebugEnabled;\n\t}\n\n\tstatic set isDebugEnabled(newValue) {\n\t\tisGlobalDebugEnabled = newValue;\n\t}\n\n\tconstructor(options = {}) {\n\t\tanyMap.set(this, new Set());\n\t\teventsMap.set(this, new Map());\n\t\tproducersMap.set(this, new Map());\n\t\tthis.debug = options.debug || {};\n\n\t\tif (this.debug.enabled === undefined) {\n\t\t\tthis.debug.enabled = false;\n\t\t}\n\n\t\tif (!this.debug.logger) {\n\t\t\tthis.debug.logger = (type, debugName, eventName, eventData) => {\n\t\t\t\ttry {\n\t\t\t\t\t// TODO: Use https://github.com/sindresorhus/safe-stringify when the package is more mature. Just copy-paste the code.\n\t\t\t\t\teventData = JSON.stringify(eventData);\n\t\t\t\t} catch {\n\t\t\t\t\teventData = `Object with the following keys failed to stringify: ${Object.keys(eventData).join(',')}`;\n\t\t\t\t}\n\n\t\t\t\tif (typeof eventName === 'symbol') {\n\t\t\t\t\teventName = eventName.toString();\n\t\t\t\t}\n\n\t\t\t\tconst currentTime = new Date();\n\t\t\t\tconst logTime = `${currentTime.getHours()}:${currentTime.getMinutes()}:${currentTime.getSeconds()}.${currentTime.getMilliseconds()}`;\n\t\t\t\tconsole.log(`[${logTime}][emittery:${type}][${debugName}] Event Name: ${eventName}\\n\\tdata: ${eventData}`);\n\t\t\t};\n\t\t}\n\t}\n\n\tlogIfDebugEnabled(type, eventName, eventData) {\n\t\tif (Emittery.isDebugEnabled || this.debug.enabled) {\n\t\t\tthis.debug.logger(type, this.debug.name, eventName, eventData);\n\t\t}\n\t}\n\n\ton(eventNames, listener) {\n\t\tassertListener(listener);\n\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t\tgetListeners(this, eventName).add(listener);\n\n\t\t\tthis.logIfDebugEnabled('subscribe', eventName, undefined);\n\n\t\t\tif (!isListenerSymbol(eventName)) {\n\t\t\t\tthis.emit(listenerAdded, {eventName, listener});\n\t\t\t}\n\t\t}\n\n\t\treturn this.off.bind(this, eventNames, listener);\n\t}\n\n\toff(eventNames, listener) {\n\t\tassertListener(listener);\n\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t\tgetListeners(this, eventName).delete(listener);\n\n\t\t\tthis.logIfDebugEnabled('unsubscribe', eventName, undefined);\n\n\t\t\tif (!isListenerSymbol(eventName)) {\n\t\t\t\tthis.emit(listenerRemoved, {eventName, listener});\n\t\t\t}\n\t\t}\n\t}\n\n\tonce(eventNames) {\n\t\treturn new Promise(resolve => {\n\t\t\tconst off = this.on(eventNames, data => {\n\t\t\t\toff();\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t}\n\n\tevents(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t}\n\n\t\treturn iterator(this, eventNames);\n\t}\n\n\tasync emit(eventName, eventData) {\n\t\tassertEventName(eventName);\n\n\t\tthis.logIfDebugEnabled('emit', eventName, eventData);\n\n\t\tenqueueProducers(this, eventName, eventData);\n\n\t\tconst listeners = getListeners(this, eventName);\n\t\tconst anyListeners = anyMap.get(this);\n\t\tconst staticListeners = [...listeners];\n\t\tconst staticAnyListeners = isListenerSymbol(eventName) ? [] : [...anyListeners];\n\n\t\tawait resolvedPromise;\n\t\tawait Promise.all([\n\t\t\t...staticListeners.map(async listener => {\n\t\t\t\tif (listeners.has(listener)) {\n\t\t\t\t\treturn listener(eventData);\n\t\t\t\t}\n\t\t\t}),\n\t\t\t...staticAnyListeners.map(async listener => {\n\t\t\t\tif (anyListeners.has(listener)) {\n\t\t\t\t\treturn listener(eventName, eventData);\n\t\t\t\t}\n\t\t\t})\n\t\t]);\n\t}\n\n\tasync emitSerial(eventName, eventData) {\n\t\tassertEventName(eventName);\n\n\t\tthis.logIfDebugEnabled('emitSerial', eventName, eventData);\n\n\t\tconst listeners = getListeners(this, eventName);\n\t\tconst anyListeners = anyMap.get(this);\n\t\tconst staticListeners = [...listeners];\n\t\tconst staticAnyListeners = [...anyListeners];\n\n\t\tawait resolvedPromise;\n\t\t/* eslint-disable no-await-in-loop */\n\t\tfor (const listener of staticListeners) {\n\t\t\tif (listeners.has(listener)) {\n\t\t\t\tawait listener(eventData);\n\t\t\t}\n\t\t}\n\n\t\tfor (const listener of staticAnyListeners) {\n\t\t\tif (anyListeners.has(listener)) {\n\t\t\t\tawait listener(eventName, eventData);\n\t\t\t}\n\t\t}\n\t\t/* eslint-enable no-await-in-loop */\n\t}\n\n\tonAny(listener) {\n\t\tassertListener(listener);\n\n\t\tthis.logIfDebugEnabled('subscribeAny', undefined, undefined);\n\n\t\tanyMap.get(this).add(listener);\n\t\tthis.emit(listenerAdded, {listener});\n\t\treturn this.offAny.bind(this, listener);\n\t}\n\n\tanyEvent() {\n\t\treturn iterator(this);\n\t}\n\n\toffAny(listener) {\n\t\tassertListener(listener);\n\n\t\tthis.logIfDebugEnabled('unsubscribeAny', undefined, undefined);\n\n\t\tthis.emit(listenerRemoved, {listener});\n\t\tanyMap.get(this).delete(listener);\n\t}\n\n\tclearListeners(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n\t\tfor (const eventName of eventNames) {\n\t\t\tthis.logIfDebugEnabled('clear', eventName, undefined);\n\n\t\t\tif (typeof eventName === 'string' || typeof eventName === 'symbol') {\n\t\t\t\tgetListeners(this, eventName).clear();\n\n\t\t\t\tconst producers = getEventProducers(this, eventName);\n\n\t\t\t\tfor (const producer of producers) {\n\t\t\t\t\tproducer.finish();\n\t\t\t\t}\n\n\t\t\t\tproducers.clear();\n\t\t\t} else {\n\t\t\t\tanyMap.get(this).clear();\n\n\t\t\t\tfor (const listeners of eventsMap.get(this).values()) {\n\t\t\t\t\tlisteners.clear();\n\t\t\t\t}\n\n\t\t\t\tfor (const producers of producersMap.get(this).values()) {\n\t\t\t\t\tfor (const producer of producers) {\n\t\t\t\t\t\tproducer.finish();\n\t\t\t\t\t}\n\n\t\t\t\t\tproducers.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlistenerCount(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tlet count = 0;\n\n\t\tfor (const eventName of eventNames) {\n\t\t\tif (typeof eventName === 'string') {\n\t\t\t\tcount += anyMap.get(this).size + getListeners(this, eventName).size +\n\t\t\t\t\tgetEventProducers(this, eventName).size + getEventProducers(this).size;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (typeof eventName !== 'undefined') {\n\t\t\t\tassertEventName(eventName);\n\t\t\t}\n\n\t\t\tcount += anyMap.get(this).size;\n\n\t\t\tfor (const value of eventsMap.get(this).values()) {\n\t\t\t\tcount += value.size;\n\t\t\t}\n\n\t\t\tfor (const value of producersMap.get(this).values()) {\n\t\t\t\tcount += value.size;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tbindMethods(target, methodNames) {\n\t\tif (typeof target !== 'object' || target === null) {\n\t\t\tthrow new TypeError('`target` must be an object');\n\t\t}\n\n\t\tmethodNames = defaultMethodNamesOrAssert(methodNames);\n\n\t\tfor (const methodName of methodNames) {\n\t\t\tif (target[methodName] !== undefined) {\n\t\t\t\tthrow new Error(`The property \\`${methodName}\\` already exists on \\`target\\``);\n\t\t\t}\n\n\t\t\tObject.defineProperty(target, methodName, {\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: this[methodName].bind(this)\n\t\t\t});\n\t\t}\n\t}\n}\n\nconst allEmitteryMethods = Object.getOwnPropertyNames(Emittery.prototype).filter(v => v !== 'constructor');\n\nObject.defineProperty(Emittery, 'listenerAdded', {\n\tvalue: listenerAdded,\n\twritable: false,\n\tenumerable: true,\n\tconfigurable: false\n});\nObject.defineProperty(Emittery, 'listenerRemoved', {\n\tvalue: listenerRemoved,\n\twritable: false,\n\tenumerable: true,\n\tconfigurable: false\n});\n\nmodule.exports = Emittery;\n", "import Emittery from 'emittery';\nimport _ from 'lodash';\n\nimport {\n    IRGridCellMetaInfo,\n    IRGridRenderInfo,\n    IRGridBodyInfo,\n    IRGridRowHeaderInfo,\n    IRGridCell,\n    IRGridCellMetaInfoParam,\n} from \"./cell\";\nimport { renderGridCellDefault } from \"./cell-renderer\";\nimport { GridClipboardManager, createGridClipboardManager } from './clipboard';\nimport { createGridCellCursorManager } from './cursor';\nimport { initIRGridEmitter, IRGridEmitter } from './emitter';\nimport { createIRGridFinder, IRGridFinderArgs } from './finder';\nimport clsGrid from \"./grid.classNames\";\nimport { createCommandManager, IRGridCommand } from \"./grid.command\";\nimport { createGridCellGenerator } from './iterator';\nimport { MergeHandler, createMergeHandler } from \"./merge\";\nimport { ResizerPlugin, DefaultKeyPlugin, MouseCellSelectorPlugin, CellDropPlugin } from \"./plugins\";\nimport { IRGridRow } from \"./row\";\nimport { createGridSelector, GridSelector } from './selector';\nimport { UndoCommand, UndoManager, UndoOptions } from './undo-redo';\nimport { IRGridRange } from \"./utils\";\nimport { createVirtualRenderer, VirtualRenderer } from './virtual';\n\nimport { IRComponent } from \"@js-comp/base\";\nimport { getMinMaxBetween, ClipboardManager, get2DGenerator } from \"@utils\";\n\nexport declare type IRGridPlugin<T = unknown> = ( _grid: IRGrid, _table: HTMLTableElement, _context: HTMLElement ) => T;\n\nconst ROW_BORDER_SIZE = 1;\nconst CELL_WIDTH_PADDING = 20;\n\ndeclare type IRGridColHeaderArgs = Partial<IRGridRenderInfo>;\ndeclare type IRGridRowHeaderArgs = Partial<Omit<IRGridRenderInfo, \"rowCount\">>;\ndeclare type IRGridBodyArgs = Partial<IRGridBodyInfo>;\n\ndeclare type IRGridCellCopyMetaInfo = {\n    refCellText: string | undefined;\n    rowSpan: number;\n    colSpan: number;\n}\n\ndeclare type IRGridCellCopyOptions = {\n    rowSpan: boolean;\n    colSpan: boolean;\n}\n\nexport interface IRGridArgs {\n    contextElement: HTMLElement;\n    colHeader?: Partial<IRGridColHeaderArgs>;\n    rowHeader?: Partial<IRGridRowHeaderArgs>;\n    body?: Partial<IRGridBodyArgs>;\n    defaultColumnCellFormat?: Record<\"all\"| number, IRGridCellMetaInfoParam>;\n    plugins?: IRGridPlugin[];\n    undoManagerOptions?: UndoOptions;\n}\n\nconst DEFAULT_UNDO_OPTIONS: UndoOptions = {\n    stackLength: 256,\n    disabled: true,\n};\n\nexport class IRGrid extends IRComponent\n{\n    /* HTML Elements */\n    private fixedTopTable: HTMLTableElement;\n    private bodyTable: HTMLTableElement;\n\n    private divWrapper: HTMLDivElement;\n    private colgroup: HTMLTableColElement;\n    private tbody: HTMLTableSectionElement;\n\n    private totalHeight = 0;\n    private totalWidth = 0;\n    private _readonly = false;\n    private _rowList: IRGridRow[];\n    private colHeader: IRGridRenderInfo;\n    private rowHeader: IRGridRowHeaderInfo;\n    private body: IRGridBodyInfo;\n    private lastSelection?: IRGridRange;\n    private defaultColumnCellFormat: Record<\"all\" | number | string, IRGridCellMetaInfoParam>;\n\n    private mergeManager: MergeHandler;\n    private virtualRenderer: VirtualRenderer;\n    private clipboardManager: GridClipboardManager;\n    private selector: GridSelector;\n\n    private _headerRows: number;\n    private _headerColumns: number;\n    private _activeCell: IRGridCell | null;\n    private _emitter: IRGridEmitter;\n    private _isScheduledRender = false;\n    private _scheduledUpdateRowStart = -1;\n\n    private _undoManager: UndoManager;\n    private _cursorManager: ReturnType<typeof createGridCellCursorManager>;\n    private _commandManager: ReturnType<typeof createCommandManager>;\n\n    private _copyOptions: IRGridCellCopyOptions = {\n        rowSpan: true,\n        colSpan: true,\n    };\n\n    constructor( { contextElement, colHeader, rowHeader, body, defaultColumnCellFormat, plugins, undoManagerOptions = DEFAULT_UNDO_OPTIONS }: IRGridArgs )\n    {\n        super( { contextElement } );\n        this._rowList = [];\n        this._activeCell = null;\n        this._undoManager = new UndoManager( this, undoManagerOptions );\n        this._commandManager = createCommandManager( this, this._undoManager );\n        this._cursorManager = createGridCellCursorManager( this );\n\n        this.defaultColumnCellFormat = {\n            all: {\n                editable: true,\n                text: \"\",\n            },\n        };\n\n        if ( defaultColumnCellFormat )\n        {\n            for ( const [key, value] of Object.entries( defaultColumnCellFormat ) )\n                this.defaultColumnCellFormat[key] = Object.assign( this.defaultColumnCellFormat[key] || {}, value );\n        }\n\n        const defaultCellRenderer = renderGridCellDefault();\n\n        this.colHeader = Object.assign( {\n            rowCount: 0,\n            colCount: 5,\n            cellRenderer: defaultCellRenderer,\n            defaultSize: 100,\n            minSize: 80,\n            maxSize: 500,\n        }, colHeader );\n\n        this.colHeader.minSize = Math.min( this.colHeader.defaultSize, this.colHeader.minSize );\n        this.colHeader.maxSize = Math.max( this.colHeader.defaultSize, this.colHeader.maxSize );\n\n        this.rowHeader = Object.assign( {\n            rowCount: 0,\n            colCount: 0,\n            cellRenderer: defaultCellRenderer,\n            defaultSize: 30,\n            minSize: 30,\n            maxSize: 100,\n        }, rowHeader );\n\n        this.rowHeader.minSize = Math.min( this.rowHeader.defaultSize, this.rowHeader.minSize );\n        this.rowHeader.maxSize = Math.max( this.rowHeader.defaultSize, this.rowHeader.maxSize );\n\n        this.body = Object.assign( {\n            rowCount: 5,\n            colCount: 0,\n            cellRenderer: defaultCellRenderer,\n        }, body );\n\n        this._headerRows = this.colHeader.rowCount;\n        this._headerColumns = this.rowHeader.colCount;\n        this.contextElement.classList.add( clsGrid.grid.blockElementName );\n\n        this.fixedTopTable = document.createElement( \"table\" );\n        this.bodyTable = document.createElement( \"table\" );\n\n        this.fixedTopTable.setAttribute( \"data-type\", \"fixed-top\" );\n        this.bodyTable.setAttribute( \"data-type\", \"body\" );\n\n        this.divWrapper = document.createElement( \"div\" );\n        this.colgroup = document.createElement( \"colgroup\" );\n        this.tbody = document.createElement( \"tbody\" );\n\n        this.divWrapper.className = clsGrid.wrapper.blockElementName;\n\n        this.fixedTopTable.appendChild( this.colgroup );\n        this.fixedTopTable.appendChild( this.tbody );\n        this.divWrapper.appendChild( this.fixedTopTable );\n        this.contextElement.appendChild( this.divWrapper );\n\n        this.addGlobalEventListener( this.contextElement, \"scroll\", ( ev: Event ) =>\n        {\n            this.scheduleRender();\n            ev.preventDefault();\n        } );\n\n        this.resizeObserver = new ResizeObserver( () => this.onResized() );\n        this.resizeObserver.observe( this.contextElement );\n\n        this.initPlugins( plugins || [\n            DefaultKeyPlugin( ),\n            MouseCellSelectorPlugin(),\n            CellDropPlugin( ),\n            ResizerPlugin( {\n                enabledColResizer: true,\n                enabledRowResizer: true,\n            } ),\n        ] );\n\n        this.addCoreElement( this.divWrapper );\n\n        this.mergeManager = createMergeHandler( this );\n        this.virtualRenderer = createVirtualRenderer( this, this.tbody );\n        this.clipboardManager = createGridClipboardManager( this );\n        this.selector = createGridSelector( this );\n\n        this._emitter = new Emittery( { debug: { name: this.uuid } } );\n        initIRGridEmitter( this, this._emitter );\n\n        this.initTableRowCol();\n        this.fixedTopTable.addEventListener( \"contextmenu\", ( ev ) =>\n        {\n            let offsetX = ev.offsetX;\n            let offsetY = ev.offsetY;\n            let target = ev.target as HTMLElement;\n\n            while ( target.tagName !== \"TABLE\" )\n            {\n                offsetX += target.offsetLeft;\n                offsetY += target.offsetTop;\n                target = target.parentElement as HTMLElement;\n            }\n\n            console.log( offsetY, offsetX, this.findCellOrNull( offsetY, offsetX ) );\n\n            this.onContextMenu( ev, this.findCellOrNull( offsetY, offsetX ) );\n            ev.preventDefault();\n        } );\n    }\n\n    /*\n     * Getters\n     */\n    get emitter()\n    {\n        return this._emitter;\n    }\n\n    get fixedRowCount()\n    {\n        return this.colHeader.rowCount;\n    }\n\n    get fixedColumnCount()\n    {\n        return this.rowHeader.colCount;\n    }\n\n    get lastColumnId()\n    {\n        return this.colgroup.children.length - 1;\n    }\n\n    get width()\n    {\n        return this.totalWidth;\n    }\n\n    get height()\n    {\n        return this.totalHeight;\n    }\n\n    get fixedRowHeight()\n    {\n        const lastFixedRow = _( this._rowList )\n            .takeWhile( ( row ) => row.isFreezed )\n            .last();\n\n        return lastFixedRow ? lastFixedRow.bottom : 0;\n    }\n\n    get fixedColumnWidth()\n    {\n        return _.range( this.rowHeader.colCount )\n            .reduce( ( width, col ) => width + this.getColumnWidth( col ), 0 );\n    }\n\n    get scrollArea()\n    {\n        return {\n            scrollTop: this.contextElement.scrollTop,\n            scrollLeft: this.contextElement.scrollLeft,\n            scrollHeight: this.contextElement.scrollHeight,\n            scrollWidth: this.contextElement.scrollWidth,\n        };\n    }\n\n    get scrollTop()\n    {\n        return this.contextElement.scrollTop;\n    }\n\n    get scrollLeft()\n    {\n        return this.contextElement.scrollLeft;\n    }\n\n    get scrollBottom()\n    {\n        return this.contextElement.scrollTop + this.contextElement.clientHeight;\n    }\n\n    get scrollRight()\n    {\n        return this.contextElement.scrollLeft + this.contextElement.clientWidth;\n    }\n\n    get minColWidth()\n    {\n        return this.colHeader.minSize;\n    }\n\n    get maxColWidth()\n    {\n        return this.colHeader.maxSize;\n    }\n\n    get minRowHeight()\n    {\n        return this.rowHeader.minSize;\n    }\n\n    get maxRowHeight()\n    {\n        return this.rowHeader.maxSize;\n    }\n\n    get headerRows()\n    {\n        return this._headerRows;\n    }\n\n    get headerColumns()\n    {\n        return this._headerColumns;\n    }\n\n    get headerWidth()\n    {\n        return _.range( this.headerColumns )\n            .reduce( ( width, col ) => width + this.getColumnWidth( col ), 0 );\n    }\n\n    get headerHeight()\n    {\n        return _.range( this.headerRows )\n            .reduce( ( height, row ) => height + this.getRowHeight( row ), 0 );\n    }\n\n    get activeCell()\n    {\n        return this._activeCell;\n    }\n\n    /*\n     * Setters\n     */\n\n    set activeCell( cell: IRGridCell | null )\n    {\n        if ( cell !== this.activeCell )\n        {\n            this._activeCell?.deactivate();\n            this._activeCell = cell;\n\n            if ( this.activeCell )\n                this.onSelectCell( this.activeCell );\n\n            this._activeCell?.activate();\n        }\n    }\n\n    set readonly( flag: boolean )\n    {\n        this._readonly = flag;\n\n        this._rowList.forEach( ( row ) =>\n        {\n            _.range( this.getColCount() )\n                .forEach( ( col ) =>\n                {\n                    row.getCell( col ).updateReadonlyStatus();\n                } );\n        } );\n\n    }\n\n    /*\n     * Public Methods\n     */\n\n    addPlugin<T>( plugin: IRGridPlugin<T> )\n    {\n        return plugin( this, this.fixedTopTable, this.contextElement );\n    }\n\n    getMergeArea( row: number, col: number )\n    {\n        const cell = this.cell( row, col );\n\n        if ( cell.mergeInfo )\n            return {\n                rowSpan: cell.mergeInfo.rowSpan,\n                colSpan: cell.mergeInfo.colSpan,\n            };\n        else\n            throw new Error( `It's not a based cell!` );\n    }\n\n    isMerged( row: number, col: number )\n    {\n        return this.mergeManager.isMerged( row, col );\n    }\n\n    splitCells( row: number, col: number )\n    {\n        this.mergeManager.splitCells( row, col );\n        this.updateLastSelection();\n    }\n\n    mergeCells( top: number, left: number, bottom: number, right: number )\n    {\n        this.mergeManager.mergeCells( { top, left, bottom, right } );\n        this.updateLastSelection();\n    }\n\n    findRowOrNull( offsetY: number )\n    {\n        const { scrollTop } = this;\n        const searchStatus = offsetY < ( scrollTop + this.fixedRowHeight ) ?\n            {\n                startIndex: 0,\n                endIndex: this.fixedRowCount,\n                curIndex: Math.floor( this.fixedRowCount / 2 ),\n                scrollTop,\n            } :\n            {\n                startIndex: 0,\n                endIndex: this._rowList.length,\n                curIndex: Math.floor( this._rowList.length / 2 ),\n                scrollTop: 0,\n            };\n\n        let curRow = this._rowList[searchStatus.curIndex];\n\n        // use binary search\n        while ( !( offsetY >= ( searchStatus.scrollTop + curRow.top ) && offsetY <= ( searchStatus.scrollTop + curRow.bottom ) ) )\n        {\n            if ( offsetY < ( searchStatus.scrollTop + curRow.top ) )\n            {\n                // left \uD0D0\uC0C9\n                // \uCC3E\uC744 \uC218 \uC5C6\uC74C\n                if ( searchStatus.endIndex === searchStatus.curIndex )\n                    return null;\n\n                searchStatus.endIndex = searchStatus.curIndex;\n            }\n            else\n            {\n                // right \uD0D0\uC0C9\n                // \uCC3E\uC744 \uC218 \uC5C6\uC74C\n                if ( searchStatus.startIndex === searchStatus.curIndex )\n                    return null;\n\n                searchStatus.startIndex = searchStatus.curIndex;\n            }\n\n            searchStatus.curIndex = Math.floor( ( searchStatus.startIndex + searchStatus.endIndex ) / 2 );\n            curRow = this._rowList[searchStatus.curIndex];\n        }\n\n        return curRow;\n    }\n\n    findCellOrNull( offsetY: number, offsetX: number )\n    {\n        const row = this.findRowOrNull( offsetY );\n\n        if ( !row ) return null;\n\n        const { scrollLeft } = this;\n        const searchStatus = offsetX < ( scrollLeft + this.fixedColumnWidth ) ?\n            {\n                startIndex: 0,\n                endIndex: this.fixedColumnCount,\n                curIndex: Math.floor( this.fixedColumnCount / 2 ),\n                scrollLeft,\n            } :\n            {\n                startIndex: 0,\n                endIndex: row.cellCounts,\n                curIndex: Math.floor( row.cellCounts / 2 ),\n                scrollLeft: 0,\n            };\n\n        let curLeft = this.getColumnLeft( searchStatus.curIndex );\n        let curRight = curLeft + this.getColumnWidth( searchStatus.curIndex );\n\n        // use binary search\n        while ( !( offsetX >= ( searchStatus.scrollLeft + curLeft ) && offsetX <= ( searchStatus.scrollLeft + curRight ) ) )\n        {\n            if ( offsetX < ( searchStatus.scrollLeft + curLeft ) )\n            {\n                // left \uD0D0\uC0C9\n                // \uCC3E\uC744 \uC218 \uC5C6\uC74C\n                if ( searchStatus.endIndex === searchStatus.curIndex )\n                    return null;\n\n                searchStatus.endIndex = searchStatus.curIndex;\n            }\n            else\n            {\n                // right \uD0D0\uC0C9\n                // \uCC3E\uC744 \uC218 \uC5C6\uC74C\n                if ( searchStatus.startIndex === searchStatus.curIndex )\n                    return null;\n\n                searchStatus.startIndex = searchStatus.curIndex;\n            }\n\n            searchStatus.curIndex = Math.floor( ( searchStatus.startIndex + searchStatus.endIndex ) / 2 );\n            curLeft = this.getColumnLeft( searchStatus.curIndex );\n            curRight = curLeft + this.getColumnWidth( searchStatus.curIndex );\n\n        }\n\n        const cell = row.getCell( searchStatus.curIndex );\n\n        return cell.mergeMain ? cell.mergeMain : cell;\n\n    }\n\n    getBaseCell( row: number, col: number )\n    {\n        const cell = this.cell( row, col );\n\n        if ( cell.isMerged )\n            return {\n                row: cell.row,\n                col: cell.col,\n            };\n        else if ( cell.mergeMain )\n            return {\n                row: cell.mergeMain.row,\n                col: cell.mergeMain.col,\n            };\n        else\n            throw new Error( `It's not a merged cell!` );\n    }\n\n    releaseCells()\n    {\n        if ( this.lastSelection )\n        {\n            this.selector.releaseCells( this.lastSelection );\n            this.lastSelection = undefined;\n            this.activeCell = null;\n        }\n    }\n\n    /**\n     * headerRows\uB97C \uC81C\uC678\uD55C \uBAA8\uB4E0 body row \uC81C\uAC70\n     */\n    clearRows()\n    {\n        if ( this.headerRows < this.getRowCount() )\n            this.removeRows( this.headerRows, this.getRowCount() - 1 );\n\n        this.scheduleRender();\n    }\n\n    getColumnLeft( col: number )\n    {\n        return _.range( col )\n            .filter( ( col ) => this.getColumnVisible( col ) )\n            .reduce( ( sum, c ) => sum + this.getColumnWidth( c ), 0 );\n    }\n\n    selectRange( top: number, left: number, bottom: number, right: number, cell?: IRGridCell )\n    {\n        this.releaseCells();\n\n        // \uBC94\uC704 \uC120\uD0DD \uBC0F \uC800\uC7A5\n        this.lastSelection = this.selector.selectRange( { top, left, bottom, right } );\n        this.onSelectChanged( this.lastSelection );\n        this.activeCell = cell ?? this.cell( top, left );\n\n        return this.lastSelection;\n    }\n\n    selectAll()\n    {\n        return this.selectRange( this.headerRows, this.headerColumns, this.getRowCount() - 1, this.getColCount() - 1, this.activeCell || undefined );\n    }\n\n    getCellWidth( cell: IRGridCell )\n    {\n        if ( cell.mergeInfo )\n            return _.range( cell.mergeInfo.colSpan )\n                .filter( ( id ) => this.getColumnVisible( cell.col + id ) )\n                .reduce( ( width, id ) => width + this.getColumnWidth( cell.col + id ), 0 );\n        else\n            return this.getColumnWidth( cell.col );\n    }\n\n    getCellHeight( cell: IRGridCell )\n    {\n        if ( cell.mergeInfo )\n            return _.range( cell.mergeInfo.rowSpan )\n                .filter( ( id ) => this.getRowVisible( cell.row + id ) )\n                .reduce( ( height, id ) => height + this.getRowHeight( cell.row + id ), 0 );\n        else\n            return this.getRowHeight( cell.col );\n    }\n\n    getSelection()\n    {\n        return _.clone( this.lastSelection );\n    }\n\n    scrollOnRow( row: number )\n    {\n        const targetRow = this.getRow( row );\n        const targetTop = targetRow.top;\n        const targetBottom = targetRow.top + targetRow.height;\n        const { scrollBottom, fixedRowHeight, scrollTop } = this;\n        const fixedScrollTop = scrollTop + fixedRowHeight;\n\n        if ( scrollBottom < targetBottom )\n            // scroll \uBC94\uC704\uBCF4\uB2E4 \uD558\uB2E8\uC5D0 \uC788\uB294 \uACBD\uC6B0\n            this.contextElement.scrollTop = scrollTop + ( targetBottom - scrollBottom );\n        else if ( fixedScrollTop > targetTop )\n            // scroll \uBC94\uC704\uBCF4\uB2E4 \uC0C1\uB2E8\uC5D0 \uC788\uB294 \uACBD\uC6B0\n            this.contextElement.scrollTop = targetTop - fixedRowHeight;\n    }\n\n    scrollOnCol( col: number )\n    {\n        const targetLeft = this.getColumnLeft( col );\n        const targetRight = targetLeft + this.getColumnWidth( col );\n        const { fixedColumnWidth, scrollRight, scrollLeft } = this;\n        const fixedScrollLeft = scrollLeft + fixedColumnWidth;\n\n        if ( scrollRight < targetRight )\n            // scroll \uBC94\uC704\uBCF4\uB2E4 \uC6B0\uCE21\uC5D0 \uC788\uB294 \uACBD\uC6B0\n            this.contextElement.scrollLeft = scrollLeft + ( targetRight - scrollRight );\n        else if ( fixedScrollLeft > targetLeft )\n            // scroll \uBC94\uC704\uBCF4\uB2E4 \uC88C\uCE21\uC5D0 \uC788\uB294 \uACBD\uC6B0\n            this.contextElement.scrollLeft = targetLeft - fixedColumnWidth;\n    }\n\n    resetScroll()\n    {\n        this.contextElement.scrollTop = 0;\n        this.contextElement.scrollLeft = 0;\n    }\n\n    scrollInView( row: number, col: number )\n    {\n        this.scrollOnRow( row );\n        this.scrollOnCol( col );\n    }\n\n    focus()\n    {\n        this.contextElement.dispatchEvent( new Event( \"focus\" ) );\n    }\n\n    setText( row: number, col: number, value: string | number )\n    {\n        // \uC22B\uC790\uB77C\uBA74 \uC22B\uC790\uB97C string\uC73C\uB85C \uBCC0\uD658, \uC544\uB2C8\uB77C\uBA74 falsy \uC77C \uC2DC \uBE48 \uAC12\uC73C\uB85C \uCC98\uB9AC\n        this.setCell( row, col, {\n            text: Number.isInteger( value ) ? value.toString() : `${value || \"\"}`,\n        } );\n    }\n\n    getText( row:number, col:number )\n    {\n        return this.cell( row, col ).text;\n    }\n\n    getValue( row:number, col:number )\n    {\n        return this.cell( row, col ).value;\n    }\n\n    getColumnWidth( col: number )\n    {\n        return parseInt( ( this.colgroup.children[col] as HTMLTableColElement ).style.width || \"0\" );\n    }\n\n    setColumnWidth( col: number, width: number )\n    {\n        const colElement = this.getColElement( col );\n\n        if ( !colElement )\n            throw new Error( `Not found column at ${col}` );\n\n        this.totalWidth -= this.getColumnWidth( col );\n        const w = getMinMaxBetween( width, this.colHeader.minSize, this.colHeader.maxSize );\n        this.setTableWidth( this.totalWidth + w );\n\n        colElement.style.width = `${w}px`;\n\n        if ( col < this.getFreezedColumnCount() )\n        {\n            _( this._rowList )\n                .take( this.getFreezedRowCount() )\n                .forEach( ( row ) => this.updateRowLeft( row ) );\n\n            this.updateCurrentScrollBodyRowsLeft();\n        }\n\n        this._emitter.emit( \"onColumnResized\", { col } );\n        this.generateScrollBar();\n        this.onResizeColumn( col );\n    }\n\n    getRowHeight( row: number )\n    {\n        if ( !this._rowList[row] )\n            throw new Error( `Not found column at ${row}` );\n        else\n            return this._rowList[row].height;\n    }\n\n    setRowHeight( row: number, height: number )\n    {\n        if ( !this._rowList[row] )\n            throw new Error( `Not found row at ${row}` );\n\n        const gridRow = this._rowList[row];\n\n        gridRow.height = getMinMaxBetween( height, this.rowHeader.minSize, this.rowHeader.maxSize );\n\n        this.updateRowsTopFrom( row );\n    }\n\n    setRowTextColor( row: number, color: string )\n    {\n        if ( !this._rowList[row] )\n            throw new Error( `Not found column at ${row}` );\n\n        this._rowList[row].textColor = color;\n    }\n\n    getObject( row: number, col: number )\n    {\n        if ( this.cell( row, col ) )\n            return this.cell( row, col ).object;\n        else\n            throw new Error( `Not found cell ${row}, ${col}` );\n    }\n\n    setObject( row:number, col: number, obj: object )\n    {\n        if ( this.cell( row, col ) )\n            this.setCell( row, col, { object: obj } );\n        else\n            throw new Error( `Not found cell ${row}, ${col}` );\n    }\n\n    cell( row:number, col: number )\n    {\n        return this.getRow( row ).getCell( col );\n    }\n\n    isBased( row: number, col: number )\n    {\n        return this.cell( row, col ).mergeMain === undefined;\n    }\n\n    getCell( row: number, col: number )\n    {\n        return this.getRow( row ).getCell( col ).metaInfo;\n    }\n\n    setCell( row: number, col: number, cellInfo: IRGridCellMetaInfoParam )\n    {\n        if ( !this.cell( row, col ) )\n            throw new Error( `Not found cell ${row}, ${col}` );\n\n        this.cell( row, col ).cellInfo = cellInfo;\n    }\n\n    selectCell( row: number, col: number )\n    {\n        this.selectRange( row, col, row, col, this.cell( row, col ) );\n    }\n\n    getRowCount()\n    {\n        return this._rowList.length;\n    }\n\n    getColCount()\n    {\n        return this.colgroup.children.length;\n    }\n\n    getFreezedRowCount()\n    {\n        return this.colHeader.rowCount;\n    }\n\n    getFreezedColumnCount()\n    {\n        return this.rowHeader.colCount;\n    }\n\n    getRow( row: number )\n    {\n        return this._rowList[row];\n    }\n\n    getRowLodash()\n    {\n        return _( this._rowList );\n    }\n\n    addRow( height = this.rowHeader.defaultSize )\n    {\n        const row = this._rowList.length;\n        const gridRow = this.createIRGridRow( row, this.totalHeight, height );\n\n        this._rowList.push( gridRow );\n        this.onResized();\n\n        return row;\n    }\n\n    removeRow( row: number )\n    {\n        return this.removeRows( row, row );\n    }\n\n    removeColumn( col: number )\n    {\n        return this.removeColumns( col, col );\n    }\n\n    removeRows( top: number, bottom: number )\n    {\n        if ( top < this.headerRows )\n            throw new Error( `Could not remove rows at header!` );\n\n        if ( bottom > this.getRowCount() )\n            throw new Error( `Out of index. maximum bottom values is ${this.getRowCount()}. If you wanna clear all rows, please call clearRows()` );\n\n        // \uBCD1\uD569\uB41C row\uAC00 \uAC78\uCE5C \uACBD\uC6B0 \uC81C\uAC70 \uBD88\uAC00\uD568 (\uC544\uC608 \uBC94\uC704\uC5D0 \uD3EC\uD568\uB41C \uACBD\uC6B0\uB294 \uAC00\uB2A5)\n        if ( this.mergeManager.checkConflictingInRows( top, bottom ) ) return false;\n\n        // DOM \uC81C\uAC70\n        _.range( top, bottom + 1 )\n            .forEach( ( id ) =>\n            {\n                const row = this._rowList[id];\n\n                row.unmount();\n                this.setTableHeight( this.totalHeight - ( row.height + ROW_BORDER_SIZE ) );\n\n                // \uBCD1\uD569\uB41C \uC140\uC774 \uC788\uB2E4\uBA74 \uC81C\uAC70\n                for ( const cell of row.getCellGenerator() )\n                {\n                    if ( cell.isMerged )\n                        this.mergeManager.removeMergeCell( cell.row, cell.col );\n                }\n\n            } );\n\n        const removedRows = 1 + bottom - top;\n\n        const tmpTop = this.getRow( top ).top;\n        this._rowList.splice( top, removedRows );\n\n        // row\uAC00 \uB0A8\uC544\uC788\uB2E4\uBA74\n        if ( top < this.getRowCount() )\n        {\n            this.getRow( top ).top = tmpTop;\n\n            let tmp = top;\n            // top \uC7AC\uC124\uC815\n            this.updateRowsTopFrom( top );\n\n            // row index \uCC98\uB9AC\n            while ( this._rowList[tmp] )\n            {\n                this._rowList[tmp].rowId -= removedRows;\n                ++tmp;\n            }\n        }\n\n        this.onResized();\n\n        return true;\n    }\n\n    removeColumns( left: number, right: number )\n    {\n        if ( left < this.rowHeader.colCount )\n            throw new Error( `The col num that you wanna remove must be less then '${this.rowHeader.colCount}'! (Row Header Columns)` );\n\n        if ( right > this.getColCount() )\n            throw new Error( `Out of index. maximum bottom values is ${this.getColCount()}` );\n\n        // \uBCD1\uD569\uB41C col\uAC00 \uAC78\uCE5C \uACBD\uC6B0 \uC81C\uAC70 \uBD88\uAC00\uD568\n        if ( this.mergeManager.checkConflictingInColumns( left, right ) ) return false;\n\n        // DOM \uC81C\uAC70\n        _( this._rowList )\n            .forEach( ( row ) =>\n            {\n                // \uBCD1\uD569\uB41C \uC140 \uC788\uB294 \uACBD\uC6B0 \uC81C\uAC70\n                for ( const cell of row.getCellGenerator( left, right ) )\n                {\n                    if ( cell.isMerged )\n                        this.mergeManager.removeMergeCell( cell.row, cell.col );\n                }\n                row.removeCells( left, right );\n            } );\n\n        // colgroup \uC81C\uAC70\n        _.range( left, right + 1 )\n            .forEach( ( ) =>\n            {\n                this.setTableWidth( this.totalWidth - this.getColumnWidth( left ) );\n                this.colgroup.removeChild( this.colgroup.children[left] );\n            } );\n\n        this.onResized();\n\n        return true;\n    }\n\n    addColumn( width = this.colHeader.defaultSize )\n    {\n        const col = this.addColGroup( width );\n\n        _( this._rowList )\n            .forEach( ( row ) => row.addCell( this.createIRGridCell( row.rowId, col ) ) );\n\n        ++this.colHeader.colCount;\n        this.onResized();\n\n        return col;\n    }\n\n    insertRow( row: number, height?: number )\n    {\n        return this.insertRows( row, 1, height );\n    }\n\n    insertRows( row: number, count: number, height?: number )\n    {\n        // thead\uC5D0\uB294 \uB123\uC744 \uC218 \uC5C6\uC74C\n        if ( row < this.headerRows )\n            throw new Error( `Could not insert rows in column header` );\n        // conflict \uB098\uB294 row \uC0BD\uC785 \uBD88\uAC00\n        else if ( !this.mergeManager.checkCanInsertRow( row ) ) return false;\n\n        const size = height || this.rowHeader.defaultSize;\n        const tmpRowList: IRGridRow[] = [];\n        const tmpHeight = ( size * tmpRowList.length ) + tmpRowList.length;\n        const target = this._rowList[row];\n        const lastSelection = _.cloneDeep( this.lastSelection );\n\n        this.releaseCells();\n\n        _.range( count )\n            .forEach( ( id ) => tmpRowList.push( this.createIRGridRow( row + id, target.top, size ) ) );\n\n        // \uAE30\uC874 row index, top \uBCC0\uACBD\n        _.range( row, this._rowList.length )\n            .forEach( ( id ) =>\n            {\n                this._rowList[id].rowId += count;\n                this._rowList[id].top += tmpHeight + ROW_BORDER_SIZE;\n            } );\n\n        this._rowList.splice( row, 0, ...tmpRowList );\n        this.updateRowsTopFrom( row );\n\n        // target\uC774 \uC774\uBBF8 mount\uB41C \uC0C1\uD0DC\uB77C\uBA74 \uB9C8\uC6B4\uD2B8\n        if ( target.isMounted )\n            tmpRowList.forEach( ( row ) => row.mount( this.tbody, target.element ) );\n\n        if ( lastSelection )\n            this.selectRange( lastSelection.top, lastSelection.left, lastSelection.bottom, lastSelection.right );\n\n        this.onResized();\n\n        return true;\n    }\n\n    insertColumn( col: number, width?: number )\n    {\n        return this.insertColumns( col, 1, width );\n    }\n\n    insertColumns( col: number, count: number, width = this.colHeader.defaultSize )\n    {\n        // head \uBD80\uBD84\uC5D0\uB294 \uB123\uC744 \uC218 \uC5C6\uC74C\n        if ( col < this.headerColumns ) throw new Error( `Could not insert rows in row header` );\n        else if ( !this.mergeManager.checkCanInsertColumn( col ) ) return false;\n\n        const lastSelection = _.cloneDeep( this.lastSelection );\n        // colGroup \uCD94\uAC00\n        _.range( count )\n            .forEach( ( ) =>\n            {\n                this.createColElement( col );\n                ( this.colgroup.children[col] as HTMLTableColElement )\n                    .style.width = `${width}px`;\n\n                this.setTableWidth( this.width + width );\n            } );\n\n        this.releaseCells();\n\n        // \uBAA8\uB4E0 row cells \uC0BD\uC785\n        this._rowList.forEach( ( row ) =>\n        {\n            const tmpCellList: IRGridCell[] = [];\n\n            _.range( count )\n                .forEach( ( id ) => tmpCellList.push( this.createIRGridCell( row.rowId, col + id ) ) );\n\n            row.insertCells( tmpCellList, col );\n        } );\n\n        if ( lastSelection )\n            this.selectRange( lastSelection.top, lastSelection.left, lastSelection.bottom, lastSelection.right );\n\n        this.onResized();\n\n        return true;\n    }\n\n    autoSizeColumn( col: number )\n    {\n        this.autoSizeColumns( col, col );\n    }\n\n    autoSizeColumns( left: number, right: number )\n    {\n        const isChanged = _.range( left, right + 1 )\n            .reduce( ( changed, col ) =>\n            {\n                const maxWidth = _( this._rowList )\n                    .map( ( row ) => row.getCell( col ) )\n                    .filter( ( cell ) => cell.visible && cell.mergeInfo.colSpan === 1 )\n                    .flatMap( ( cell ) => cell.innerWidth )\n                    .reduce( ( a, b ) => Math.max( a, b ), 0 );\n\n                const checkIsChanged = maxWidth !== this.getColumnWidth( col );\n\n                if ( checkIsChanged )\n                    this.setColumnWidth( col, getMinMaxBetween( Math.ceil( maxWidth + CELL_WIDTH_PADDING ), this.colHeader.minSize, this.colHeader.maxSize ) );\n\n                return changed || checkIsChanged;\n            }, false );\n\n        if ( isChanged )\n            this.onResized();\n    }\n\n    autoSizeRow( row: number )\n    {\n        this.autoSizeRows( row, row );\n    }\n\n    autoSizeRows( top: number, bottom: number )\n    {\n        const isChanged = _.range( top, bottom + 1 )\n            .reduce( ( changed, r ) =>\n            {\n                const checkIsChanged = this._rowList[r].setAutoHeight( this.rowHeader.minSize, this.rowHeader.maxSize );\n\n                return changed || checkIsChanged;\n            }, false );\n\n        if ( isChanged )\n        {\n            this.updateRowsTopFrom( top );\n            this.onResized();\n        }\n    }\n\n    copyToClipboard()\n    {\n        ClipboardManager.setText( this.clipboardManager.getSelectedText() );\n    }\n\n    undo()\n    {\n        if ( this._undoManager.isDisabled ) return;\n\n        const command = this._undoManager.undo();\n\n        if ( command )\n            this.onUndo( command );\n        else\n            console.warn( \"No undo command in stack.\" );\n    }\n\n    redo()\n    {\n        if ( this._undoManager.isDisabled ) return;\n\n        const command = this._undoManager.redo();\n\n        if ( command )\n            this.onRedo( command );\n        else\n            console.warn( \"No redo command in stack.\" );\n    }\n\n    paste( payload: string, cellCopyMetaInfoList: IRGridCellCopyMetaInfo[] = [] )\n    {\n        const selection = this.getSelection();\n\n        if ( !selection ) return;\n\n        const data = this.clipboardManager.convertText( payload );\n\n        if ( data.length === 0 ) return;\n\n        const { top, left } = selection;\n        const bottom = Math.max( top + data.length - 1, selection.bottom );\n        const right = Math.max( left + data[0].length - 1, selection.right );\n        const pasteRange = { top, left, bottom, right };\n        const pastingList: Array<{row: number; col: number; text: string}> = [];\n        const dataSize = { height: data.length, width: data[0].length };\n\n        // processing pasting data\n        for ( const { y, x } of get2DGenerator( pasteRange.bottom - pasteRange.top + 1, pasteRange.right - pasteRange.left + 1 ) )\n        {\n            const [row, col] = [y + top, x + left];\n\n            if ( !this.hasRow( row ) && this.onAutoInsertRow( row ) )\n                this.addRow();\n\n            if ( !this.hasColumn( col ) && this.onAutoInsertColumn( col ) )\n                this.addColumn();\n\n            if ( this.hasRow( row ) && this.hasColumn( col ) )\n            {\n                const cell = this.cell( row, col );\n                const text = data[y % dataSize.height][x % dataSize.width];\n\n                /**\n                 * \uBD99\uC5EC\uB123\uAE30\uAC00 \uAC00\uB2A5\uD55C \uC140\uC778\uC9C0 \uD655\uC778\n                 * disabled\n                 * readonly\n                 * visible\n                 * clipboardEnabled\n                 * merge \uCC98\uB9AC \uAC00\uB2A5 \uC5EC\uBD80\n                 */\n                if ( cell.visible && cell.onCheckReadonly() !== true &&\n                    cell.metaInfo.disabled !== true &&\n                    cell.metaInfo.clipboardEnabled !== false &&\n                    this.onClipboardBeforePasteCell( cell, text ) )\n                    pastingList.push( { row, col, text } );\n            }\n        }\n\n        // \uBD99\uC5EC\uB123\uC744 \uC140\uC774 \uC5C6\uC744 \uC2DC return\n        if ( pastingList.length === 0 )\n            return;\n\n        this.onClipboardBeforePaste( pasteRange );\n\n        // after\n        pastingList\n            .forEach( ( { text, row, col }, id ) =>\n            {\n                const cell = this.cell( row, col );\n                const cellCopyMetaInfo = cellCopyMetaInfoList[id];\n\n                cell.text = text;\n\n                // \uC140\uC774 \uC228\uAE40\uC774\uAC70\uB098 \uBCD1\uD569 \uC815\uBCF4 \uC5C6\uC73C\uBA74 return\n                if ( !cell.visible || !cellCopyMetaInfo ) return;\n\n                // \uBCD1\uD569\uB418\uC5C8\uB2E4\uBA74 \uBCD1\uD569 \uC2E4\uD589\n                if ( cellCopyMetaInfo.rowSpan > 1 || cellCopyMetaInfo.colSpan > 1 )\n                {\n                    const range = {\n                        top: row,\n                        bottom: row + cellCopyMetaInfo.rowSpan - 1,\n                        left: col,\n                        right: col + cellCopyMetaInfo.colSpan - 1,\n                    };\n\n                    if ( this.mergeManager.isValidatedMerging( range ) )\n                        this.mergeManager.mergeCells( range );\n                    else\n                        console.warn( `Occurred an error for merging cells when pasting! ${row}, ${col}` );\n                }\n\n                // mainText \uC815\uBCF4 \uC788\uC744 \uC2DC \uD574\uB2F9 \uC815\uBCF4\uB85C \uC9C0\uC815\n                if ( cellCopyMetaInfo.refCellText )\n                    cell.text = cellCopyMetaInfo.refCellText;\n\n                this.onClipboardAfterPasteCell( cell );\n            } );\n\n        this.onClipboardAfterPaste( pasteRange );\n        this.selectRange( pasteRange.top, pasteRange.left, pasteRange.bottom, pasteRange.right );\n    }\n\n    hasRow( row: number )\n    {\n        return row < this.getRowCount();\n    }\n\n    hasColumn( col: number )\n    {\n        return col < this.getColCount();\n    }\n\n    setRowVisible( row: number, visible: boolean )\n    {\n        // \uBCD1\uD569\uB41C \uC140\uC774 \uC788\uC73C\uBA74 false \uB9AC\uD134 \uD6C4 \uC228\uAE30\uC9C0 \uC54A\uC74C.\n        if ( this.mergeManager.checkConflictingInRows( row, row ) ) return false;\n        if ( visible === this.getRowVisible( row ) ) return true;\n\n        this._rowList[row].visible = visible;\n\n        this.setTableHeight( this.totalHeight + ( visible ? this.getRowHeight( row ) : -this.getRowHeight( row ) ) );\n        this.updateRowsTopFrom( row );\n        this.scheduleRender();\n\n        return true;\n    }\n\n    getRowVisible( row: number )\n    {\n        return this._rowList[row].visible;\n    }\n\n    setColumnVisible( col: number, visible: boolean )\n    {\n        // \uBCD1\uD569\uB41C \uC140\uC774 \uC788\uC73C\uBA74 false \uB9AC\uD134 \uD6C4 \uC228\uAE30\uC9C0 \uC54A\uC74C.\n        if ( this.mergeManager.checkConflictingInColumns( col, col ) ) return false;\n        else if ( visible === this.getColumnVisible( col ) ) return false;\n\n        this._rowList.forEach( ( row ) => row.setColumnVisible( col, visible ) );\n        ( this.colgroup.children[col] as HTMLElement ).style.display = visible ? \"\" : \"none\";\n\n        this.setTableWidth( this.totalWidth + ( visible ? this.getColumnWidth( col ) : -this.getColumnWidth( col ) ) );\n        this.updateCurrentScrollBodyRowsLeft();\n\n        return true;\n    }\n\n    getColumnVisible( col: number )\n    {\n        return ( this.colgroup.children[col] as HTMLElement ).style.display !== \"none\";\n    }\n\n    createFinder( args: IRGridFinderArgs = {} )\n    {\n        return createIRGridFinder( this, args );\n    }\n\n    selectColumn( col: number )\n    {\n        this.selectColumns( col, col );\n    }\n\n    selectColumns( left: number, right: number )\n    {\n        if ( left < this.headerColumns ) return;\n\n        if ( this.headerRows < this.getRowCount() )\n            this.selectRange( this.headerRows, left, this.getRowCount() - 1, right, this.cell( this.headerRows, left ) );\n    }\n\n    selectRow( row: number )\n    {\n        this.selectRows( row, row );\n    }\n\n    selectRows( top: number, bottom: number )\n    {\n        if ( top < this.headerRows ) return;\n\n        this.selectRange( top, this.headerColumns, bottom, this.getColCount() - 1, this.cell( top, this.headerColumns ) );\n    }\n\n    freezeRows( freezingRowCount: number )\n    {\n        const { headerRows } = this;\n        this.colHeader.rowCount = freezingRowCount + headerRows;\n\n        // \uAE30\uC874 freeze\uB41C \uD589\uC744 \uBAA8\uB450 \uCD08\uAE30\uD654 (headerRows \uC81C\uC678)\n        _( this._rowList )\n            .drop( this.headerRows )\n            .takeWhile( ( row ) => row.isFreezed )\n            .forEach( ( row ) =>\n            {\n                row.unfreeze();\n                row.unmount();\n            } );\n\n        const firstRowElement = _.range( headerRows )\n            .reduce( ( element ) =>\n            {\n                return ( element?.nextElementSibling ) as HTMLElement | undefined;\n            }, this.tbody.firstElementChild as HTMLElement | undefined );\n\n        // \uC0C8\uB85C \uB2E4\uC2DC freezing\n        _( this._rowList )\n            .drop( headerRows )\n            .take( freezingRowCount )\n            .forEach( ( row ) =>\n            {\n                row.freeze();\n                row.mount( this.tbody, firstRowElement );\n            } );\n    }\n\n    freezeColumns( columnId: number )\n    {\n        this.rowHeader.colCount = columnId + 1;\n\n        _( this._rowList )\n            .forEach( ( row ) => row.setStickyHeader( this.rowHeader.colCount ) );\n\n        this.updateCurrentScrollBodyRowsLeft();\n    }\n\n    clearUndoStack()\n    {\n        this._undoManager.clearUndoStacks();\n    }\n\n    setClipboardOptions( copyOptions: Partial<IRGridCellCopyMetaInfo> )\n    {\n        Object.assign( this._copyOptions, copyOptions );\n    }\n\n    doCommand <T extends keyof IRGridCommand>( commandKey: T, args: IRGridCommand[T] )\n    {\n        return this._commandManager.doCommand( commandKey, args );\n    }\n\n    sort( compareFunc: ( a: IRGridRow, b: IRGridRow ) => number, order: \"ASC\" | \"DESC\" )\n    {\n        const cloneRows = this._rowList.slice( this.headerRows );\n        const tmpHeight = this.height;\n\n        this.releaseCells();\n\n        cloneRows.sort( ( a, b ) =>\n        {\n            if ( order === \"ASC\" )\n                return compareFunc( a, b );\n            else\n                return -compareFunc( a, b );\n        } );\n\n        // \uD604\uC7AC body rows \uC81C\uAC70\n        this.clearRows();\n\n        // \uC815\uB82C row id, top \uC7AC\uC870\uC815\n        cloneRows.reduce( ( state, row ) =>\n        {\n            row.top = state.top;\n            row.rowId = state.id;\n\n            state.top += row.height;\n            ++state.id;\n\n            return state;\n        }, { id: this.headerRows, top: this.fixedRowHeight } );\n\n        // \uC815\uB82C rows \uCD94\uAC00\n        this._rowList.push( ...cloneRows );\n\n        // \uC804\uCCB4 \uD14C\uC774\uBE14 \uD589 \uD06C\uAE30 \uC7AC\uC9C0\uC815\n        this.setTableHeight( tmpHeight );\n\n        // row render\n        this.virtualRenderer.render();\n    }\n\n    /*\n     * Object Events\n     */\n    onSelectCell( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onResizeContext()\n    {\n        // nothing\n    }\n\n    onResizeColumn( _colId: number )\n    {\n        // nothing\n    }\n\n    onEditCellDone( _cell:IRGridCell, _isChanged: boolean, _beforeText: string, _endKeyCode: string, _selStart: number, _selEnd: number )\n    {\n        // nothing\n    }\n\n    onSelectChanged( _selection: IRGridRange )\n    {\n        // nothing\n    }\n\n    onClearCell( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onColumnClick( cell: IRGridCell )\n    {\n        this.selectColumn( cell.col );\n    }\n\n    onRowClick( cell: IRGridCell )\n    {\n        this.selectRow( cell.row );\n    }\n\n    onCreatingCell( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onCellRightClick( _cell: IRGridCell, _ev: MouseEvent )\n    {\n        // nothing\n    }\n\n    onEditKeyDown( _event: KeyboardEvent, _row: number, _col: number, _data: IRGridCellMetaInfo )\n    {\n        // nothing\n    }\n\n    onMountedRow( _row: number )\n    {\n        // nothing\n    }\n\n    onClipboardBeforePasteCell( _cell: IRGridCell, _text: string )\n    {\n        return true;\n    }\n\n    onClipboardBeforePaste( _range: IRGridRange )\n    {\n        // nothing\n    }\n\n    onClipboardAfterPasteCell( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onClipboardAfterPaste( _range: IRGridRange )\n    {\n        // nothing\n    }\n\n    /**\n     * false\uB97C \uB9AC\uD134\uD558\uBA74 \uC790\uB3D9 \uC0DD\uC131\uB418\uC9C0 \uC54A\uC74C. \uAE30\uBCF8 \uAC12 true \uB9AC\uD134\n     * @param _row \uC0DD\uC131\uB420 row \uAC12\n     * @returns\n     */\n    onAutoInsertRow( _row: number )\n    {\n        return true;\n    }\n\n    /**\n     * false \uB9AC\uD134 \uC2DC \uC0DD\uC131\uB418\uC9C0 \uC54A\uC74C. \uAE30\uBCF8 \uAC12 true \uB9AC\uD134\n     * @param _col \uC0DD\uC131\uB420 col \uAC12\n     * @returns\n     */\n    onAutoInsertColumn( _col: number )\n    {\n        return true;\n    }\n\n    onDoubleClickCell( cell: IRGridCell )\n    {\n        cell.doEditMode();\n    }\n\n    onDropOnCell( _row: number, _col: number, _ev: DragEvent )\n    {\n        // nothing\n    }\n\n    onDragStartCell( cell: IRGridCell, ev: DragEvent )\n    {\n        if ( !ev.dataTransfer || !cell.metaInfo.object ) return false;\n\n        ev.dataTransfer.setData( \"application/json\", JSON.stringify( cell.metaInfo.object ) );\n\n        return true;\n    }\n\n    onNativePaste( ev: ClipboardEvent )\n    {\n        if ( !ev.clipboardData ) throw new Error( 'Invalid ClipboardEvent' );\n        if ( this.activeCell == null ) throw new Error( 'No active call when pasting' );\n\n        const pastingText = ev.clipboardData.getData( \"text/plain\" ) || \"\";\n        const cellMetaInfoBuffer = ev.clipboardData.getData( \"ir-grid/merge-cells\" ) || \"\";\n\n        // \uBCF5\uC0AC\uD55C \uC140\uC758 metaInfo \uC788\uC744 \uC2DC, \uD574\uB2F9 \uC815\uBCF4 \uBC18\uC601 (\uBCD1\uD569, \uC0C9\uC0C1, \uC544\uC774\uCF58 \uB4F1?  )\n        if ( cellMetaInfoBuffer )\n            this.paste( pastingText, JSON.parse( cellMetaInfoBuffer ) as IRGridCellCopyMetaInfo[] );\n        else\n            this.paste( pastingText, [] );\n\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    onNativeCut( ev: ClipboardEvent )\n    {\n        const selection = this.getSelection();\n\n        if ( !selection ) throw new Error( 'Detected copy without selection' );\n\n        this.onNativeCopy( ev );\n\n        const generator = createGridCellGenerator( this );\n\n        for ( const cell of generator.getSelectionGenerator( selection ) )\n            cell.editable && cell.clear();\n\n    }\n\n    onGetCopyInfo( cell: IRGridCell ): IRGridCellCopyMetaInfo\n    {\n        return {\n            refCellText: cell.mergeMain ? cell.mergeMain.text : undefined,\n            rowSpan: this._copyOptions.rowSpan ? cell.mergeInfo.rowSpan : 1,\n            colSpan: this._copyOptions.colSpan ? cell.mergeInfo.colSpan : 1,\n        };\n    }\n\n    onNativeCopy( ev: ClipboardEvent )\n    {\n        if ( !ev.clipboardData ) throw new Error( 'Invalid ClipboardEvent' );\n\n        const selection = this.getSelection();\n\n        if ( !selection ) throw new Error( 'Detected copy without selection' );\n\n        const copyText = this.clipboardManager.getSelectedText();\n        const generator = createGridCellGenerator( this );\n        const cellInfo: IRGridCellCopyMetaInfo[] = [];\n\n        for ( const cell of generator.getSelectionGenerator( selection ) )\n        {\n            cellInfo.push( this.onGetCopyInfo( cell ) );\n        }\n\n        ev.clipboardData.setData( \"ir-grid/merge-cells\", JSON.stringify( cellInfo ) );\n        ev.clipboardData.setData( \"text/plain\", copyText );\n\n        this.focus();\n        this.onCopy();\n\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    onCopy( )\n    {\n        // nothing\n    }\n\n    onUndo( _command: UndoCommand )\n    {\n        // nothing\n    }\n\n    onRedo( _command: UndoCommand )\n    {\n        // nothing\n    }\n\n    onContextMenu( _ev:MouseEvent, _cell: IRGridCell | null )\n    {\n        // nothing\n    }\n\n    /*\n     * Private Methods\n     */\n\n    private onInnerDoneCellEdit( cell: IRGridCell, isChanged: boolean, beforeText: string )\n    {\n        if ( !isChanged ) return;\n\n        this.doCommand( \"DONE_CELL_EDIT\", {\n            row: cell.row,\n            col: cell.col,\n            text: cell.text,\n            beforeText,\n        } );\n    }\n\n    private onCheckCellReadonly( cell:IRGridCell )\n    {\n        return this._readonly ? true : cell.metaInfo.readonly === true;\n    }\n\n    private initPlugins( plugins: IRGridPlugin[] )\n    {\n        try\n        {\n            for ( const plugin of plugins )\n            {\n                plugin( this, this.fixedTopTable, this.contextElement );\n            }\n        }\n        catch ( err )\n        {\n            console.error( \"Plugin init error\", err );\n        }\n    }\n\n    private initTableRowCol()\n    {\n        // init cols\n        _.range( this.colHeader.colCount )\n            .forEach( () => this.addColGroup( this.colHeader.defaultSize ) );\n\n        // init rows\n        _.range( this.colHeader.rowCount )\n            .forEach( () =>\n            {\n                const headerRow = this.getRow( this.addRow() );\n\n                headerRow.mount( this.tbody );\n                headerRow.freezeHeader();\n            } );\n\n        _.range( this.body.rowCount )\n            .forEach( () => this.addRow() );\n    }\n\n    private updateLastSectionProperly()\n    {\n        if ( this.lastSelection )\n        {\n            const rowCnt = this.getRowCount() - 1;\n            const colCnt = this.getColCount() - 1;\n\n            if ( this.lastSelection.top > rowCnt || this.lastSelection.left > colCnt )\n            {\n                this.releaseCells();\n                return;\n            }\n\n            this.selectRange( Math.min( this.lastSelection.top, rowCnt ),\n                Math.min( this.lastSelection.left, colCnt ),\n                Math.min( this.lastSelection.bottom, rowCnt ),\n                Math.min( this.lastSelection.right, colCnt ) );\n        }\n    }\n\n    private updateLastSelection()\n    {\n        if ( this.lastSelection )\n            this.selectRange( this.lastSelection.top, this.lastSelection.left, this.lastSelection.bottom, this.lastSelection.right );\n    }\n\n    private createColElement( id?: number )\n    {\n        const colElement = document.createElement( \"col\" );\n\n        if ( id )\n        {\n            const target = this.colgroup.children[id] as HTMLTableColElement;\n            // id \uC788\uB294 \uACBD\uC6B0\n            target.insertAdjacentElement( \"beforebegin\", colElement );\n        }\n        else // id\uAC00 \uC5C6\uC73C\uBA74 \uB9C8\uC9C0\uB9C9\uC5D0 \uCD94\uAC00\n            this.colgroup.appendChild( colElement );\n\n        return colElement;\n    }\n\n    private addColGroup( width: number )\n    {\n        const col = this.colgroup.children.length;\n\n        this.createColElement( );\n        this.setColumnWidth( col, width );\n\n        return col;\n    }\n\n    private updateCurrentScrollBodyRowsLeft()\n    {\n        const top = this.contextElement.scrollTop - this.contextElement.scrollHeight;\n        const { scrollBottom } = this;\n\n        _( this._rowList )\n            .take( this.getFreezedRowCount() )\n            .forEach( ( row ) => this.updateRowLeft( row ) );\n\n        _( this._rowList )\n            .drop( this.getFreezedRowCount() )\n            .filter( ( row ) => row.top >= top && row.top <= scrollBottom )\n            .forEach( ( row ) => this.updateRowLeft( row ) );\n    }\n\n    private initColumnHeaderCell( cell: IRGridCell )\n    {\n        cell.cellType = \"col-header\";\n        cell.onClick = () => this.onColumnClick( cell );\n    }\n\n    private initRowHeaderCell( cell: IRGridCell )\n    {\n        cell.cellType = \"row-header\";\n        cell.onClick = () => this.onRowClick( cell );\n    }\n\n    private initBodyCell( cell:IRGridCell )\n    {\n        cell.cellType = \"body-cell\";\n\n        cell.onMoveLeftOnEdit = () => this._cursorManager.selectNextSelection( 0, -1, false );\n        cell.onMoveUpOnEdit = () => this._cursorManager.selectNextSelection( -1, 0, false );\n        cell.onMoveRightOnEdit = () => this._cursorManager.selectNextSelection( 0, 1, false );\n        cell.onMoveDownOnEdit = () => this._cursorManager.selectNextSelection( 1, 0, false );\n        cell.onTabOnEdit = ( _, shiftKey ) =>\n        {\n            if ( shiftKey )\n                this._cursorManager.selectBeforeActiveCell();\n            else\n                this._cursorManager.selectNextActiveCell();\n        };\n        cell.onEnterOnEdit = () =>\n        {\n            const nextRow = this._cursorManager.getNextYBelow( cell.row, cell.col, 1 );\n\n            // row\uAC00 \uAC19\uC73C\uBA74 return\n            if ( cell.row === nextRow ) return;\n\n            // \uB2E4\uC74C event loop\uC5D0 doEditMode \uC608\uC57D\n            setTimeout( () =>\n            {\n                this.selectCell( nextRow, cell.col );\n                this.cell( nextRow, cell.col ).doEditMode();\n            }, 0 );\n        };\n\n        cell.onClear = () => this.onClearCell( cell );\n        cell.onDblClick = () => this.onDoubleClickCell( cell );\n        cell.onEditDone = ( cell, isChanged, beforeText, endKeyCode, selStart, selEnd ) =>\n        {\n            if ( this.activeCell === cell )\n                this.selectCell( cell.row, cell.col );\n\n            this.onEditCellDone( cell, isChanged, beforeText, endKeyCode, selStart, selEnd );\n            this.onInnerDoneCellEdit( cell, isChanged, beforeText );\n            this.focus();\n        };\n\n        cell.onEditKeyDown = ( ev, row, col, meta ) => this.onEditKeyDown( ev, row, col, meta );\n    }\n\n    private createIRGridCell( row: number, col: number )\n    {\n        const isColHeader = row < this.headerRows;\n        const isRowHeader = !isColHeader && col < this.headerColumns;\n        const tag = isColHeader || isRowHeader ? \"th\" : \"td\";\n        const cellRenderer =\n            isColHeader ?\n                this.colHeader.cellRenderer :\n                isRowHeader ?\n                    this.rowHeader.cellRenderer : this.body.cellRenderer;\n\n        const cell = new IRGridCell( {\n            row, col, tag, cellRenderer,\n            metaInfo: {\n                ...this.defaultColumnCellFormat.all,\n                ...this.defaultColumnCellFormat[col],\n                emitter: this._emitter,\n            },\n        } );\n\n        cell.onRightClick = ( c, ev ) => this.onCellRightClick( c, ev );\n        cell.onCheckReadonly = () => this.onCheckCellReadonly( cell );\n\n        switch ( true )\n        {\n            case isColHeader:\n                this.initColumnHeaderCell( cell );\n                break;\n            case isRowHeader:\n                this.initRowHeaderCell( cell );\n                break;\n            default:\n                this.initBodyCell( cell );\n                break;\n        }\n\n        this.onCreatingCell( cell );\n\n        return cell;\n    }\n\n    private updateRowLeft( row: IRGridRow )\n    {\n        _.range( this.getFreezedColumnCount() )\n            .filter( ( col ) => this.getColumnVisible( col ) )\n            .reduce( ( width, col ) =>\n            {\n                row.setCellLeft( col, width );\n\n                return width + this.getColumnWidth( col );\n            }, 0 );\n    }\n\n    private updateRowsTopFrom( start: number )\n    {\n        if ( this._scheduledUpdateRowStart !== -1 && this._scheduledUpdateRowStart > start )\n            this._scheduledUpdateRowStart = start;\n        else if ( this._scheduledUpdateRowStart === -1 )\n        {\n            /// -1\uC778 \uACBD\uC6B0, update \uC2A4\uCF00\uC904 \uB4F1\uB85D\n            this._scheduledUpdateRowStart = start;\n\n            setTimeout( () =>\n            {\n                const startRow = this._rowList[this._scheduledUpdateRowStart];\n\n                // top\uC744 \uAE30\uC900\uC73C\uB85C \uD558\uB2E8 \uBAA8\uB4E0 row top \uC5C5\uB370\uC774\uD2B8 (\uC228\uACA8\uC9C4 \uD589 \uC81C\uC678)\n                const maxHeight = _( this._rowList )\n                    .drop( this._scheduledUpdateRowStart )\n                    .filter( ( row ) => row.visible )\n                    .reduce( ( top, row ) =>\n                    {\n                        row.top = top;\n\n                        return top + row.height + ROW_BORDER_SIZE;\n                    }, startRow.top );\n\n                this.setTableHeight( maxHeight );\n                this._scheduledUpdateRowStart = -1;\n            }, 0 );\n        }\n    }\n\n    private getColElement( id: number )\n    {\n        return this.colgroup.children[id] as HTMLTableColElement;\n    }\n\n    private setTableWidth( width: number )\n    {\n        this.totalWidth = width;\n        this.divWrapper.style.width = `${this.totalWidth}px`;\n    }\n\n    private setTableHeight( height: number )\n    {\n        this.totalHeight = height;\n        this.divWrapper.style.height = `${this.totalHeight}px`;\n    }\n\n    private onResized()\n    {\n        this.updateLastSectionProperly();\n        this._emitter.emit( \"onContextResized\" );\n        this.onResizeContext();\n        this.scheduleRender();\n    }\n\n    private createIRGridRow( row: number, top: number, height: number )\n    {\n        const gridRow = new IRGridRow( { row, height, top, rowType: row < this.headerRows ? \"col-header\" : \"body\" } );\n\n        // cell \uCD94\uAC00\n        _.range( this.getColCount() )\n            .forEach( ( col ) => gridRow.addCell( this.createIRGridCell( row, col ) ) );\n\n        // visible \uCC98\uB9AC\n        _.range( this.getColCount() )\n            .filter( ( col ) => this.getColumnVisible( col ) === false )\n            .forEach( ( col ) => gridRow.setColumnVisible( col, false ) );\n\n        gridRow.onMounted = ( ) =>\n        {\n            gridRow.setStickyHeader( this.rowHeader.colCount );\n            this.onMountedRow( gridRow.rowId );\n        };\n\n        gridRow.onChangedHeight = ( ) =>\n        {\n            _.range( this.getColCount() )\n                .forEach( ( col ) =>\n                {\n                    // \uB192\uC774 \uBCC0\uACBD \uC2DC, \uC601\uD5A5 \uBC1B\uB294 \uBCD1\uD569\uB41C \uC140\uC774 \uC788\uB2E4\uBA74\uB41C \uD574\uB2F9 \uC140 \uB192\uC774 \uC5C5\uB370\uC774\uD2B8\n                    const cell = gridRow.getCell( col );\n                    const mergeMain = cell.mergeMain ? cell.mergeMain : cell.mergeInfo.rowSpan > 1 ? cell : null;\n\n                    if ( mergeMain )\n                        mergeMain.height = this.mergeManager.getMergedRowHeight( mergeMain.row, mergeMain.row + mergeMain.mergeInfo.rowSpan - 1 );\n                } );\n        };\n\n        this.setTableHeight( this.totalHeight + height + ROW_BORDER_SIZE );\n\n        return gridRow;\n    }\n\n    private scheduleRender()\n    {\n        if ( this._isScheduledRender ) return;\n\n        this._isScheduledRender = true;\n\n        requestAnimationFrame( () =>\n        {\n            this.updateCurrentScrollBodyRowsLeft();\n            this.generateScrollBar();\n            this.virtualRenderer.render();\n            this._isScheduledRender = false;\n        } );\n    }\n}", "import _ from 'lodash';\n\nimport { IRGridEmitter } from './emitter';\nimport clsGrid from \"./grid.classNames\";\nimport { GRID_HEIGHT_PROPERTY } from './row';\nimport * as utils from \"./utils\";\n\nimport { HorizontalAlignment, IRIntent, VerticalAlignment } from \"@types\";\nimport { getTextWidthContext } from '@utils';\n\nconst DEFAULT_ROW_PADDING = 13;\n\nconst calculateCellInnerHeight = ( cell: HTMLTableCellElement, _metaInfo: IRGridCellMetaInfo ) =>\n{\n    return DEFAULT_ROW_PADDING + utils.getCellInnerHeight( cell );\n};\n\nconst calculateCellInnerWidth = ( cell: HTMLTableCellElement, metaInfo: IRGridCellMetaInfo ) =>\n{\n    const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n    const iconWidth = [metaInfo.icon, metaInfo.sortOrder].reduce( ( count, icon ) => icon ? count + 1 : count, 0 ) * 20;\n    const lines = ( `${metaInfo.text || \"\"}` ).split( \"\\n\" );\n    const firstLine = lines[0] || \"\";\n\n    return _( lines )\n        .drop( 1 )\n        .reduce( ( width, line ) => Math.max( width, context.calculateWidth( line ) ),\n            iconWidth + context.calculateWidth( firstLine ) );\n};\n\nexport declare type IRGridCellRenderer = ( _row: number, _col: number, _data: IRGridCellMetaInfo ) => HTMLElement;\nexport declare type IRGridResizerCallback = ( _row: number, _col: number ) => boolean\nexport declare type IRGridCellAddress = `${number},${number}`;\n\nexport interface IRGridRenderInfo {\n    cellRenderer: IRGridCellRenderer;\n    rowCount: number;\n    colCount: number;\n    defaultSize: number;\n    minSize: number;\n    maxSize: number;\n}\n\nexport declare type IRGridRowHeaderInfo = Omit<IRGridRenderInfo, \"rowCount\">\nexport declare type IRGridBodyInfo = Omit<IRGridRenderInfo, \"colCount\" | \"defaultSize\" | \"minSize\" | \"maxSize\">\nexport declare type IRGridCellRenderType = \"checkbox\" | \"select\" | \"datePicker\" | \"progress\" | \"default\" | \"rowNo\" | \"radio\"\nexport declare type IRGridCellType = \"col-header\" | \"row-header\" | \"body-cell\"\nexport declare type IRGridCellWidthCalculation = ( _cell: HTMLTableCellElement, _metaInfo: IRGridCellMetaInfo ) => number\nexport interface IRGridCellArgs {\n    row: number;\n    col: number;\n    tag: \"td\" | \"th\";\n    metaInfo: IRGridCellMetaInfo;\n    cellRenderer: IRGridCellRenderer;\n}\n\nexport interface IRGridCellMetaInfo {\n    text?: string;\n    label?: string;\n    value?: string;\n    editable?: boolean;\n    readonly?: boolean;\n    cellType?: IRGridCellRenderType;\n    disabled?: boolean;\n    tooltip?: string;\n    hasMemo?: boolean;\n    isError?: boolean;\n    horizontalAlign?: HorizontalAlignment;\n    verticalAlign?: VerticalAlignment;\n    icon?: string;\n    iconColor?: string;\n    object?: object;\n    textColor?: string;\n    backColor?: string;\n    clipboardEnabled?: boolean;\n    dropDisabled?: boolean;\n    draggable?: boolean;\n    onCalculateWidth?: IRGridCellWidthCalculation;\n    onCalculateHeight?: IRGridCellWidthCalculation;\n    fontSize?: string;\n    fontFamily?: string;\n    intent?: IRIntent;\n    emitter: IRGridEmitter;\n    sortOrder?: \"ASC\" | \"DESC\";\n}\n\nexport type IRGridCellMetaInfoParam = Omit<IRGridCellMetaInfo, \"emitter\">\n\nconst deactivationClsList = [\n    clsGrid.th['is-active'],\n    // header border \uC11C\uC2DD\uB3C4 \uD568\uAED8 \uC81C\uAC70\n    clsGrid.thBorderBottom.blockElementName,\n    clsGrid.thBorderRight.blockElementName,\n    clsGrid.thBorderTop.blockElementName,\n    clsGrid.thBorderLeft.blockElementName,\n];\n\nexport class IRGridCell\n{\n    private _mergeMain?: IRGridCell;\n    private _isEditing = false;\n    private _row = -1;\n    private _col = -1;\n    private _cellRenderer: IRGridCellRenderer;\n\n    private _element: HTMLTableCellElement;\n    private _mark: HTMLElement | undefined;\n    private _metaInfo: IRGridCellMetaInfo;\n\n    private _lastEditSelection = { start: 0, end: 0 };\n\n    constructor( { row, col, tag, metaInfo, cellRenderer }: IRGridCellArgs )\n    {\n        this._element = document.createElement( tag );\n        this._element.rowSpan = 1;\n        this._element.colSpan = 1;\n        this._metaInfo = { ...metaInfo };\n        this._cellRenderer = cellRenderer;\n\n        this.row = row;\n        this.col = col;\n\n        this._element.onclick = ( ) => this.onClick( this );\n        this._element.onmouseup = ( ev ) =>\n        {\n            if ( ev.button === 2 ) // RIGHT\n                this.onRightClick( this, ev );\n        };\n        this._element.ondblclick = () => this.onDblClick( this );\n\n        this._metaInfo.onCalculateWidth = calculateCellInnerWidth;\n        this._metaInfo.onCalculateHeight = calculateCellInnerHeight;\n    }\n\n    /*\n     * Getters\n     */\n\n    get isFreezed()\n    {\n        return this._element.classList.contains( clsGrid.cellSticky.blockElementName ) || this._element.tagName === \"TH\";\n    }\n\n    get dropDisabled()\n    {\n        return this._metaInfo.dropDisabled;\n    }\n\n    get isHeaderCell()\n    {\n        return this._element.tagName === \"TH\";\n    }\n\n    get isMerged()\n    {\n        return this.mergeInfo.rowSpan > 1 || this.mergeInfo.colSpan > 1;\n    }\n\n    get isSelected()\n    {\n        return this._element.classList.contains( clsGrid.cell[\"is-selected\"] );\n    }\n\n    get innerHeight()\n    {\n        if ( this._metaInfo.onCalculateHeight )\n            return this._metaInfo.onCalculateHeight( this._element, this._metaInfo );\n        else\n            return utils.getCellInnerHeight( this._element );\n    }\n\n    get mergeArea()\n    {\n        return {\n            top: this.row,\n            left: this.col,\n            bottom: this.row + this._element.rowSpan - 1,\n            right: this.col + this._element.colSpan - 1,\n        };\n    }\n\n    get innerWidth()\n    {\n        if ( this._metaInfo.onCalculateWidth )\n            return this._metaInfo.onCalculateWidth( this._element, this._metaInfo );\n        else\n            return 0;\n    }\n\n    get isEditing()\n    {\n        return this._isEditing;\n    }\n\n    get mergeInfo()\n    {\n        return {\n            rowSpan: this._element.rowSpan,\n            colSpan: this._element.colSpan,\n        };\n    }\n\n    get mergeMain()\n    {\n        return this._mergeMain;\n    }\n\n    get row()\n    {\n        return this._row;\n    }\n\n    get col()\n    {\n        return this._col;\n    }\n\n    get bottom()\n    {\n        return this.row + this.mergeInfo.rowSpan - 1;\n    }\n\n    get right()\n    {\n        return this.col + this.mergeInfo.colSpan - 1;\n    }\n\n    get visible()\n    {\n        return this._element.style.display !== \"none\";\n    }\n\n    get cellRenderer()\n    {\n        return this._cellRenderer;\n    }\n\n    get text()\n    {\n        const { text } = this._metaInfo;\n\n        if ( text === undefined || text === null )\n            return \"\";\n\n        return text;\n    }\n\n    get cellType()\n    {\n        return this._element.getAttribute( \"data-type\" ) as IRGridCellType;\n    }\n\n    get value()\n    {\n        return this._metaInfo.value;\n    }\n\n    get cellAddress(): IRGridCellAddress\n    {\n        return `${this.row},${this.col}`;\n    }\n\n    get object()\n    {\n        return this._metaInfo.object;\n    }\n\n    get metaInfo()\n    {\n        return this._metaInfo;\n    }\n\n    get element()\n    {\n        return this._element;\n    }\n\n    get editable()\n    {\n        return !( this._metaInfo.editable !== true || this._metaInfo.disabled || this.onCheckReadonly() || this.isEditing );\n    }\n\n    get lastSelectionStart()\n    {\n        return this._lastEditSelection.start;\n    }\n\n    get lastSelectionEnd()\n    {\n        return this._lastEditSelection.end;\n    }\n\n    get cellInfo()\n    {\n        return this._metaInfo;\n    }\n\n    /*\n     * Setters\n     */\n\n    set visible( visible: boolean )\n    {\n        // mergeMain\uC774 \uC5C6\uB294 \uACBD\uC6B0\uC5D0\uB9CC\n        if ( visible && !this.mergeMain )\n        {\n            this._element.style.removeProperty( \"display\" );\n            this.render();\n        }\n        else\n            this._element.style.display = \"none\";\n    }\n\n    set isDragOver( flag: boolean )\n    {\n        if ( flag )\n            this._element.classList.add( clsGrid.cell['is-dragging'] );\n        else\n            this._element.classList.remove( clsGrid.cell['is-dragging'] );\n    }\n\n    set text( text: string )\n    {\n        this.cellInfo = { text };\n    }\n\n    set cellInfo( cellInfo: IRGridCellMetaInfoParam )\n    {\n        Object.assign( this._metaInfo, cellInfo );\n\n        this.render();\n        this._metaInfo.emitter.emit( \"onCellInfoChanged\", { row: this.row, col: this.col } );\n    }\n\n    set cellType( type: IRGridCellType )\n    {\n        this._element.setAttribute( \"data-type\", type );\n    }\n\n    set height( height: number | null )\n    {\n        if ( height )\n            this._element.style.setProperty( GRID_HEIGHT_PROPERTY, `${height}px` );\n        else\n            this._element.style.removeProperty( GRID_HEIGHT_PROPERTY );\n    }\n\n    set mergeInfo( { rowSpan = 1, colSpan = 1 } )\n    {\n        if ( rowSpan === 1 )\n            this.height = null;\n\n        this._element.rowSpan = rowSpan;\n        this._element.colSpan = colSpan;\n        this.render();\n    }\n\n    set mergeMain( cell: IRGridCell | undefined )\n    {\n        this._mergeMain = cell;\n        this.visible = cell === undefined;\n    }\n\n    set row( row: number )\n    {\n        this._row = row;\n        this._element.setAttribute( \"data-row\", row.toString() );\n    }\n\n    set col( col: number )\n    {\n        this._col = col;\n        this._element.setAttribute( \"data-col\", col.toString() );\n    }\n\n    set cellRenderer( renderer: IRGridCellRenderer )\n    {\n        this._cellRenderer = renderer;\n        this.render();\n    }\n\n    /*\n     * Public Methods\n     */\n\n    select()\n    {\n        if ( !this.isSelected )\n        {\n            this._element.classList.add( clsGrid.cell['is-selected'] );\n            this.onSelect( this );\n        }\n    }\n\n    release()\n    {\n        this._element.classList.remove( clsGrid.cell['is-selected'] );\n        this.deactivate();\n    }\n\n    activate()\n    {\n        // \uBCD1\uD569\uB41C \uACBD\uC6B0 \uBCD1\uD569 \uC140\uC5D0 \uD074\uB798\uC2A4 \uC9C0\uC815\n        if ( this._mergeMain )\n            this._mergeMain._element.classList.add( clsGrid.th['is-active'] );\n        else\n            this._element.classList.add( clsGrid.th['is-active'] );\n    }\n\n    deactivate()\n    {\n        this.syncClassRemoveWithMergeMain( ...deactivationClsList );\n    }\n\n    setBorderLeft( )\n    {\n        this.syncClassAddWithMergeMain( clsGrid.thBorderLeft.blockElementName );\n    }\n\n    setBorderTop()\n    {\n        this.syncClassAddWithMergeMain( clsGrid.thBorderTop.blockElementName );\n    }\n\n    setBorderBottom( )\n    {\n        this.syncClassAddWithMergeMain( clsGrid.thBorderBottom.blockElementName );\n    }\n\n    setBorderRight()\n    {\n        this.syncClassAddWithMergeMain( clsGrid.thBorderRight.blockElementName );\n    }\n\n    updateReadonlyStatus()\n    {\n        utils.toggleClass( this._element, clsGrid.cell['is-readonly'], this.onCheckReadonly() );\n    }\n\n    updateCellStatus()\n    {\n        utils.toggleClass( this._element, clsGrid.cell['is-disabled'], this._metaInfo.disabled === true );\n        utils.toggleClass( this._element, \"is-asc\", this._metaInfo.sortOrder === \"ASC\" );\n        utils.toggleClass( this._element, \"is-desc\", this._metaInfo.sortOrder === \"DESC\" );\n        this.updateReadonlyStatus();\n\n        if ( this._metaInfo.tooltip !== undefined )\n            this._element.setAttribute( \"title\", this._metaInfo.tooltip );\n        else\n            this._element.setAttribute( \"title\", this._metaInfo.text || \"\" );\n\n        // mark\n        if ( this._metaInfo.isError )\n            this.addMark( clsGrid.cellError.blockElementName );\n        else if ( this._metaInfo.hasMemo )\n            this.addMark( clsGrid.cellMemo.blockElementName );\n        else if ( this._mark )\n            this.removeMark();\n\n        // alignment\n        this._element.style.textAlign = this._metaInfo.horizontalAlign || \"\";\n        this._element.style.verticalAlign = this._metaInfo.verticalAlign || \"\";\n\n        // font\n        this._element.style.fontSize = this._metaInfo.fontSize || \"12px\";\n        this._element.style.fontFamily = this._metaInfo.fontFamily || `\"Noto Sans KR\", sans-serif`;\n\n        // color\n        this._element.style.color = this._metaInfo.textColor || \"\";\n        this._element.style.backgroundColor = this._metaInfo.backColor || \"\";\n    }\n\n    render()\n    {\n        if ( this.visible )\n        {\n            this.removeChildren();\n            this.updateCellStatus();\n            this._element.appendChild( this._cellRenderer( this.row, this.col, this._metaInfo ) );\n        }\n    }\n\n    doEditMode( data?: string )\n    {\n        if ( !this._element.isConnected ) return false;\n        if ( this.editable === false ) return false;\n\n        this._isEditing = true;\n        this.removeChildren();\n\n        const textareaWrapper = document.createElement( \"div\" );\n        const textarea = document.createElement( \"textarea\" );\n        const beforeText = this._metaInfo.text ?? \"\";\n\n        textarea.className = clsGrid.textarea.blockElementName;\n        textarea.value = beforeText;\n\n        if ( data )\n            textarea.value += data;\n\n        textareaWrapper.appendChild( textarea );\n        this._element.appendChild( textareaWrapper );\n\n        // edit mode\uC758 \uC774\uBCA4\uD2B8 \uC804\uD30C \uBC29\uC9C0\n        textarea.onmousedown = ( ev ) => ev.stopPropagation();\n        textarea.onclick = ( ev ) => ev.stopPropagation();\n        textarea.onmouseup = ( ev ) => ev.stopPropagation();\n\n        const endEditHandler = ( changed: boolean, endKeyCode: string ) =>\n        {\n            textarea.removeEventListener( \"blur\", onBlurHandler );\n\n            if ( changed )\n                this.cellInfo = { text: textarea.value };\n            else\n                textarea.value = this._metaInfo.text ?? \"\";\n\n            this._isEditing = false;\n            this.render();\n            this._lastEditSelection = { start: textarea.selectionStart, end: textarea.selectionEnd };\n            this.onEditDone( this, changed, beforeText, endKeyCode, textarea.selectionStart, textarea.selectionEnd );\n        };\n\n        const onBlurHandler = () => endEditHandler( beforeText !== textarea.value, \"\" );\n        const cursorHandler = ( ev: KeyboardEvent ) =>\n        {\n            if ( ev.key === \"ArrowLeft\" && textarea.selectionStart === 0 && textarea.selectionEnd === 0 )\n            {\n                this.onMoveLeftOnEdit( ev.ctrlKey, ev.shiftKey );\n                return true;\n            }\n            if ( ev.key === \"ArrowUp\" && textarea.selectionStart === 0 && textarea.selectionEnd === 0 )\n            {\n                this.onMoveUpOnEdit( ev.ctrlKey, ev.shiftKey );\n                return true;\n            }\n            else if ( ev.key === \"ArrowRight\" && textarea.selectionStart === textarea.textLength && textarea.selectionEnd === textarea.textLength )\n            {\n                this.onMoveRightOnEdit( ev.ctrlKey, ev.shiftKey );\n                return true;\n            }\n            else if ( ev.key === \"ArrowDown\" && textarea.selectionStart === textarea.textLength && textarea.selectionEnd === textarea.textLength )\n            {\n                this.onMoveDownOnEdit( ev.ctrlKey, ev.shiftKey );\n                return true;\n            }\n            else if ( ev.key === \"Tab\" )\n            {\n                this.onTabOnEdit( ev.ctrlKey, ev.shiftKey );\n                ev.preventDefault();\n                return true;\n            }\n\n            return false;\n        };\n\n        textarea.addEventListener( \"blur\", onBlurHandler );\n        textarea.onkeydown = ( ev ) =>\n        {\n            ev.stopPropagation();\n\n            if ( cursorHandler( ev ) )\n            {\n                endEditHandler( beforeText !== textarea.value, ev.key );\n                return;\n            }\n\n            if ( ev.key === \"Escape\" )\n                endEditHandler( false, ev.key );\n            else if ( ev.key === \"Enter\" )\n            {\n                // \uC904 \uBC14\uAFC8\n                if ( ev.altKey )\n                {\n                    // readOnly \uC18D\uC131\uC744 \uC8FC\uC5B4\uC57C IME Composing \uBB38\uC81C\uB97C \uB9C9\uC744 \uC218 \uC788\uC74C\n                    textarea.readOnly = true;\n\n                    const start = textarea.value.substring( 0, textarea.selectionStart );\n\n                    textarea.value = [\n                        textarea.value.substring( 0, textarea.selectionStart ),\n                        \"\\n\",\n                        textarea.value.substring( textarea.selectionEnd ),\n                    ].join( \"\" );\n\n                    textarea.readOnly = false;\n                    textarea.selectionEnd = start.length + 1;\n                }\n                else\n                {\n                    endEditHandler( beforeText !== textarea.value, ev.key );\n                    this.onEnterOnEdit( ev.ctrlKey, ev.shiftKey );\n                }\n            }\n            else\n                this.onEditKeyDown( ev, this .row, this.col, this._metaInfo );\n        };\n\n        textarea.focus();\n\n        this.onStartEdit( this );\n\n        return true;\n    }\n\n    clear()\n    {\n        this.cellInfo = { text: \"\" };\n        this.onClear( this );\n    }\n\n    freeze()\n    {\n        this._element.classList.add( clsGrid.cellSticky.blockElementName );\n    }\n\n    unfreeze()\n    {\n        this._element.classList.remove( clsGrid.cellSticky.blockElementName );\n        this._element.style.removeProperty( \"left\" );\n    }\n\n    /*\n     * Events\n     */\n\n    onClick( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onDblClick( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onRightClick( _cell: IRGridCell, _ev: MouseEvent )\n    {\n        // nothing\n    }\n\n    onSelect( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onEditDone( _cell: IRGridCell, _isChanged: boolean, _beforeText: string, _endKeyCode: string, _selStart: number, _selEnd: number )\n    {\n        // nothing\n    }\n\n    onStartEdit( _cell:IRGridCell )\n    {\n        // nothing\n    }\n\n    onClear( _cell: IRGridCell )\n    {\n        // nothing\n    }\n\n    onEditKeyDown( _ev: KeyboardEvent, _row: number, _col: number, _meta: IRGridCellMetaInfo )\n    {\n        // nothing\n    }\n\n    onCheckReadonly()\n    {\n        return this._metaInfo.readonly === true;\n    }\n\n    onMoveLeftOnEdit( _ctrlKey: boolean, _shiftKey: boolean )\n    {\n        // nothing\n    }\n\n    onMoveRightOnEdit( _ctrlKey: boolean, _shiftKey: boolean )\n    {\n        // nothing\n    }\n\n    onMoveUpOnEdit( _ctrlKey: boolean, _shiftKey: boolean )\n    {\n        // nothing\n    }\n\n    onMoveDownOnEdit( _ctrlKey: boolean, _shiftKey: boolean )\n    {\n        // nothing\n    }\n\n    onTabOnEdit( _ctrlKey: boolean, _shiftKey: boolean )\n    {\n        // nothing\n    }\n\n    onEnterOnEdit( _ctrlKey: boolean, _shiftKey: boolean )\n    {\n        // nothing\n    }\n\n    /*\n     * Private Methods\n     */\n\n    private removeChildren()\n    {\n        while ( this._element.firstChild )\n            this._element.firstChild.remove();\n    }\n\n    private syncClassAddWithMergeMain( ...classList: string[] )\n    {\n        if ( this.mergeMain )\n            this.mergeMain._element.classList.add( ...classList );\n        else\n            this._element.classList.add( ...classList );\n    }\n\n    private syncClassRemoveWithMergeMain( ...classList: string[] )\n    {\n        if ( this.mergeMain )\n            this.mergeMain._element.classList.remove( ...classList );\n        else\n            this._element.classList.remove( ...classList );\n    }\n\n    private addMark( cls: string )\n    {\n        if ( !this._mark ) this._mark = document.createElement( \"div\" );\n\n        this._mark.className = cls;\n        this._element.appendChild( this._mark );\n    }\n\n    private removeMark()\n    {\n        if ( this._mark )\n        {\n            this._mark.remove();\n            this._mark = undefined;\n        }\n    }\n}", "import { BEMClass } from \"@utils\";\n\nconst block = \"grid\";\n\nexport default {\n    grid: BEMClass( { block, modifier: [ \"col-resizing\", \"row-resizing\" ], state: [\"is-resizing\"] } ),\n    wrapper: BEMClass( { block, element: \"wrapper\" } ),\n    headerCell: BEMClass( { block, element: \"header-cell\", modifier: [], state: [] } ),\n    cellProgress: BEMClass( { block, element: \"cell-progress\" } ),\n    cellContent: BEMClass( { block, element: \"content-cell\", state: [\"is-disabled\", \"is-selected\", \"is-diff\", \"is-same\"] } ),\n    cellSticky: BEMClass( { block, element: \"sticky-cell\" } ),\n    cell: BEMClass( { block, element: \"cell\", modifier: [\"select\", \"date-picker\", \"button\"], state: [\"is-selected\", \"is-disabled\", \"is-readonly\", \"is-active\", \"is-dragging\"] } ),\n    cellMemo: BEMClass( { block, element: \"cell-memo\" } ),\n    cellError: BEMClass( { block, element: \"cell-error\" } ),\n    active: BEMClass( { block, element: \"active\" } ),\n    th: BEMClass( { block, element: \"th\", state: [\"is-active\"], modifier: [\"col-resizing\", \"row-resizing\"] } ),\n    rowSticky: BEMClass( { block, element: \"sticky-row\" } ),\n    rowHeaderSticky: BEMClass( { block, element: \"sticky-row-header\" } ),\n    thBorderBottom: BEMClass( { block, element: \"tbody-bottom-th\" } ),\n    thBorderRight: BEMClass( { block, element: \"tbody-right-th\" } ),\n    thBorderTop: BEMClass( { block, element: \"tbody-top-th\" } ),\n    thBorderLeft: BEMClass( { block, element: \"tbody-left-th\" } ),\n    textarea: BEMClass( { block, element: \"textarea\" } ),\n    focus: BEMClass( { block, element: \"focus\" } ),\n    colResizerGuide: BEMClass( { block, element: \"col-resizer-guide\" } ),\n    rowResizerGuide: BEMClass( { block, element: \"row-resizer-guide\" } ),\n};", "import _ from 'lodash';\n\nimport { IRGridCell } from './cell';\nimport clsGrid from './grid.classNames';\n\nimport { getMinMaxBetween } from '@utils';\n\nexport interface IRGridRowArgs {\n    row: number;\n    height: number;\n    rowType: IRGridRowType;\n    top: number;\n}\n\nexport declare type IRGridRowType = \"col-header\" | \"body\"\n\nexport const GRID_HEIGHT_PROPERTY = \"--grid-cell-height\";\n\nexport class IRGridRow\n{\n    private cells: IRGridCell[];\n    private row: number;\n    private rowElement: HTMLTableRowElement;\n    private _rowType: IRGridRowType;\n    private _isMounted: boolean;\n    private _top = -1;\n    private _maxCellHeight = 0;\n\n    constructor( { row, height, rowType, top }: IRGridRowArgs )\n    {\n        this.rowElement = document.createElement( \"tr\" );\n        this.cells = [];\n        this.row = row;\n        this.height = height;\n        this._maxCellHeight = height;\n        this._rowType = rowType;\n\n        this._isMounted = false;\n        this.top = top;\n    }\n\n    /**\n     * Getters\n     */\n    get rowInnerHeight()\n    {\n        return this.cells\n            .filter( ( cell ) => cell.visible && cell.mergeInfo.rowSpan === 1 )\n            .reduce( ( height, cell ) => Math.max( height, cell.innerHeight ), 0 );\n    }\n\n    get isFreezed()\n    {\n        return this.element.classList.contains( clsGrid.rowSticky.blockElementName );\n    }\n\n    get isMounted()\n    {\n        return this._isMounted;\n    }\n\n    get rowId()\n    {\n        return this.row;\n    }\n\n    get isHeader()\n    {\n        return this.element.classList.contains( clsGrid.rowHeaderSticky.blockElementName );\n    }\n\n    get cellCounts()\n    {\n        return this.cells.length;\n    }\n\n    get element()\n    {\n        return this.rowElement;\n    }\n\n    get textColor()\n    {\n        return this.rowElement.style.color;\n    }\n\n    get height()\n    {\n        return parseInt( this.rowElement.style.getPropertyValue( GRID_HEIGHT_PROPERTY ) || \"0\" );\n    }\n\n    get bottom()\n    {\n        return this._top + this.height;\n    }\n\n    get bottomByCellHeight()\n    {\n        return this._top + this._maxCellHeight;\n    }\n\n    get top()\n    {\n        return this._top;\n    }\n\n    get rowType()\n    {\n        return this._rowType;\n    }\n\n    get visible()\n    {\n        return this.element.style.display !== \"none\";\n    }\n\n    /*\n     * Setters\n     */\n\n    set rowId( row: number )\n    {\n        this.row = row;\n        this.cells.forEach( ( cell ) => cell.row = row );\n        this.render();\n    }\n\n    set customRowZId( zId: number )\n    {\n        if ( zId === 0 )\n            this.element.style.removeProperty( \"z-index\" );\n        else if ( this.rowElement.classList.contains( clsGrid.rowHeaderSticky.blockElementName ) )\n            this.element.style.zIndex = `calc(var(--z-index-level-6) + ${zId}`;\n        else\n            this.element.style.zIndex = `calc(var(--z-index-level-5) + ${zId}`;\n    }\n\n    set textColor( color: string )\n    {\n        this.rowElement.style.color = color;\n    }\n\n    set height( height: number )\n    {\n        this.rowElement.style.setProperty( GRID_HEIGHT_PROPERTY, `${height}px` );\n        this.onChangedHeight( this, height );\n    }\n\n    set top( value: number )\n    {\n        this._top = value;\n        this.element.setAttribute( \"data-top\", value.toString() );\n        if ( this.isFreezed )\n            this.element.style.top = `${value}px`;\n    }\n\n    set visible( visible: boolean )\n    {\n        if ( visible )\n        {\n            this.element.style.removeProperty( \"display\" );\n            this.render();\n        }\n        else\n            this.element.style.display = \"none\";\n    }\n\n    /*\n     * Public Methods\n     */\n\n    unmount()\n    {\n        this._isMounted = false;\n        this.rowElement.remove();\n    }\n\n    updateMaxCellHeight()\n    {\n        const rowHeight = this.height;\n\n        this._maxCellHeight = this.cells.reduce( ( h, cell ) =>\n        {\n            return Math.max( h, cell.height ?? rowHeight );\n        }, rowHeight );\n    }\n\n    removeCells( left: number, right: number )\n    {\n        _.range( left, right + 1 )\n            .forEach( ( col ) => this.cells[col].element.remove() );\n\n        const removedCols = 1 + right - left;\n\n        this.cells.splice( left, removedCols );\n\n        _.range( left, this.cells.length )\n            .forEach( ( col ) =>\n            {\n                this.cells[col].col -= removedCols;\n                this.cells[col].render();\n            } );\n    }\n\n    addCell( cell: IRGridCell )\n    {\n        this.cells.push( cell );\n        this.rowElement.appendChild( cell.element );\n\n        if ( this.isMounted ) cell.render();\n    }\n\n    insertCells( cells: IRGridCell[], col: number )\n    {\n        if ( this.cells.length < col )\n            throw new Error( `Out of length at the row. the length is ${this.cells.length} and you tried inserting with ${col}` );\n\n        const target = this.cells[col].element;\n\n        // \uB4B7 \uC140 col \uBCC0\uACBDre-render\n        _.range( col, this.cells.length )\n            .forEach( ( id ) =>\n            {\n                this.cells[id].col += cells.length;\n                this.cells[id].render();\n            } );\n\n        // cell \uC624\uBE0C\uC81D\uD2B8\uC5D0 \uCD94\uAC00\n        this.cells.splice( col, 0, ...cells );\n\n        // \uC140 \uC55E\uC5D0 \uC0DD\uC131\n        _( cells )\n            .forEach( ( cell ) =>\n            {\n                target.insertAdjacentElement( \"beforebegin\", cell.element );\n                if ( this.isMounted ) cell.render();\n            } );\n    }\n\n    render()\n    {\n        if ( this.visible )\n            this.cells.forEach( ( cell ) => cell.render() );\n    }\n\n    getCell( col: number )\n    {\n        return this.cells[col];\n    }\n\n    *getCellGenerator( left = 0, right = this.cells.length - 1 )\n    {\n        for ( let c = left; c <= right; ++c )\n        {\n            yield this.cells[c];\n        }\n    }\n\n    setColumnVisible( col: number, visible: boolean )\n    {\n        this.cells[col].visible = visible;\n    }\n\n    getColumnVisible( col: number )\n    {\n        return this.cells[col].visible;\n    }\n\n    setAutoHeight( minSize: number, maxSize: number )\n    {\n        const height = Math.ceil( this.rowInnerHeight );\n        const autoHeight = getMinMaxBetween( ( isNaN( height ) ? 0 : height ), minSize, maxSize );\n\n        if ( this.height !== autoHeight )\n        {\n            this.height = autoHeight;\n            return true;\n        }\n\n        return false;\n    }\n\n    getCellLeft( col: number )\n    {\n        return parseInt( this.cells[col].element.style.left || \"0\" );\n    }\n\n    setCellLeft( col: number, left: number )\n    {\n        this.cells[col].element.style.left = `${left}px`;\n    }\n\n    setStickyHeader( fixedColCount: number )\n    {\n        _( this.cells )\n            .take( fixedColCount )\n            .forEach( ( cell ) => cell.freeze() );\n\n        // \uC774\uC678\uB294 fixed \uD574\uC81C\n        _( this.cells )\n            .drop( fixedColCount )\n            .takeWhile( ( cell ) => cell.isFreezed )\n            .forEach( ( cell ) => cell.unfreeze() );\n    }\n\n    mount( tbody: HTMLTableSectionElement, target?: HTMLElement )\n    {\n        if ( this.isMounted ) return;\n\n        if ( !target )\n            tbody.appendChild( this.element );\n        else\n            target.insertAdjacentElement( \"beforebegin\", this.element );\n\n        this.render();\n        this._isMounted = true;\n        this.onMounted( this );\n    }\n\n    freeze()\n    {\n        this.element.classList.add( clsGrid.rowSticky.blockElementName );\n        this.element.style.top = `${this.top}px`;\n    }\n\n    freezeHeader()\n    {\n        this.element.classList.add( clsGrid.rowHeaderSticky.blockElementName, clsGrid.rowSticky.blockElementName );\n        this.element.style.top = `${this.top}px`;\n    }\n\n    unfreeze()\n    {\n        this.element.classList.remove( clsGrid.rowSticky.blockElementName );\n        this.element.style.removeProperty( \"top\" );\n    }\n\n    /*\n     * Events\n     */\n    onMounted( _row: IRGridRow )\n    {\n        // nothing\n    }\n\n    onChangedHeight( _row: IRGridRow, _height: number )\n    {\n        // nothing\n    }\n\n}", "import _ from 'lodash';\n\nexport interface IRGridRange {\n    top: number;\n    left: number;\n    bottom: number;\n    right: number;\n}\n\nexport function checkContainsInRange( row: number, col: number, range: IRGridRange )\n{\n    return checkRowContainsInRange( row, range ) && checkColContainsInRange( col, range );\n}\n\nexport function getCellElementRowCol( cell: HTMLTableCellElement )\n{\n    const row = parseInt( cell.getAttribute( \"data-row\" ) || \"-1\" );\n    const col = parseInt( cell.getAttribute( \"data-col\" ) || \"-1\" );\n\n    if ( row === -1 || col === -1 )\n        throw new Error( 'Invalid cell' );\n\n    return { row, col };\n}\n\nexport function checkRowContainsInRange( row: number, range: IRGridRange )\n{\n    return row >= range.top && row <= range.bottom;\n}\n\nexport function checkColContainsInRange( col: number, range: IRGridRange )\n{\n    return col >= range.left && col <= range.right;\n}\n\nexport function toggleClass( element: HTMLElement, cls: string, addFlag: boolean )\n{\n    if ( addFlag )\n        element.classList.add( cls );\n    else\n        element.classList.remove( cls );\n}\n\nexport function getCellInnerHeight( element: HTMLElement )\n{\n    // \uCCAB\uBC88\uC9F8 depth\uC758 \uC790\uC2DD \uC694\uC18C\uB4E4\uC758 height \uC911 \uAC00\uC7A5 \uD070 \uAC12 \uC774\uC6A9\n    let child = element.firstChild;\n    let maxHeight = 0;\n\n    while ( child )\n    {\n        let grandChild = child.firstChild;\n\n        while ( grandChild )\n        {\n            maxHeight = Math.max( ( grandChild as HTMLElement ).offsetHeight, maxHeight );\n            grandChild = grandChild.nextSibling;\n        }\n\n        child = child.nextSibling;\n    }\n\n    return maxHeight;\n}", "import _ from 'lodash';\n\nimport { IRGridCellMetaInfo } from \"./cell\";\nimport clsGrid from \"./grid.classNames\";\nimport { IRGridButtonClickHandler } from './sub-ui';\n\nconst createCellContent = ( data: IRGridCellMetaInfo ) =>\n{\n    const div = document.createElement( \"div\" );\n    const text = document.createElement( \"span\" );\n\n    text.innerText = data.text ?? \"\";\n    div.className = clsGrid.cellContent.blockElementName;\n\n    // \uC815\uB82C \uC5EC\uBD80\n    if ( data.sortOrder !== undefined )\n    {\n        const icon = data.sortOrder === \"ASC\" ? \"sort-ascending\" : \"sort-descending\";\n        const iconElement = document.createElement( \"i\" );\n\n        iconElement.className = `ir-icon ir-icon--${icon}`;\n\n        div.appendChild( iconElement );\n    }\n\n    if ( data.icon )\n    {\n        const icon = document.createElement( \"i\" );\n\n        icon.classList.add( \"ir-icon\", `ir-icon--${data.icon}` );\n\n        if ( data.iconColor )\n            icon.style.setProperty( \"--ir-icon-foreground-color\", data.iconColor );\n\n        div.appendChild( icon );\n    }\n\n    div.appendChild( text );\n\n    return div;\n};\n\nconst createCellContentWithIconButton = ( row: number, col: number, data: IRGridCellMetaInfo, onClick?: IRGridButtonClickHandler ) =>\n{\n    const div = document.createElement( \"div\" );\n    const text = document.createElement( \"span\" );\n\n    text.innerText = data.text ?? \"\";\n    div.className = clsGrid.cellContent.blockElementName;\n\n    if ( data.icon )\n    {\n        const button = document.createElement( \"button\" );\n        const icon = document.createElement( \"i\" );\n\n        button.setAttribute( \"type\", \"button\" );\n        button.classList.add( \"icon-button\" );\n        button.ondblclick = ( ev ) => ev.stopPropagation();\n        button.onclick = ( ev ) =>\n        {\n            onClick && onClick( ev, row, col );\n            ev.stopPropagation();\n        };\n\n        icon.classList.add( \"ir-icon\", `ir-icon--${data.icon}` );\n\n        if ( data.iconColor )\n            icon.style.setProperty( \"--ir-icon-foreground-color\", data.iconColor );\n\n        button.appendChild( icon );\n        div.appendChild( button );\n    }\n\n    div.appendChild( text );\n\n    return div;\n};\n\nexport const renderGridCellDefault = ( ) =>\n{\n\n    return ( _row: number, _col: number, data: IRGridCellMetaInfo ) =>\n    {\n        data.cellType = \"default\";\n\n        return createCellContent( data );\n    };\n};\n\nexport interface RendererGridIconButtonArgs {\n    onClick?: IRGridButtonClickHandler;\n}\n\nexport function renderGridCellIconButton( { onClick }: RendererGridIconButtonArgs )\n{\n\n    return ( row: number, col: number, data: IRGridCellMetaInfo ) =>\n    {\n        data.cellType = \"default\";\n\n        return createCellContentWithIconButton( row, col, data, onClick );\n    };\n}\n\nexport function renderRowNoHeaderCell( fixedRowCount: number, ...prevCaptionList: string[] )\n{\n    return ( row: number, _col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const div = document.createElement( \"div\" );\n        const text = document.createElement( \"div\" );\n        const r = row - fixedRowCount;\n\n        data.cellType = \"rowNo\";\n        div.className = clsGrid.cellContent.blockElementName;\n\n        const cellText = r < prevCaptionList.length ? prevCaptionList[r] : `${1 + r - prevCaptionList.length}`;\n\n        text.innerText = cellText;\n        data.text = cellText;\n\n        div.appendChild( text );\n\n        return div;\n    };\n}", "import _ from 'lodash';\n\nimport { IRGrid } from './grid';\n\nexport declare type GridClipboardManager = ReturnType<typeof createGridClipboardManager>\n\nfunction getNextToken( ch: string )\n{\n    switch ( ch )\n    {\n        case '\"':\n            return \"quotes\";\n        case '\\t':\n            return \"tab\";\n        case '\\n':\n            return \"line\";\n        default:\n            return \"text\";\n    }\n}\n\nexport function createGridClipboardManager( grid: IRGrid )\n{\n    return {\n        getSelectedText: () =>\n        {\n            const selection = grid.getSelection();\n            const lineBuffer: string[] = [];\n\n            if ( selection )\n            {\n                _.range( selection.top, selection.bottom + 1 )\n                    .forEach( ( row ) =>\n                    {\n                        const buffer = _.range( selection.left, selection.right + 1 )\n                            .reduce( ( buffer, col ) =>\n                            {\n                                const cell = grid.cell( row, col );\n                                const text = cell.text.toString()\n                                    .replace( /\"/g, '\"\"' );\n\n                                // double quote\uB294 escape \uCC98\uB9AC\n                                buffer.push( `\"${text}\"` );\n\n                                return buffer;\n                            }, [] as string[] );\n\n                        lineBuffer.push( buffer.join( \"\\t\" ) );\n                    } );\n            }\n\n            return lineBuffer.join( \"\\n\" );\n        },\n\n        convertText: ( payload: string ) =>\n        {\n            const data: Array<string[]> = [];\n            const trimmedPayload = payload.replace( /\\r\\n/g, \"\\n\" );\n            let line: string[] = [];\n            let id = 0;\n\n            function processNextLine()\n            {\n                data.push( line );\n                line = [];\n                ++id;\n            }\n\n            function addText( start: number, end: number )\n            {\n                line.push( trimmedPayload.substring( start, end + 1 ).replace( /\"\"/g, '\"' ) );\n            }\n\n            function processQuotesText( )\n            {\n                // skip the first double quotes\n                const startId = ++id;\n\n                while ( id < trimmedPayload.length )\n                {\n                    const ch = trimmedPayload[id];\n\n                    if ( ch === '\"' )\n                    {\n                        if ( ( ( id + 1 ) < trimmedPayload.length && trimmedPayload[id + 1] === '\"' ) )\n                            // escape \uCC98\uB9AC \uC2DC id \uCD94\uAC00\n                            ++id;\n                        else\n                            // \uC544\uB2D0 \uC2DC \uC885\uB8CC\n                            break;\n                    }\n\n                    ++id;\n                }\n\n                addText( startId, id - 1 );\n                ++id;\n            }\n\n            function processPlainText( )\n            {\n                const startId = id;\n\n                loop:\n                while ( id < trimmedPayload.length )\n                {\n                    const ch = trimmedPayload[id];\n\n                    switch ( ch )\n                    {\n                        case '\\t':\n                        case '\\n':\n                            break loop;\n                        default:\n                    }\n\n                    ++id;\n                }\n\n                addText( startId, id - 1 );\n            }\n\n            function processTab( )\n            {\n                ++id;\n\n                if ( id < trimmedPayload.length )\n                {\n                    const ch = trimmedPayload[id];\n\n                    if ( ch === '\"' )\n                        processQuotesText();\n                    else\n                        processPlainText();\n                }\n            }\n\n            while ( id < trimmedPayload.length )\n            {\n                const ch = trimmedPayload[id];\n                const token = getNextToken( ch );\n\n                switch ( token )\n                {\n                    case \"quotes\":\n                        processQuotesText( );\n                        break;\n                    case \"text\":\n                        processPlainText( );\n                        break;\n                    case \"tab\":\n                        processTab( );\n                        break;\n                    case \"line\":\n                        processNextLine();\n                        break;\n                    default:\n                }\n            }\n\n            if ( line.length > 0 ) data.push( line );\n\n            return data;\n        },\n    };\n}", "import _ from 'lodash';\n\nimport type { IRGrid } from \"./grid\";\n\nexport function createGridCellCursorManager( grid: IRGrid )\n{\n\n    const getNextYAbove = ( row: number, col: number, y: number ) =>\n    {\n        const startRow = grid.headerRows;\n        let counter = y;\n        let nextRow = row;\n\n        while ( counter !== 0 )\n        {\n            const currentCell = grid.cell( nextRow, col );\n            const mainCell = currentCell.mergeMain ?? currentCell;\n            const tmpRow = mainCell.row - 1;\n\n            if ( tmpRow < startRow ) break;\n\n            if ( grid.getRowVisible( tmpRow ) )\n                ++counter;\n\n            nextRow = tmpRow;\n        }\n\n        return nextRow;\n    };\n\n    const getNextYBelow = ( row: number, col: number, y: number ) =>\n    {\n        const endRow = grid.getRowCount() - 1;\n        let counter = y;\n        let nextRow = row;\n\n        while ( counter !== 0 )\n        {\n            const currentCell = grid.cell( nextRow, col );\n            const mainCell = currentCell.mergeMain ?? currentCell;\n            const tmpRow = mainCell.bottom + 1;\n\n            if ( tmpRow > endRow ) break;\n\n            if ( grid.getRowVisible( tmpRow ) )\n                --counter;\n\n            nextRow = tmpRow;\n        }\n\n        return nextRow;\n    };\n\n    const getNextXLeft = ( row: number, col: number, x: number ) =>\n    {\n        const startCol = grid.headerColumns;\n        let counter = x;\n        let nextCol = col;\n\n        while ( counter !== 0 )\n        {\n            const currentCell = grid.cell( row, nextCol );\n            const mainCell = currentCell.mergeMain ?? currentCell;\n            const tmpCol = mainCell.col - 1;\n\n            if ( tmpCol < startCol ) break;\n\n            if ( grid.getColumnVisible( tmpCol ) )\n                ++counter;\n\n            nextCol = tmpCol;\n        }\n\n        return nextCol;\n    };\n\n    const getNextXRight = ( row: number, col: number, x: number ) =>\n    {\n        const endCol = grid.getColCount() - 1;\n        let counter = x;\n        let nextCol = col;\n\n        while ( counter !== 0 )\n        {\n            const currentCell = grid.cell( row, nextCol );\n            const mainCell = currentCell.mergeMain ?? currentCell;\n            const tmpCol = mainCell.right + 1;\n\n            if ( tmpCol > endCol ) break;\n\n            if ( grid.getColumnVisible( tmpCol ) )\n                --counter;\n\n            nextCol = tmpCol;\n        }\n\n        return nextCol;\n    };\n\n    const getFirstActiveColumn = () =>\n    {\n        let col = grid.headerColumns;\n\n        while ( !grid.getColumnVisible( col ) )\n            ++col;\n\n        return col;\n    };\n\n    const getLastActiveColumn = () =>\n    {\n        let col = grid.getColCount() - 1;\n\n        while ( !grid.getColumnVisible( col ) )\n            --col;\n\n        return col;\n    };\n\n    const getFirstActiveRow = () =>\n    {\n        let row = grid.headerRows;\n\n        while ( !grid.getRowVisible( row ) )\n            ++row;\n\n        return row;\n    };\n\n    const getLastActiveRow = () =>\n    {\n        let row = grid.getRowCount() - 1;\n\n        while ( !grid.getRowVisible( row ) )\n            --row;\n\n        return row;\n    };\n\n    const getNextActiveRow = ( row: number ) =>\n    {\n        const endRow = grid.getRowCount() - 1;\n\n        if ( endRow === row ) return row;\n\n        let nextRow = row + 1;\n\n        while ( !grid.getRowVisible( nextRow ) )\n            ++nextRow;\n\n        return nextRow;\n    };\n\n    const getBeforeActiveRow = ( row: number ) =>\n    {\n        const startRow = grid.headerRows;\n\n        if ( row === startRow ) return row;\n\n        let beforeRow = row - 1;\n\n        while ( !grid.getRowVisible( beforeRow ) )\n            ++beforeRow;\n\n        return beforeRow;\n    };\n\n    /**\n     * \uC6B0\uCE21\uC73C\uB85C 1\uCE78 \uC774\uB3D9\uD558\uC5EC \uC120\uD0DD\n     * \uB9E8 \uB05D\uC778 \uACBD\uC6B0, \uB2E4\uC74C row\uB85C \uC774\uB3D9\n     */\n    const selectNextActiveCell = ( ) =>\n    {\n        const { activeCell } = grid;\n\n        if ( !activeCell )\n        {\n            console.warn( \"No active cell warning.\" );\n            return;\n        }\n\n        const endRow = getLastActiveRow();\n        const endCol = getLastActiveColumn();\n        const mainCell = activeCell.mergeMain ?? activeCell;\n\n        if ( mainCell.right === endCol )\n        {\n            if ( activeCell.row === endRow ) return;\n\n            const firstCol = getFirstActiveColumn();\n            const nextRow = getNextActiveRow( activeCell.row );\n\n            grid.selectCell( nextRow, firstCol );\n            grid.scrollInView( nextRow, firstCol );\n        }\n        else\n        {\n            const nextCol = getNextXRight( activeCell.row, mainCell.right, 1 );\n\n            grid.selectCell( activeCell.row, nextCol );\n            grid.scrollOnCol( nextCol );\n        }\n    };\n\n    /**\n     * \uC6B0\uCE21\uC73C\uB85C 1\uCE78 \uC774\uB3D9\uD558\uC5EC \uC120\uD0DD\n     * \uB9E8 \uB05D\uC778 \uACBD\uC6B0, \uB2E4\uC74C row\uB85C \uC774\uB3D9\n     */\n    const selectBeforeActiveCell = ( ) =>\n    {\n        const { activeCell } = grid;\n\n        if ( !activeCell )\n        {\n            console.warn( \"No active cell warning.\" );\n            return;\n        }\n\n        const startRow = getFirstActiveRow();\n        const startCol = getFirstActiveColumn();\n        const mainCell = activeCell.mergeMain ?? activeCell;\n\n        if ( mainCell.col === startCol )\n        {\n            if ( activeCell.row === startRow ) return;\n\n            const lastCol = getLastActiveColumn();\n            const beforeRow = getBeforeActiveRow( activeCell.row );\n\n            grid.selectCell( beforeRow, lastCol );\n            grid.scrollInView( beforeRow, lastCol );\n        }\n        else\n        {\n            const nextCol = getNextXLeft( activeCell.row, mainCell.col, -1 );\n\n            grid.selectCell( activeCell.row, nextCol );\n            grid.scrollOnCol( nextCol );\n        }\n\n    };\n\n    const getColIdWithMaximumRowSpanInRow = ( row: number, left: number, right: number ) =>\n    {\n        let maxRowSpan = -1;\n        let colId = -1;\n\n        for ( let col = left; col <= right; col++ )\n        {\n            const cell = grid.cell( row, col );\n            const mainCell = cell.mergeMain ?? cell;\n            const { rowSpan } = mainCell.mergeInfo;\n\n            if ( rowSpan > maxRowSpan )\n            {\n                maxRowSpan = rowSpan;\n                colId = col;\n            }\n        }\n\n        return colId;\n    };\n\n    const getMaximumBottomByRow = ( row: number, left: number, right: number ) =>\n    {\n        let maxBottom = -1;\n\n        for ( let col = left; col <= right; col++ )\n        {\n            const cell = grid.cell( row, col );\n            const mainCell = cell.mergeMain ?? cell;\n            const { bottom } = mainCell;\n\n            if ( bottom > maxBottom )\n                maxBottom = bottom;\n        }\n\n        return maxBottom;\n    };\n\n    const getMinimumTopByRow = ( row: number, left: number, right: number ) =>\n    {\n        let minTop = 999999999;\n\n        for ( let col = left; col <= right; col++ )\n        {\n            const cell = grid.cell( row, col );\n            const mainCell = cell.mergeMain ?? cell;\n\n            if ( minTop > mainCell.row )\n                minTop = mainCell.row;\n        }\n\n        return minTop;\n    };\n\n    const getRowIdWithMaximumColSpanInCol = ( col: number, top: number, bottom: number ) =>\n    {\n        let maxColSpan = -1;\n        let rowId = -1;\n\n        for ( let row = top; row <= bottom; row++ )\n        {\n            const cell = grid.cell( row, col );\n            const mainCell = cell.mergeMain ?? cell;\n            const { colSpan } = mainCell.mergeInfo;\n\n            if ( colSpan > maxColSpan )\n            {\n                maxColSpan = colSpan;\n                rowId = row;\n            }\n        }\n\n        return rowId;\n    };\n\n    const getMaximumRightByColumn = ( col: number, top: number, bottom: number ) =>\n    {\n        let maxRight = -1;\n\n        for ( let row = top; row <= bottom; row++ )\n        {\n            const cell = grid.cell( row, col );\n            const mainCell = cell.mergeMain ?? cell;\n            const { right } = mainCell;\n\n            if ( right > maxRight )\n                maxRight = right;\n        }\n\n        return maxRight;\n    };\n\n    const getMinimumLeftByColumn = ( col: number, top: number, bottom: number ) =>\n    {\n        let minLeft = 999999999;\n\n        for ( let row = top; row <= bottom; row++ )\n        {\n            const cell = grid.cell( row, col );\n            const mainCell = cell.mergeMain ?? cell;\n\n            if ( minLeft > mainCell.col )\n                minLeft = mainCell.col;\n        }\n\n        return minLeft;\n    };\n\n    const selectNextSelection = ( y: number, x: number, isExpanding: boolean ) =>\n    {\n        const selection = grid.getSelection();\n        const { activeCell } = grid;\n\n        if ( selection == null || activeCell == null )\n        {\n            console.warn( \"No selection warning\" );\n            return;\n        }\n\n        const mainCell = activeCell.mergeMain ?? activeCell;\n\n        // \uB2E8\uC77C\uC140 \uC774\uB3D9\n        if ( !isExpanding )\n        {\n            if ( y !== 0 )\n            {\n                // \uC218\uC9C1 \uC774\uB3D9\n                const nextRow = y < 0 ?\n                    getNextYAbove( mainCell.row, activeCell.col, y ) :\n                    getNextYBelow( mainCell.bottom, activeCell.col, y );\n\n                grid.selectCell( nextRow, activeCell.col );\n                grid.scrollOnRow( nextRow );\n            }\n            else\n            {\n                // \uC218\uD3C9 \uC774\uB3D9\n                const nextCol = x < 0 ?\n                    getNextXLeft( activeCell.row, mainCell.col, x ) :\n                    getNextXRight( activeCell.row, mainCell.right, x );\n\n                grid.selectCell( activeCell.row, nextCol );\n                grid.scrollOnCol( nextCol );\n            }\n\n            return;\n        }\n\n        // \uBC94\uC704 \uD655\uC7A5 \uC774\uB3D9 (extending)\n        const { top, bottom, left, right } = selection;\n\n        if ( y !== 0 )\n        {\n            // \uC0C1\uD558 \uC774\uB3D9\n            // \uD604\uC7AC \uC601\uC5ED \uCD5C\uC18C bottom\n\n            if ( y < 0 )\n            {\n                // arrowUp\n                const maxBottom = getMaximumBottomByRow( activeCell.row, left, right );\n\n                if ( maxBottom === bottom )\n                {\n                    // \uBC94\uC704 \uD655\uC7A5\n                    const colId = getColIdWithMaximumRowSpanInRow( top, left, right );\n                    const nextTop = getNextYAbove( top, colId, y );\n\n                    grid.selectRange( nextTop, left, bottom, right, activeCell );\n                    grid.scrollOnRow( nextTop );\n                }\n                else\n                {\n                    // \uBC94\uC704 \uCD95\uC18C\n                    const colId = getColIdWithMaximumRowSpanInRow( bottom, left, right );\n                    const nextBottom = getNextYAbove( bottom, colId, y );\n\n                    grid.selectRange( top, left, nextBottom, right, activeCell );\n                    grid.scrollOnRow( nextBottom );\n                }\n            }\n            else\n            {\n                // arrowDown\n                const minTop = getMinimumTopByRow( activeCell.row, left, right );\n\n                if ( minTop === top )\n                {\n                    // \uBC94\uC704 \uD655\uC7A5\n                    const colId = getColIdWithMaximumRowSpanInRow( bottom, left, right );\n                    const nextBottom = getNextYBelow( bottom, colId, y );\n\n                    grid.selectRange( top, left, nextBottom, right, activeCell );\n                    grid.scrollOnRow( nextBottom );\n                }\n                else\n                {\n                    // \uBC94\uC704 \uCD95\uC18C\n                    const colId = getColIdWithMaximumRowSpanInRow( top, left, right );\n                    const nextTop = getNextYBelow( top, colId, y );\n\n                    grid.selectRange( nextTop, left, bottom, right, activeCell );\n                    grid.scrollOnRow( nextTop );\n                }\n            }\n        }\n        // \uC88C\uC6B0 \uC774\uB3D9\n        else if ( x < 0 )\n        {\n            // ArrowLeft\n            const maxRight = getMaximumRightByColumn( activeCell.col, top, bottom );\n\n            if ( maxRight === right )\n            {\n                // \uBC94\uC704 \uD655\uC7A5\n                const rowId = getRowIdWithMaximumColSpanInCol( left, top, bottom );\n                const nextLeft = getNextXLeft( rowId, left, x );\n\n                grid.selectRange( top, nextLeft, bottom, right, activeCell );\n                grid.scrollOnCol( nextLeft );\n            }\n            else\n            {\n                // \uBC94\uC704 \uCD95\uC18C\n                const rowId = getRowIdWithMaximumColSpanInCol( right, top, bottom );\n                const nextRight = getNextXLeft( rowId, right, x );\n\n                grid.selectRange( top, left, bottom, nextRight, activeCell );\n                grid.scrollOnCol( nextRight );\n            }\n        }\n        else\n        {\n            // ArrowRight\n            const minLeft = getMinimumLeftByColumn( activeCell.col, top, bottom );\n\n            if ( minLeft === left )\n            {\n                // \uBC94\uC704 \uD655\uC7A5\n                const rowId = getRowIdWithMaximumColSpanInCol( right, top, bottom );\n                const nextRight = getNextXRight( rowId, right, x );\n\n                grid.selectRange( top, left, bottom, nextRight, activeCell );\n                grid.scrollOnCol( nextRight );\n            }\n            else\n            {\n                // \uBC94\uC704 \uCD95\uC18C\n                const rowId = getRowIdWithMaximumColSpanInCol( left, top, bottom );\n                const nextLeft = getNextXRight( rowId, left, x );\n\n                grid.selectRange( top, nextLeft, bottom, right, activeCell );\n                grid.scrollOnCol( nextLeft );\n            }\n        }\n\n    };\n\n    const selectMoveToLastColumn = ( isExtending: boolean ) =>\n    {\n        const selection = grid.getSelection();\n        const { activeCell } = grid;\n\n        if ( selection == null || activeCell == null )\n        {\n            console.warn( \"No selection warning\" );\n            return;\n        }\n\n        const lastCol = getLastActiveColumn();\n\n        if ( !isExtending )\n            // \uB2E8\uC77C \uC774\uB3D9\n            grid.selectCell( activeCell.row, lastCol );\n        else\n            // \uBAA8\uB450 \uC120\uD0DD\n            grid.selectRange( selection.top, activeCell.col, selection.bottom, lastCol, activeCell );\n\n        grid.scrollOnCol( lastCol );\n    };\n\n    const selectMoveToFirstColumn = ( isExtending: boolean ) =>\n    {\n        const selection = grid.getSelection();\n        const { activeCell } = grid;\n\n        if ( selection == null || activeCell == null )\n        {\n            console.warn( \"No selection warning\" );\n            return;\n        }\n\n        const firstCol = getFirstActiveColumn();\n\n        if ( !isExtending )\n            // \uB2E8\uC77C \uC774\uB3D9\n            grid.selectCell( activeCell.row, firstCol );\n        else\n            // \uBAA8\uB450 \uC120\uD0DD\n            grid.selectRange( selection.top, firstCol, selection.bottom, activeCell.col, activeCell );\n\n        grid.scrollOnCol( firstCol );\n    };\n\n    const selectMoveToLastRow = ( isExtending: boolean ) =>\n    {\n        const selection = grid.getSelection();\n        const { activeCell } = grid;\n\n        if ( selection == null || activeCell == null )\n        {\n            console.warn( \"No selection warning\" );\n            return;\n        }\n\n        const lastRow = getLastActiveRow();\n\n        if ( !isExtending )\n            // \uB2E8\uC77C \uC774\uB3D9\n            grid.selectCell( lastRow, activeCell.col );\n        else\n            // \uBAA8\uB450 \uC120\uD0DD\n            grid.selectRange( activeCell.row, selection.left, lastRow, selection.right, activeCell );\n\n        grid.scrollOnRow( lastRow );\n    };\n\n    const selectMoveToFirstRow = ( isExtending: boolean ) =>\n    {\n        const selection = grid.getSelection();\n        const { activeCell } = grid;\n\n        if ( selection == null || activeCell == null )\n        {\n            console.warn( \"No selection warning\" );\n            return;\n        }\n\n        const firstRow = getFirstActiveRow();\n\n        if ( !isExtending )\n            // \uB2E8\uC77C \uC774\uB3D9\n            grid.selectCell( firstRow, activeCell.col );\n        else\n            // \uBAA8\uB450 \uC120\uD0DD\n            grid.selectRange( firstRow, selection.left, activeCell.bottom, selection.right, activeCell );\n\n        grid.scrollOnRow( firstRow );\n    };\n\n    return {\n        getNextYAbove,\n        getNextYBelow,\n        getNextXLeft,\n        getNextXRight,\n        selectNextActiveCell,\n        selectBeforeActiveCell,\n        selectNextSelection,\n        selectMoveToLastColumn,\n        selectMoveToFirstColumn,\n        selectMoveToLastRow,\n        selectMoveToFirstRow,\n    };\n}", "import Emittery from 'emittery';\n\nimport { IRGrid } from './grid';\n\nexport declare type IRGridEmitter = Emittery<{\n    updateCellStatus: { row: number; col: number };\n    onCellInfoChanged: { row: number; col: number };\n    onContextResized: undefined;\n    onColumnResized: { col: number };\n}>\n\nexport function initIRGridEmitter( grid: IRGrid, emitter: IRGridEmitter )\n{\n    emitter.on( \"updateCellStatus\", ( cellAddress ) => grid.cell( cellAddress.row, cellAddress.col ).updateCellStatus() );\n}", "import _ from 'lodash';\n\nimport { IRGridCell } from './cell';\nimport { IRGrid } from './grid';\nimport * as utils from './utils';\n\ndeclare type IRGridFinderArea = \"all\" | \"selection\" | \"selected-col\" | \"selected-row\" | \"custom\"\ndeclare type IRGridFinderDirection = \"top-bottom\" | \"left-right\"\n\nexport interface IRGridFinderOptions {\n    ignoreCase: boolean;\n    matchAll: boolean;\n    area: IRGridFinderArea;\n    direction: IRGridFinderDirection;\n    text: string;\n    customRange?: utils.IRGridRange;\n    hasHeaderRows?: boolean;\n    hasHeaderColumns?: boolean;\n}\n\nexport interface IRGridFinderArgs {\n    onCellCheck?: ( regexp: RegExp, cell: IRGridCell ) => boolean;\n}\n\nexport function createIRGridFinder( grid: IRGrid, args: IRGridFinderArgs )\n{\n    const finderOptions: IRGridFinderOptions = {\n        text: \"\",\n        ignoreCase: true,\n        matchAll: false,\n        area: \"all\",\n        direction: \"top-bottom\",\n    };\n    let found = false;\n\n    const getStartRow = () =>finderOptions.hasHeaderRows ? 0 : grid.headerRows;\n    const getStartCol = () =>finderOptions.hasHeaderColumns ? 0 : grid.headerColumns;\n\n    function *CellGenerator()\n    {\n        let row = getStartRow();\n        let col = getStartCol();\n\n        const selection = grid.getSelection();\n\n        found = false;\n\n        while ( true )\n        {\n\n            switch ( finderOptions.area )\n            {\n                case \"all\":\n                    yield grid.cell( row, col );\n                    break;\n                case \"selected-col\":\n                    if ( !selection ) throw new Error( \"No selection in finding\" );\n\n                    if ( utils.checkColContainsInRange( col, selection ) )\n                        yield grid.cell( row, col );\n                    break;\n                case \"selected-row\":\n                    if ( !selection ) throw new Error( \"No selection in finding\" );\n\n                    if ( utils.checkRowContainsInRange( row, selection ) )\n                        yield grid.cell( row, col );\n                    break;\n                case \"selection\":\n                    if ( !selection ) throw new Error( \"No selection in finding\" );\n\n                    if ( utils.checkContainsInRange( row, col, selection ) )\n                        yield grid.cell( row, col );\n                    break;\n                case \"custom\":\n                    if ( !finderOptions.customRange ) throw new Error( \"Please call with customRange in 'custom' finding.\" );\n\n                    if ( utils.checkContainsInRange( row, col, finderOptions.customRange ) )\n                        yield grid.cell( row, col );\n\n                    break;\n                default:\n                    break;\n            }\n\n            // Todo \uC228\uAE40 \uC140 \uCC98\uB9AC\n            if ( finderOptions.direction === \"top-bottom\" )\n            {\n                // \uB2E4\uC74C \uD589\n                ++row;\n\n                if ( row === grid.getRowCount() )\n                {\n                    ++col;\n                    row = getStartRow();\n                }\n\n                if ( col === grid.getColCount() )\n                {\n                    // \uB370\uC774\uD130\uB97C \uCC3E\uC558\uB2E4\uBA74, \uBB34\uD55C \uBC18\uBCF5\n                    if ( found )\n                    {\n                        found = false;\n                        row = getStartRow();\n                        col = getStartCol();\n                    }\n                    else break;\n                }\n            }\n            else\n            {\n                // \uB2E4\uC74C \uC5F4\n                ++col;\n\n                if ( col === grid.getColCount() )\n                {\n                    ++row;\n                    col = getStartCol();\n                }\n\n                if ( row === grid.getRowCount() )\n                {\n                    // \uB370\uC774\uD130\uB97C \uCC3E\uC558\uB2E4\uBA74, \uBB34\uD55C \uBC18\uBCF5\n                    if ( found )\n                    {\n                        found = false;\n                        row = getStartRow();\n                        col = getStartCol();\n                    }\n                    else break;\n                }\n            }\n\n        }\n    }\n\n    function isMatched( cell: IRGridCell )\n    {\n        // eslint-disable-next-line no-useless-escape\n        const escaped = finderOptions.text.replace( /[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&' );\n        const pattern = finderOptions.matchAll ? `^${escaped}$` : escaped;\n        const flag = finderOptions.ignoreCase ? \"i\" : \"\";\n        const regexp = new RegExp( pattern, flag );\n\n        if ( args.onCellCheck )\n            return args.onCellCheck( regexp, cell );\n\n        return regexp.test( cell.text );\n    }\n\n    let generator = CellGenerator();\n\n    return {\n        resetCursor: () =>\n        {\n            generator = CellGenerator();\n        },\n        findNext: ( options: IRGridFinderOptions ) =>\n        {\n            // options\uC774 \uD558\uB098\uB77C\uB3C4 \uB2EC\uB77C\uC9C0\uBA74 \uCEE4\uC11C \uCD08\uAE30\uD654\n            if ( !_.isEqual( finderOptions, options ) )\n                generator = CellGenerator();\n\n            Object.assign( finderOptions, options );\n\n            for ( ;; )\n            {\n                const it = generator.next();\n\n                if ( !it.done && isMatched( it.value ) )\n                {\n                    found = true;\n\n                    return it.value;\n                }\n                else if ( it.done )\n                    break;\n            }\n\n            return null;\n        },\n        getAllMatchedCell: ( options?: IRGridFinderOptions ) =>\n        {\n            const list: IRGridCell[] = [];\n\n            if ( options )\n                Object.assign( finderOptions, options );\n\n            for ( const cell of CellGenerator() )\n            {\n                if ( isMatched( cell ) )\n                    list.push( cell );\n            }\n\n            return list;\n        },\n    };\n}", "import { IRGrid } from './grid';\nimport { IRGridRange } from './utils';\n\nexport declare type GridCellGenerator = ReturnType<typeof createGridCellGenerator>\n\nexport function createGridCellGenerator( grid: IRGrid )\n{\n\n    return {\n        getSelectionGenerator: function *( { top, left, bottom, right }: IRGridRange )\n        {\n            right = Math.min( right, grid.getColCount() - 1 );\n            bottom = Math.min( bottom, grid.getRowCount() - 1 );\n\n            for ( let r = top; r <= bottom; r++ )\n                for ( let c = left; c <= right; c++ )\n                    yield grid.cell( r, c );\n        },\n\n        getSelectionHeaderIterator: function *( { top, left, bottom, right }: IRGridRange )\n        {\n            right = Math.min( right, grid.getColCount() - 1 );\n            bottom = Math.min( bottom, grid.getRowCount() - 1 );\n\n            // row header\n            for ( let r = 0; r < grid.headerRows; ++r )\n                for ( let c = left; c <= right; ++c )\n                    yield grid.cell( r, c );\n\n            // col header\n            for ( let r = top; r <= bottom; ++r )\n                for ( let c = 0; c < grid.headerColumns; ++c )\n                    yield grid.cell( r, c );\n        },\n\n        getSelectionHeaderBorderRight: function *( { top, bottom }: IRGridRange )\n        {\n            bottom = Math.min( bottom, grid.getRowCount() - 1 );\n\n            for ( let r = top; r <= bottom; ++r )\n                for ( let c = grid.headerColumns - 1; c >= 0; --c )\n                {\n                    const cell = grid.cell( r, c );\n\n                    if ( cell.visible )\n                    {\n                        yield cell;\n                        break;\n                    }\n                }\n        },\n\n        getSelectionHeaderBorderBottom: function *( { left, right }: IRGridRange )\n        {\n            right = Math.min( right, grid.getColCount() - 1 );\n\n            for ( let c = left; c <= right; ++c )\n                for ( let r = grid.headerRows - 1; r >= 0; --r )\n                {\n                    const cell = grid.cell( r, c );\n\n                    if ( cell.visible )\n                    {\n                        yield cell;\n                        break;\n                    }\n                }\n        },\n    };\n}", "import type { IRGrid } from \"./grid\";\nimport { createGridCellGenerator } from \"./iterator\";\nimport type { ChangedProperty, UndoManager } from \"./undo-redo\";\nimport type { IRGridRange } from './utils';\n\nexport declare type IRGridCommand = {\n    // INSERT_ROW: { start: number; count: number; height?: number };\n    // INSERT_COLUMN: { start: number; count: number; width?: number };\n    // REMOVE_ROWS: { top: number; bottom: number };\n    // REMOVE_COLUMNS: { left: number; right: number };\n    // MERGE_CELLS: { row: number; col: number; rowSpan: number; colSpan: number; };\n    // SPLIT_CELLS: { row: number; col: number };\n    // CLEAR_ROWS: { };\n    ADD_ROW: { height?: number } | undefined;\n    ADD_COLUMN: { width?: number } | undefined;\n    RESIZE_ROW: { row: number; height: number };\n    RESIZE_COLUMN: { col: number; width: number };\n    CLEAR_CELLS: IRGridRange;\n    DONE_CELL_EDIT: { row: number; col: number; text: string; beforeText: string };\n    SET_TEXT: { row: number; col: number; text: string };\n}\n\nexport const createCommandManager = ( grid: IRGrid, undoManager: UndoManager ) =>\n{\n    const cellGenerator = createGridCellGenerator( grid );\n    const commandHandler: { [key in keyof IRGridCommand]: ( args: IRGridCommand[key] ) => void } = {\n        RESIZE_COLUMN( { col, width } )\n        {\n            const oldSize = grid.getColumnWidth( col );\n            grid.setColumnWidth( col, width );\n\n            undoManager.pushCommand( {\n                type: \"CHANGE_COL_WIDTH\",\n                context: {\n                    col,\n                    newSize: width,\n                    oldSize: oldSize,\n                },\n            } );\n        },\n        RESIZE_ROW( { row, height } )\n        {\n            const oldSize = grid.getRowHeight( row );\n\n            grid.setRowHeight( row, height );\n\n            undoManager.pushCommand( {\n                type: \"CHANGE_ROW_HEIGHT\",\n                context: {\n                    row,\n                    newSize: height,\n                    oldSize: oldSize,\n                },\n            } );\n        },\n        ADD_ROW( args = { height: undefined } )\n        {\n            const row = grid.addRow( args.height );\n\n            undoManager.pushCommand( {\n                type: \"ADD_ROW\",\n                context: {\n                    row,\n                    height: args.height,\n                },\n            } );\n\n            return row;\n        },\n        ADD_COLUMN( args = { width: undefined } )\n        {\n            const col = grid.addColumn( args.width );\n\n            undoManager.pushCommand( {\n                type: \"ADD_COLUMN\",\n                context: {\n                    col,\n                    width: args.width,\n                },\n            } );\n\n            return col;\n        },\n        CLEAR_CELLS( range: IRGridCommand[\"CLEAR_CELLS\"] )\n        {\n            const cellInfoList: ChangedProperty[] = [];\n\n            for ( const cell of cellGenerator.getSelectionGenerator( range ) )\n            {\n                if ( cell.metaInfo.disabled !== true &&\n                    cell.onCheckReadonly() !== true &&\n                    cell.metaInfo.cellType !== \"select\" &&\n                    cell.text )\n                {\n                    cellInfoList.push( {\n                        row: cell.row,\n                        col: cell.col,\n                        key: \"text\",\n                        oldValue: cell.text,\n                        newValue: \"\",\n                    } );\n                    cell.clear();\n                }\n            }\n\n            if ( cellInfoList.length === 0 ) return;\n\n            undoManager.pushCommand( {\n                type: \"UPDATE_CELLS\",\n                context: { cellInfoList },\n            } );\n\n        },\n        DONE_CELL_EDIT( { row, col, beforeText, text }: IRGridCommand[\"DONE_CELL_EDIT\"] )\n        {\n            undoManager.pushCommand( {\n                type: \"UPDATE_CELLS\",\n                context: {\n                    cellInfoList: [{\n                        row,\n                        col,\n                        key: \"text\",\n                        newValue: text,\n                        oldValue: beforeText,\n                    }],\n                },\n            } );\n        },\n        SET_TEXT( { row, col, text } )\n        {\n            const beforeText = grid.getText( row, col );\n\n            grid.setText( row, col, text );\n\n            undoManager.pushCommand( {\n                type: \"UPDATE_CELLS\",\n                context: {\n                    cellInfoList: [{\n                        row,\n                        col,\n                        key: \"text\",\n                        newValue: text,\n                        oldValue: beforeText,\n                    }],\n                },\n            } );\n        },\n    };\n\n    return {\n        doCommand<T extends keyof IRGridCommand>( command: T, args: IRGridCommand[T] )\n        {\n            return commandHandler[command]( args );\n        },\n    };\n};", "import _ from 'lodash';\n\nimport { IRGridCell } from './cell';\nimport { IRGrid } from './grid';\nimport { createGridCellGenerator } from './iterator';\nimport { IRGridRange } from './utils';\n\nexport declare type MergeHandler = ReturnType<typeof createMergeHandler>;\n\nexport function createMergeHandler( grid: IRGrid )\n{\n    const mergeList: IRGridCell[] = [];\n    const generator = createGridCellGenerator( grid );\n\n    function isValidatedMerging( { top, left, bottom, right }: IRGridRange )\n    {\n        return _( mergeList )\n            .some( ( { mergeArea } ) =>\n            {\n                return left <= mergeArea.right && right >= mergeArea.left && top <= mergeArea.bottom && bottom >= mergeArea.top;\n            } ) === false;\n    }\n\n    function getRowSpanCount( top: number, bottom: number )\n    {\n        return _.range( top, bottom + 1 )\n            .filter( ( r ) => grid.getRowVisible( r ) )\n            .reduce( ( cnt ) => cnt + 1, 0 );\n    }\n\n    function getColSpanCount( left: number, right: number )\n    {\n        return _.range( left, right + 1 )\n            .filter( ( c ) => grid.getColumnVisible( c ) )\n            .reduce( ( cnt ) => cnt + 1, 0 );\n    }\n\n    function isContainedHiddenCell( { top, left, bottom, right }: IRGridRange )\n    {\n        if ( _.range( top, bottom + 1 )\n            .some( ( row ) => grid.getRowVisible( row ) === false ) ||\n            _.range( left, right + 1 )\n                .some( ( col ) => grid.getColumnVisible( col ) === false ) )\n            return true;\n\n        return false;\n    }\n\n    function getMergeCell( row: number, col: number )\n    {\n        const cell = grid.cell( row, col );\n        const id = mergeList.indexOf( cell );\n\n        if ( id >= 0 )\n            return mergeList[id];\n\n        return undefined;\n    }\n\n    const handler = {\n        isValidatedMerging,\n\n        getMergedRowHeight: ( top: number, bottom: number ) =>\n        {\n            return _.range( top, bottom + 1 )\n                .filter( ( id ) => grid.getRowVisible( id ) )\n                .reduce( ( height, id ) => height + grid.getRowHeight( id ), 0 );\n        },\n\n        mergeCells: ( range: IRGridRange ) =>\n        {\n            // \uBC94\uC704\uAC00 \uC774\uC0C1\uD55C \uACBD\uC6B0 error\n            if ( range.top > range.bottom || range.left > range.right )\n                throw new Error( 'Invalid range' );\n            else if ( isValidatedMerging( range ) === false )\n                throw new Error( 'Could not merging with Conflicted cells!' );\n            else if ( isContainedHiddenCell( range ) )\n                throw new Error( 'Could not merging with hidden cells!' );\n            else if ( range.top === range.bottom && range.left === range.right )\n                throw new Error( 'Could not merging with single cell!' );\n\n            const mergeMain = grid.cell( range.top, range.left );\n\n            mergeMain.height = handler.getMergedRowHeight( range.top, range.bottom );\n            mergeMain.mergeInfo = { rowSpan: getRowSpanCount( range.top, range.bottom ), colSpan: getColSpanCount( range.left, range.right ) };\n            mergeList.push( mergeMain );\n\n            const row = grid.getRow( range.top );\n\n            row.updateMaxCellHeight();\n\n            if ( range.top < grid.headerRows )\n                row.customRowZId = grid.headerRows - range.top;\n\n            for ( const cell of generator.getSelectionGenerator( range ) )\n                if ( cell.row !== range.top || cell.col !== range.left )\n                {\n                    cell.mergeMain = mergeMain;\n                    cell.metaInfo.text = \"\";\n                }\n        },\n\n        splitCells: ( row: number, col: number ) =>\n        {\n            const info = getMergeCell( row, col );\n\n            if ( !info )\n                throw new Error( 'Could not split on a not merged cell!' );\n\n            for ( const cell of generator.getSelectionGenerator( info.mergeArea ) )\n            {\n                cell.mergeMain = undefined;\n                cell.mergeInfo = { rowSpan: 1, colSpan: 1 };\n            }\n\n            handler.removeMergeCell( row, col );\n            grid.getRow( row ).updateMaxCellHeight();\n        },\n\n        isMerged: ( row: number, col: number ) =>\n        {\n            return !isValidatedMerging( { top: row, left: col, bottom: row, right: col } );\n        },\n\n        *getMergedCellGenerator( range: IRGridRange )\n        {\n            for ( const cell of generator.getSelectionGenerator( range ) )\n            {\n                if ( cell.mergeInfo.rowSpan > 1 || cell.mergeInfo.colSpan > 1 )\n                    yield cell;\n            }\n        },\n\n        removeMergeCell: ( row: number, col: number ) =>\n        {\n            const info = getMergeCell( row, col );\n\n            if ( !info )\n                throw new Error( 'Could not split on a not merged cell!' );\n\n            mergeList.splice( mergeList.indexOf( info ), 1 );\n        },\n\n        /**\n         * if exists conflicting rows between top and bottom.\n         */\n        checkConflictingInRows( top: number, bottom: number )\n        {\n            for ( const { mergeArea } of mergeList )\n            {\n                if ( ( mergeArea.top < top && mergeArea.bottom >= top && mergeArea.bottom <= bottom ) ||\n                    ( mergeArea.bottom > bottom && mergeArea.top >= top && mergeArea.top <= bottom ) ||\n                    ( mergeArea.top < top && mergeArea.bottom > bottom ) )\n                    return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * if exists conflicting columns between left and right.\n         */\n        checkConflictingInColumns( left: number, right: number )\n        {\n            for ( const { mergeArea } of mergeList )\n            {\n                if ( ( mergeArea.left < left && mergeArea.right >= left && mergeArea.right <= right ) ||\n                    ( mergeArea.right > right && mergeArea.left >= left && mergeArea.left <= right ) ||\n                    ( mergeArea.left < left && mergeArea.right > right ) )\n                    return true;\n            }\n\n            return false;\n        },\n\n        checkCanInsertRow( rowId: number )\n        {\n            for ( const { mergeArea } of mergeList )\n            {\n                if ( mergeArea.top < rowId && mergeArea.bottom >= rowId )\n                    return false;\n            }\n\n            return true;\n        },\n\n        checkCanInsertColumn( columnId: number )\n        {\n            for ( const { mergeArea } of mergeList )\n            {\n                if ( mergeArea.left < columnId && mergeArea.right >= columnId )\n                    return false;\n            }\n\n            return true;\n        },\n    };\n\n    return handler;\n}", "import type { IRGridCell } from '../cell';\nimport type { IRGrid } from '../grid';\nimport clsGrid from '../grid.classNames';\n\nimport { getCssText, getMinMaxBetween } from '@utils';\n\ndeclare type ResizerType = \"col\" | \"row\"\ndeclare type ClsResizing = `${ResizerType}-resizing`\n\nconst COL_INTERACTION_SIZE = 12;\nconst ROW_INTERACTION_SIZE = 8;\n\nfunction getColumnNo( cell: IRGridCell )\n{\n    if ( cell.mergeInfo )\n        return cell.col + cell.mergeInfo.colSpan - 1;\n    else\n        return cell.col;\n}\n\nfunction getRowNo( cell: IRGridCell )\n{\n    if ( cell.mergeInfo )\n        return cell.row + cell.mergeInfo.rowSpan - 1;\n    else\n        return cell.row;\n}\n\nexport interface ResizerPluginOptions {\n    enabledColResizer: boolean;\n    enabledRowResizer: boolean;\n}\n\ninterface ResizerArgs extends ResizerPluginOptions {\n    grid: IRGrid;\n    table: HTMLTableElement;\n    context: HTMLElement;\n}\n\nfunction Resizer( { grid, context, enabledColResizer, enabledRowResizer }: ResizerArgs )\n{\n\n    ( function mount()\n    {\n        const divGuide = document.createElement( \"div\" );\n\n        let isResizing = false;\n        let latestContextDownHandler: ( ( _ev: MouseEvent ) => void ) | null = null;\n        let latestClickedTime = 0;\n\n        function resetCursor()\n        {\n            context.classList.remove( clsGrid.grid[\"col-resizing\"] );\n            context.classList.remove( clsGrid.grid[\"row-resizing\"] );\n            context.classList.remove( clsGrid.grid['is-resizing'] );\n            latestContextDownHandler && context.removeEventListener( \"mousedown\", latestContextDownHandler );\n        }\n\n        function setCursor( eventCell: IRGridCell, clsResizing: ClsResizing )\n        {\n            latestContextDownHandler && context.removeEventListener( \"mousedown\", latestContextDownHandler );\n\n            context.classList.remove( clsGrid.grid[\"col-resizing\"] );\n            context.classList.remove( clsGrid.grid[\"row-resizing\"] );\n\n            context.classList.add( clsGrid.grid[clsResizing] );\n            context.classList.add( clsGrid.grid['is-resizing'] );\n\n            let initXY = 0;\n            let minXY = 0;\n            let maxXY = 0;\n            let startXY = 0;\n            let size = 0;\n\n            function getGuideX()\n            {\n                if ( eventCell.col < grid.getFreezedColumnCount() )\n                    return grid.scrollLeft + startXY;\n                else\n                    return startXY;\n            }\n\n            function getGuideY()\n            {\n                if ( eventCell.row < grid.getFreezedRowCount() )\n                    return grid.scrollTop + startXY;\n                else\n                    return startXY;\n            }\n\n            latestContextDownHandler = ( ev: MouseEvent ) =>\n            {\n                const curTime = new Date().getTime();\n\n                if ( ( curTime - latestClickedTime ) <= 500 )\n                {\n                    // double click\n\n                    if ( clsResizing === \"col-resizing\" )\n                        grid.autoSizeColumn( eventCell.col );\n                    else\n                        grid.autoSizeRow( eventCell.row );\n\n                    latestClickedTime = 0;\n                    return;\n                }\n\n                isResizing = true;\n                latestClickedTime = curTime;\n\n                eventCell.element.classList.add( clsGrid.th[clsResizing] );\n\n                if ( clsResizing === \"col-resizing\" )\n                {\n                    // col-resizing\n                    divGuide.className = clsGrid.colResizerGuide.blockElementName;\n\n                    size = grid.getColumnWidth( getColumnNo( eventCell ) );\n                    initXY = ev.pageX;\n                    minXY = initXY - size + grid.minColWidth;\n                    maxXY = initXY - size + grid.maxColWidth;\n                    startXY = grid.getColumnLeft( eventCell.col ) + grid.getCellWidth( eventCell );\n\n                    divGuide.style.cssText = getCssText( {\n                        top: \"0px\",\n                        width: \"0px\",\n                        height: `${grid.height}px`,\n                        left: `${getGuideX()}px`,\n                    } );\n                }\n                else\n                {\n                    // row-resizing\n                    divGuide.className = clsGrid.rowResizerGuide.blockElementName;\n\n                    size = grid.getRowHeight( getRowNo( eventCell ) );\n                    initXY = ev.pageY;\n                    minXY = initXY - size + grid.minRowHeight;\n                    maxXY = initXY - size + grid.maxRowHeight;\n                    startXY = grid.getRow( eventCell.row ).top + grid.getCellHeight( eventCell );\n\n                    divGuide.style.cssText = getCssText( {\n                        top: `${getGuideY()}px`,\n                        width: `${grid.width}px`,\n                        height: \"0px\",\n                        left: \"0px\",\n                    } );\n                }\n\n                context.appendChild( divGuide );\n                grid.addGlobalEventListener( document, \"keydown\", docKeyDownHandler );\n                grid.addGlobalEventListener( document, \"mouseup\", docMouseUpHandler );\n                grid.addGlobalEventListener( document, \"mousemove\", docMouseMoveHandler );\n            };\n\n            const docMouseMoveHandler = ( ev: MouseEvent ) =>\n            {\n                if ( clsResizing === \"col-resizing\" )\n                {\n                    // col-resizing\n                    const diff = getMinMaxBetween( ev.pageX, minXY, maxXY ) - initXY;\n\n                    divGuide.style.left = `${getGuideX() + diff}px`;\n                }\n                else\n                {\n                    // row-resizing\n                    const diff = getMinMaxBetween( ev.pageY, minXY, maxXY ) - initXY;\n\n                    divGuide.style.top = `${getGuideY() + diff}px`;\n                }\n            };\n\n            const docMouseUpHandler = ( ev: MouseEvent ) =>\n            {\n                if ( clsResizing === \"col-resizing\" )\n                {\n                    const diff = getMinMaxBetween( ev.pageX, minXY, maxXY ) - initXY;\n\n                    if ( Math.abs( diff ) > 4 )\n                    {\n                        grid.doCommand( \"RESIZE_COLUMN\", { col: getColumnNo( eventCell ), width: size + diff } );\n                        latestClickedTime = 0;\n                    }\n                }\n                else\n                {\n                    const diff = getMinMaxBetween( ev.pageY, minXY, maxXY ) - initXY;\n\n                    if ( Math.abs( diff ) > 4 )\n                    {\n                        grid.doCommand( \"RESIZE_ROW\", { row: getRowNo( eventCell ), height: size + diff } );\n                        latestClickedTime = 0;\n                    }\n                }\n\n                removeAllEvents();\n\n                const cell = getHeaderCellOrNull( ev );\n\n                if ( !cell ) return;\n\n                const clsResizing2 = getMouseCursorTypeOrNull( ev, cell );\n\n                if ( clsResizing2 !== null )\n                    setCursor( cell, clsResizing2 );\n\n            };\n\n            function removeAllEvents()\n            {\n                isResizing = false;\n                divGuide.remove();\n                resetCursor();\n                eventCell.element.classList.remove( clsGrid.th[clsResizing] );\n                document.removeEventListener( \"mousemove\", docMouseMoveHandler );\n                document.removeEventListener( \"mouseup\", docMouseUpHandler );\n                document.removeEventListener( \"keydown\", docKeyDownHandler );\n            }\n\n            const docKeyDownHandler = ( ev:KeyboardEvent ) =>\n            {\n                if ( ev.key === \"Escape\" )\n                    removeAllEvents();\n            };\n\n            grid.addGlobalEventListener( context, \"mousedown\", latestContextDownHandler );\n        }\n\n        const contextMouseMoveHandler = ( ev: MouseEvent ) =>\n        {\n            if ( isResizing ) return;\n\n            const cell = getHeaderCellOrNull( ev );\n\n            if ( cell === null )\n            {\n                resetCursor();\n                return;\n            }\n\n            // get current cursor's cell\n            const clsResizing = getMouseCursorTypeOrNull( ev, cell );\n\n            if ( clsResizing === null )\n                resetCursor();\n            else\n                setCursor( cell, clsResizing );\n        };\n\n        const contextMouseOutHandler = ( _ev: MouseEvent ) =>\n        {\n            resetCursor();\n        };\n\n        /**\n         * \uB9C8\uC6B0\uC2A4 \uCEE4\uC11C\n         */\n        grid.addGlobalEventListener( context, \"mousemove\", contextMouseMoveHandler );\n        grid.addGlobalEventListener( context, \"mouseout\", contextMouseOutHandler );\n\n    } )();\n\n    function getHeaderCellOrNull( ev: Event )\n    {\n        const curCell = ( ev.target as HTMLElement ).closest( \"th\" );\n\n        if ( !curCell ) return null;\n\n        const [row, col] = [\n            parseInt( curCell.getAttribute( \"data-row\" ) || \"-1\" ),\n            parseInt( curCell.getAttribute( \"data-col\" ) || \"-1\" ),\n        ];\n\n        return grid.cell( row, col );\n    }\n\n    function getMouseCursorTypeOrNull( ev: MouseEvent, cell: IRGridCell )\n    {\n        if ( cell.cellType === \"body-cell\" ) return null;\n\n        if ( enabledColResizer && Math.abs( grid.getCellWidth( cell ) - ev.offsetX ) <= COL_INTERACTION_SIZE )\n            return \"col-resizing\";\n        else if ( enabledRowResizer && Math.abs( grid.getCellHeight( cell ) - ev.offsetY ) <= ROW_INTERACTION_SIZE )\n            return \"row-resizing\";\n        else\n            return null;\n    }\n\n    return grid;\n}\n\nexport function ResizerPlugin( options: ResizerPluginOptions )\n{\n    return ( grid: IRGrid, table: HTMLTableElement, context: HTMLElement ) =>\n    {\n        return Resizer( { grid, table, context, ...options } );\n    };\n}", "import _ from 'lodash';\n\nimport type { IRGridCell } from '../cell';\nimport type { IRGrid } from '../grid';\nimport { createGridSelector } from '../selector';\nimport { getCellElementRowCol } from '../utils';\n\nfunction MouseCellSelector( grid: IRGrid, table: HTMLTableElement )\n{\n    let startCell: IRGridCell | null = null;\n\n    const selector = createGridSelector( grid );\n\n    table.addEventListener( \"mousedown\", ( ev ) =>\n    {\n        if ( ev.button !== 0 ) return;\n\n        const curCell = ( ev.target as HTMLElement ).closest( \"td\" );\n\n        // header \uD074\uB9AD\uC740 pass\n        if ( !curCell || curCell?.tagName === \"TH\" ) return;\n\n        const cellAddress = getCellElementRowCol( curCell );\n\n        startCell = grid.cell( cellAddress.row, cellAddress.col );\n\n        grid.selectRange( startCell.row, startCell.col, startCell.bottom, startCell.right, startCell );\n    } );\n\n    table.addEventListener( \"mousemove\", ( ev ) =>\n    {\n        if ( !startCell ) return;\n\n        const curCell = ( ev.target as HTMLElement ).closest( \"td\" );\n\n        if ( !curCell || curCell.tagName === \"TH\" ) return;\n\n        const cellAddress = getCellElementRowCol( curCell );\n        const cell = grid.cell( cellAddress.row, cellAddress.col );\n\n        const row = [\n            startCell.row,\n            startCell.bottom,\n            cell.row,\n            cell.bottom,\n        ] as const;\n\n        const col = [\n            startCell.col,\n            startCell.right,\n            cell.col,\n            cell.right,\n        ] as const;\n\n        const range = {\n            top: Math.min( ...row ),\n            left: Math.min( ...col ),\n            bottom: Math.max( ...row ),\n            right: Math.max( ...col ),\n        };\n\n        const extendRange = selector.extendRange( range );\n\n        // range\uAC00 \uC774\uC804\uACFC \uB2E4\uB97C \uACBD\uC6B0\uC5D0\uB9CC selectRange \uD638\uCD9C\n        if ( _.isEqual( grid.getSelection(), extendRange ) === false )\n            grid.selectRange( extendRange.top, extendRange.left, extendRange.bottom, extendRange.right, startCell );\n    } );\n\n    grid.addGlobalEventListener( document, \"mouseup\", () => startCell = null );\n}\n\nexport function MouseCellSelectorPlugin( )\n{\n    return MouseCellSelector;\n}", "import _ from 'lodash';\n\nimport { IRGridCell } from './cell';\nimport { IRGrid } from './grid';\nimport { createGridCellGenerator } from './iterator';\nimport { IRGridRange } from './utils';\n\nimport { getMinMaxBetween } from '@utils';\n\nexport declare type GridSelector = ReturnType<typeof createGridSelector>\n\nexport function createGridSelector( grid: IRGrid )\n{\n    const generator = createGridCellGenerator( grid );\n\n    function extendRange( range: IRGridRange ): IRGridRange\n    {\n        const newRange = _.clone( range );\n        const stack: IRGridCell[] = [ ...generator.getSelectionGenerator( range ) ];\n\n        while ( stack.length )\n        {\n            const cur = stack.pop() as IRGridCell;\n\n            if ( !cur.isMerged && !cur.mergeMain ) continue;\n\n            // check if it's merged.\n            const mergeArea = cur.mergeMain ? cur.mergeMain.mergeArea : cur.mergeArea;\n\n            if ( mergeArea.top < newRange.top )\n            {\n                // pushing cells on the extending top\n                for ( const cell of generator.getSelectionGenerator( { top: mergeArea.top, left: newRange.left, bottom: newRange.top - 1, right: newRange.right } ) )\n                    stack.push( cell );\n\n                newRange.top = mergeArea.top;\n            }\n\n            if ( mergeArea.left < newRange.left )\n            {\n                // pushing cells on the extending left\n                for ( const cell of generator.getSelectionGenerator( { top: newRange.top, left: mergeArea.left, bottom: newRange.bottom, right: newRange.left - 1 } ) )\n                    stack.push( cell );\n\n                newRange.left = mergeArea.left;\n            }\n\n            if ( newRange.bottom < mergeArea.bottom )\n            {\n                // pushing cells on the extending bottom\n                for ( const cell of generator.getSelectionGenerator( { top: newRange.bottom + 1, left: newRange.left, bottom: mergeArea.bottom, right: newRange.right } ) )\n                    stack.push( cell );\n\n                newRange.bottom = mergeArea.bottom;\n            }\n\n            if ( newRange.right < mergeArea.right )\n            {\n                // pushing cells on the extending right\n                for ( const cell of generator.getSelectionGenerator( { top: newRange.top, left: newRange.right + 1, bottom: newRange.bottom, right: mergeArea.right } ) )\n                    stack.push( cell );\n\n                newRange.right = mergeArea.right;\n            }\n        }\n\n        return newRange;\n    }\n\n    function trimRange( range: IRGridRange ): IRGridRange\n    {\n        const trimmedRange = _.clone( range );\n        const beginRow = grid.headerRows;\n        const beginCol = grid.headerColumns;\n        const endRow = grid.getRowCount() - 1;\n        const endCol = grid.getColCount() - 1;\n\n        trimmedRange.top = getMinMaxBetween( trimmedRange.top, beginRow, endRow );\n        trimmedRange.left = getMinMaxBetween( trimmedRange.left, beginCol, endCol );\n        trimmedRange.bottom = getMinMaxBetween( trimmedRange.bottom, beginRow, endRow );\n        trimmedRange.right = getMinMaxBetween( trimmedRange.right, beginCol, endCol );\n\n        return trimmedRange;\n    }\n\n    return {\n\n        extendRange: ( range: IRGridRange ) => extendRange( range ),\n\n        releaseCells: ( range: IRGridRange ) =>\n        {\n            const trim = trimRange( range );\n\n            for ( const cell of generator.getSelectionGenerator( trim ) )\n                cell.release();\n\n            for ( const header of generator.getSelectionHeaderIterator( trim ) )\n                header.release();\n        },\n\n        selectRange: ( range: IRGridRange ) =>\n        {\n            const trim = trimRange( range );\n            const extend = extendRange( trim );\n\n            // body cell \uC120\uD0DD\n            for ( const cell of generator.getSelectionGenerator( extend ) )\n                cell.select();\n\n            // body cell border \uD6A8\uACFC\n            for ( let r = extend.top; r <= extend.bottom; ++r )\n            {\n                grid.cell( r, extend.left ).setBorderLeft();\n                grid.cell( r, extend.right ).setBorderRight();\n            }\n\n            for ( let c = extend.left; c <= extend.right; ++c )\n            {\n                grid.cell( extend.top, c ).setBorderTop();\n                grid.cell( extend.bottom, c ).setBorderBottom();\n            }\n\n            // header cell \uD65C\uC131\uD654\n            for ( const header of generator.getSelectionHeaderIterator( extend ) )\n                header.activate();\n\n            return extend;\n        },\n\n    };\n}", "import _ from 'lodash';\n\nimport { createGridCellCursorManager } from '../cursor';\nimport type { IRGrid } from '../grid';\nimport clsGrid from '../grid.classNames';\nimport { createGridCellGenerator } from '../iterator';\n\nconst DefaultKey = ( grid: IRGrid, _table: HTMLTableElement, context: HTMLElement ) =>\n{\n    const textArea = document.createElement( \"textarea\" );\n    const generator = createGridCellGenerator( grid );\n    const { selectNextActiveCell, selectNextSelection, selectBeforeActiveCell, selectMoveToFirstRow, selectMoveToFirstColumn, selectMoveToLastColumn, selectMoveToLastRow } = createGridCellCursorManager( grid );\n\n    textArea.className = clsGrid.focus.blockElementName;\n    context.appendChild( textArea );\n\n    grid.addCoreElement( textArea );\n    grid.addGlobalEventListener( context, \"focus\", () =>\n    {\n        if ( document.activeElement !== textArea )\n            textArea.focus();\n    } );\n    grid.addGlobalEventListener( context, \"mouseup\", () => textArea.focus() );\n    grid.addGlobalEventListener( context, \"input\", ( ev: InputEvent ) =>\n    {\n        if ( !grid.activeCell ) return;\n\n        const cell = grid.activeCell.mergeMain ?? grid.activeCell;\n\n        if ( !cell.isEditing && ev.data )\n            cell.doEditMode( ev.data );\n    } );\n\n    textArea.addEventListener( \"paste\", ( ev ) => grid.onNativePaste( ev ) );\n    textArea.addEventListener( \"copy\", ( ev ) => grid.onNativeCopy( ev ) );\n    textArea.addEventListener( \"cut\", ( ev ) => grid.onNativeCut( ev ) );\n\n    const keyFuncMap: Record<string, ( ev: KeyboardEvent ) => void> = {\n        Tab: ( ev: KeyboardEvent ) =>\n        {\n            // shift \uB20C\uB9B0 \uACBD\uC6B0 backward\n            if ( ev.shiftKey )\n                selectBeforeActiveCell( );\n            else\n                selectNextActiveCell( );\n        },\n        ArrowRight: ( ev: KeyboardEvent ) =>\n        {\n            if ( ev.ctrlKey )\n                selectMoveToLastColumn( ev.shiftKey );\n            else\n                selectNextSelection( 0, 1, ev.shiftKey );\n        },\n        ArrowUp: ( ev: KeyboardEvent ) =>\n        {\n            if ( ev.ctrlKey )\n                selectMoveToFirstRow( ev.shiftKey );\n            else\n                selectNextSelection( -1, 0, ev.shiftKey );\n        },\n        ArrowLeft: ( ev: KeyboardEvent ) =>\n        {\n            if ( ev.ctrlKey )\n                selectMoveToFirstColumn( ev.shiftKey );\n            else\n                selectNextSelection( 0, -1, ev.shiftKey );\n        },\n        ArrowDown: ( ev: KeyboardEvent ) =>\n        {\n            if ( ev.ctrlKey )\n                selectMoveToLastRow( ev.shiftKey );\n            else\n                selectNextSelection( 1, 0, ev.shiftKey );\n        },\n        Home: ( ev: KeyboardEvent ) =>\n        {\n            selectMoveToFirstColumn( ev.shiftKey );\n        },\n        End: ( ev: KeyboardEvent ) =>\n        {\n            selectMoveToLastColumn( ev.shiftKey );\n        },\n        PageUp: ( ev: KeyboardEvent ) =>\n        {\n            selectNextSelection( -10, 0, ev.shiftKey );\n        },\n        PageDown: ( ev: KeyboardEvent ) =>\n        {\n            selectNextSelection( 10, 0, ev.shiftKey );\n        },\n        Enter: ( ) =>\n        {\n            selectNextSelection( 1, 0, false );\n        },\n        a: ( ev: KeyboardEvent ) =>\n        {\n            // \uBAA8\uB4E0 \uC140 \uC120\uD0DD\n            if ( ev.ctrlKey )\n                grid.selectAll();\n        },\n        z: ( ev: KeyboardEvent ) =>\n        {\n            // Undo\n            if ( ev.ctrlKey )\n                grid.undo();\n        },\n        y: ( ev: KeyboardEvent ) =>\n        {\n            // Redo\n            if ( ev.ctrlKey )\n                grid.redo();\n        },\n        F2: ( _: KeyboardEvent ) =>\n        {\n            // \uD604\uC7AC \uC140 edit \uBAA8\uB4DC\n            if ( grid.activeCell === null ) return;\n\n            const mainCell = grid.activeCell.mergeMain ?? grid.activeCell;\n\n            mainCell.doEditMode();\n        },\n        Delete: ( _: KeyboardEvent ) =>\n        {\n            // \uD604\uC7AC \uC120\uD0DD\uB41C \uC140 clear\n            // TODO undoStack \uCD94\uAC00\n            const selection = grid.getSelection();\n\n            if ( !selection ) return;\n\n            grid.doCommand( \"CLEAR_CELLS\", selection );\n        },\n        \" \": ( _ev: KeyboardEvent ) =>\n        {\n            // \uC120\uD0DD\uB41C \uCCB4\uD06C\uBC15\uC2A4 \uBAA8\uB450 \uCCB4\uD06C\n            const selection = grid.getSelection();\n\n            if ( !selection ) return;\n\n            for ( const cell of generator.getSelectionGenerator( selection ) )\n            {\n                // \uC218\uC815 \uBD88\uAC00 \uBAA8\uB4DC\uB294 pass\n                if ( cell.onCheckReadonly() || cell.metaInfo.disabled ) continue;\n                if ( cell.metaInfo.cellType === \"checkbox\" )\n                {\n                    // checkbox \uCC3E\uC544 click\n                    cell.element.querySelector( \"input\" )?.click();\n                }\n            }\n        },\n    };\n\n    grid.addGlobalEventListener( context, \"keydown\", ( ev: KeyboardEvent ) =>\n    {\n        textArea.value = \"\";\n\n        // \uB4F1\uB85D\uB41C \uD0A4\uCF54\uB4DC \uC2E4\uD589\n        if ( keyFuncMap[ev.key] )\n        {\n            try\n            {\n                keyFuncMap[ev.key]( ev );\n            }\n            finally\n            {\n                if ( ev.key !== \"a\" )\n                {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        }\n    } );\n\n    return grid;\n};\n\nexport const DefaultKeyPlugin = ( ) =>\n{\n    return DefaultKey;\n};", "import _ from 'lodash';\n\nimport { IRGridCell } from '../cell';\nimport { IRGrid } from '../grid';\nimport { createGridSelector } from '../selector';\nimport { getCellElementRowCol } from '../utils';\n\nfunction RowSelection( grid: IRGrid, table: HTMLTableElement )\n{\n    let startCell: IRGridCell | null = null;\n\n    const selector = createGridSelector( grid );\n\n    table.addEventListener( \"mousedown\", ( ev ) =>\n    {\n        if ( ev.button !== 0 ) return;\n\n        const curCell = ( ev.target as HTMLElement ).closest( \"td\" );\n\n        // header \uD074\uB9AD\uC740 pass\n        if ( !curCell || curCell?.tagName === \"TH\" ) return;\n\n        const cellAddress = getCellElementRowCol( curCell );\n\n        startCell = grid.cell( cellAddress.row, cellAddress.col );\n\n        grid.selectRange( startCell.row, grid.headerColumns, startCell.row, grid.getColCount(), startCell );\n    } );\n\n    grid.addGlobalEventListener( document, \"mouseup\", () => startCell = null );\n\n    return grid;\n}\n\nexport function RowSelectionPlugin( )\n{\n    return RowSelection;\n}", "import _ from 'lodash';\n\nimport type { IRGrid } from '../grid';\n\nfunction ColumnFill( grid: IRGrid, table: HTMLTableElement, contextElement: HTMLElement )\n{\n\n    function fillColumns( from: number )\n    {\n        const { display, width } = getComputedStyle( contextElement );\n\n        if ( display === \"none\" )\n        {\n            console.warn( \"IR_GRID_COLUMN_FILL_PLUGIN::Could not be the column-fill plugin because display is none!\" );\n            return;\n        }\n\n        console.log( width );\n\n    }\n\n    grid.emitter.on( \"onContextResized\", () => fillColumns( -1 ) );\n    grid.emitter.on( \"onColumnResized\", ( { col } ) => fillColumns( col ) );\n\n    return grid;\n}\n\nexport function ColumnFillPlugin( )\n{\n    return ColumnFill;\n}", "import type { IRGrid } from '../grid';\n\ndeclare interface RowObserverPluginOption {\n    onCellInfoChanged: ( _grid: IRGrid, _row: number, _col: number ) => void;\n}\n\nfunction CellObserver( grid: IRGrid, { onCellInfoChanged }: RowObserverPluginOption )\n{\n    const handler = ( { row = -1, col = -1 } ) =>\n    {\n        onCellInfoChanged( grid, row, col );\n    };\n\n    const pluginController = {\n        turnOn: () => grid.emitter.on( \"onCellInfoChanged\", handler ),\n        turnOff: () => grid.emitter.off( \"onCellInfoChanged\", handler ),\n    };\n\n    pluginController.turnOn();\n\n    return pluginController;\n}\n\nexport function CellObserverPlugin( option: RowObserverPluginOption )\n{\n    return ( grid: IRGrid ) =>\n    {\n        return CellObserver( grid, option );\n    };\n}", "import type { IRGridCell } from '../cell';\nimport type { IRGrid } from '../grid';\n\ndeclare interface DragAndDropPluginArgs {\n    enabledOnHeader?: boolean;\n}\n\nconst DEFAULT_VALUES: DragAndDropPluginArgs = {\n    enabledOnHeader: false,\n};\n\nfunction CellDrop( grid: IRGrid, table: HTMLTableElement, { enabledOnHeader }: DragAndDropPluginArgs )\n{\n    const dragStatus = {\n        latestDragOverCell: null as IRGridCell | null,\n    };\n\n    function endDrag()\n    {\n        table.classList.remove( \"is-dragging\" );\n        removeDraggingBorder();\n    }\n\n    function removeDraggingBorder()\n    {\n        if ( !dragStatus.latestDragOverCell ) return;\n\n        dragStatus.latestDragOverCell.isDragOver = false;\n    }\n\n    function setDragCell( cell: IRGridCell )\n    {\n        removeDraggingBorder();\n        dragStatus.latestDragOverCell = cell;\n        cell.isDragOver = true;\n    }\n\n    function isDragging()\n    {\n        return table.classList.contains( \"is-dragging\" );\n    }\n\n    table.addEventListener( \"mouseup\", () => isDragging() && endDrag() );\n\n    table.addEventListener( \"dragenter\", ( ) =>\n    {\n        table.classList.add( \"is-dragging\" );\n    } );\n\n    table.addEventListener( \"dragover\", ( ev ) =>\n    {\n        if ( !table.classList.contains( \"is-dragging\" ) )\n            return;\n\n        const cell = grid.findCellOrNull( ev.offsetY, ev.offsetX );\n\n        if ( !cell )\n            return null;\n\n        console.log( cell.dropDisabled );\n\n        if (\n            // drop \uBE44\uD65C\uC131\uD654\uAC00 false \uC77C\uCE58\uB77C\uBA74 \uBB34\uC870\uAC74 \uC2E4\uD589\n            ( cell.dropDisabled !== false ) && (\n                // header\uC5D0 \uD5C8\uC6A9\uD558\uC9C0 \uC54A\uC740 \uC0C1\uD0DC\uC5D0\uC11C header Cell \uB4DC\uB798\uADF8\n                ( cell.isHeaderCell && enabledOnHeader === false ) ||\n                // disabled\n                ( cell.metaInfo.disabled === true ) ||\n                // readonly\n                ( cell.onCheckReadonly() === true ) ||\n                ( cell.dropDisabled === true )\n            )\n        )\n        {\n            removeDraggingBorder();\n            return null;\n        }\n\n        setDragCell( cell );\n        ev.preventDefault();\n    } );\n\n    table.addEventListener( \"dragleave\", ( ev ) =>\n    {\n        if ( ev.target === table )\n            endDrag();\n        else\n            removeDraggingBorder();\n    } );\n\n    table.addEventListener( \"drop\", ( ev ) =>\n    {\n        try\n        {\n            if ( dragStatus.latestDragOverCell )\n                grid.onDropOnCell( dragStatus.latestDragOverCell.row, dragStatus.latestDragOverCell.col, ev );\n        }\n        finally\n        {\n            endDrag();\n        }\n\n    } );\n}\n\nexport function CellDropPlugin( args = DEFAULT_VALUES )\n{\n    return ( grid: IRGrid, table: HTMLTableElement ) =>\n    {\n        return CellDrop( grid, table, args );\n    };\n}", "import type { IRGridCell } from '../cell';\nimport type { IRGrid } from '../grid';\nimport { getCellElementRowCol } from '../utils';\n\nfunction SingleCellDrag( grid: IRGrid, table: HTMLTableElement )\n{\n    const dragStatus = {\n        cell: null as IRGridCell | null,\n    };\n\n    function releaseDragging()\n    {\n        dragStatus.cell = null;\n        table.draggable = false;\n    }\n\n    function setDragging( cell: IRGridCell )\n    {\n        table.draggable = true;\n        dragStatus.cell = cell;\n    }\n\n    table.addEventListener( \"mousedown\", ( ev ) =>\n    {\n        if ( ev.button !== 0 ) return;\n\n        const curCell = ( ev.target as HTMLElement ).closest( \"td\" );\n\n        if ( !curCell )\n        {\n            releaseDragging();\n            return;\n        }\n\n        const cellAddress = getCellElementRowCol( curCell );\n        const cell = grid.cell( cellAddress.row, cellAddress.col );\n\n        grid.selectCell( cellAddress.row, cellAddress.col );\n\n        if ( cell.metaInfo.draggable === true && cell.metaInfo.object )\n            setDragging( cell );\n        else\n            releaseDragging();\n    } );\n\n    table.addEventListener( \"dragend\", () => releaseDragging() );\n    table.addEventListener( \"dragstart\", ( ev ) =>\n    {\n        if ( !ev.dataTransfer || !dragStatus.cell || !grid.onDragStartCell( dragStatus.cell, ev ) )\n        {\n            ev.preventDefault();\n            return;\n        }\n\n        ev.dataTransfer.setDragImage( dragStatus.cell.element, 10, 10 );\n    } );\n\n}\n\nexport function SingleCellDragPlugin( )\n{\n    return SingleCellDrag;\n}", "import type { IRGridCellMetaInfo } from './cell';\nimport type { IRGrid } from './grid';\n\nexport interface UndoOptions {\n    stackLength: number;\n    disabled: boolean;\n    commandFilter?: CommandKey[];\n}\n\nexport declare type ChangedProperty = {\n    key: keyof IRGridCellMetaInfo;\n    oldValue: string;\n    newValue: string;\n    row: number;\n    col: number;\n}\n\n// TODO: \"MERGE_CELLS\" | \"SPLIT_CELLS\" | \"INSERT_ROWS\" | \"INSERT_COLUMNS\"\n// TODO: Select, DatePicker \uB4F1\uC758 Undo / Redo SetText \uCC98\uB9AC\nexport declare type CommandKey = \"UPDATE_CELLS\" | \"ADD_ROW\" | \"ADD_COLUMN\" | \"CHANGE_COL_WIDTH\" | \"CHANGE_ROW_HEIGHT\"\n\ndeclare interface CommandRunner {\n    undo: () => void;\n    redo: () => void;\n}\n\nexport interface UndoCommand {\n    type: CommandKey;\n    context: unknown;\n    commandRunner: CommandRunner;\n}\n\ndeclare type CommandArgMap = {\n    UPDATE_CELLS: { cellInfoList: ChangedProperty[] };\n    ADD_ROW: { row: number; height?: number };\n    ADD_COLUMN: { col: number; width?: number };\n    CHANGE_COL_WIDTH: { col: number; newSize: number; oldSize: number };\n    CHANGE_ROW_HEIGHT: { row: number; newSize: number; oldSize: number };\n};\n\ninterface UndoCommandArgs<T extends CommandKey> {\n    type: T;\n    context: CommandArgMap[T];\n}\n\nexport class UndoManager\n{\n    private options: UndoOptions;\n    private undoStack: UndoCommand[] = [];\n    private redoStack: UndoCommand[] = [];\n    private grid: IRGrid;\n    private commandFilterSet: Set<string>;\n\n    private readonly commandMap: { [key in CommandKey]: ( context: CommandArgMap[key] ) => CommandRunner};\n\n    constructor( grid: IRGrid, options: UndoOptions )\n    {\n        this.commandFilterSet = new Set( options.commandFilter ?? [] );\n        this.options = options;\n        this.grid = grid;\n\n        this.commandMap = {\n            UPDATE_CELLS: ( { cellInfoList } ) =>\n            {\n                return {\n                    undo: () =>\n                    {\n                        cellInfoList.forEach( ( { row, col, key, oldValue } ) =>\n                            this.grid.setCell( row, col, { [key]: oldValue } ) );\n                    },\n                    redo: () =>\n                    {\n                        cellInfoList.forEach( ( { row, col, key, newValue } ) =>\n                            this.grid.setCell( row, col, { [key]: newValue } ) );\n                    },\n                };\n            },\n            ADD_ROW: ( { row, height } ) =>\n            {\n                return {\n                    undo: () => this.grid.removeRow( row ),\n                    redo: () => this.grid.addRow( height ),\n                };\n            },\n            ADD_COLUMN: ( { col, width } ) =>\n            {\n                return {\n                    undo: () => this.grid.removeColumn( col ),\n                    redo: () => this.grid.addColumn( width ),\n                };\n            },\n            CHANGE_COL_WIDTH: ( { col, newSize, oldSize } ) =>\n            {\n                return {\n                    undo: () => this.grid.setColumnWidth( col, oldSize ),\n                    redo: () => this.grid.setColumnWidth( col, newSize ),\n                };\n            },\n            CHANGE_ROW_HEIGHT: ( { row, newSize, oldSize } ) =>\n            {\n                return {\n                    undo: () => this.grid.setRowHeight( row, oldSize ),\n                    redo: () => this.grid.setRowHeight( row, newSize ),\n                };\n            },\n        };\n    }\n\n    get isDisabled()\n    {\n        return this.options.disabled;\n    }\n\n    clearRedoStacks()\n    {\n        this.redoStack.splice( 0, this.redoStack.length );\n    }\n\n    clearUndoStacks()\n    {\n        this.clearRedoStacks();\n        this.undoStack.splice( 0, this.undoStack.length );\n    }\n\n    pushCommand<T extends CommandKey>( { type, context }: UndoCommandArgs<T> )\n    {\n        if ( this.options.disabled ) return;\n        // \uD544\uD130\uB9C1\uB41C \uCEE4\uB9E8\uB4DC\uB294 \uCD94\uAC00\uD558\uC9C0 \uC54A\uC74C.\n        if ( this.commandFilterSet.has( type ) ) return;\n\n        // length \uCD08\uACFC \uC2DC stack\uC758 \uC55E \uBD80\uBD84 \uCD08\uACFC \uAE38\uC774\uB9CC\uD07C shift\n        if ( this.undoStack.length >= this.options.stackLength )\n            this.undoStack.splice( 0, this.undoStack.length - this.options.stackLength + 1 );\n\n        this.clearRedoStacks();\n\n        if ( !this.commandMap[type] )\n            throw new Error( `Unknown command type ${type}` );\n\n        this.undoStack.push( {\n            type,\n            context,\n            commandRunner: this.commandMap[type]( context ),\n        } );\n\n    }\n\n    undo()\n    {\n        const pop = this.undoStack.pop();\n\n        if ( pop )\n        {\n            pop.commandRunner.undo();\n            this.redoStack.push( pop );\n\n            return pop;\n        }\n    }\n\n    redo( )\n    {\n        const pop = this.redoStack.pop();\n\n        if ( pop )\n        {\n            pop.commandRunner.redo();\n            this.undoStack.push( pop );\n\n            return pop;\n        }\n    }\n}", "import _ from 'lodash';\n\nimport { IRGrid } from './grid';\n\nexport declare type VirtualRenderer = ReturnType<typeof createVirtualRenderer>\n\nconst ADJUST_SIZE = 200;\nconst BORDER_SIZE = 1;\n\nexport const createVirtualRenderer = ( grid: IRGrid, tbody: HTMLTableSectionElement ) =>\n{\n    const tmpRow = document.createElement( \"tr\" );\n\n    tmpRow.setAttribute( \"data-row\", \"temp\" );\n\n    return {\n\n        render: () =>\n        {\n            const scrollBottom = grid.scrollBottom + ADJUST_SIZE;\n\n            grid.getRowLodash()\n                .takeWhile( ( row ) => row.top <= scrollBottom )\n                .filter( ( row ) => !row.isMounted )\n                .forEach( ( row ) => row.mount( tbody ) );\n        },\n    };\n};", "import { IRGridCellMetaInfo } from \"../cell\";\n\nimport clsCheck from \"@components/checkbox/checkbox.classNames\";\nimport { getTextWidthContext } from '@utils';\n\nexport type GridCheckboxClickEvent = ( _row: number, _col: number, _checked: boolean ) => void;\nexport interface RenderGridCheckboxArgs {\n    onCheckboxClick?: GridCheckboxClickEvent;\n}\n\nconst CHECKBOX_DEFAULT_SIZE = 16;\nconst CHECKBOX_DEFAULT_GAP = 6;\nconst CHECKBOX_DEFAULT_MARGIN = 6 * 2;\n\nexport const renderGridCheckbox = ( { onCheckboxClick }: RenderGridCheckboxArgs ) =>\n{\n    const checkboxCellInnerWidth = ( cell: HTMLTableCellElement, metaInfo: IRGridCellMetaInfo ) =>\n    {\n        const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n        const labelWidth = metaInfo.label ? CHECKBOX_DEFAULT_GAP + context.calculateWidth( metaInfo.label ) : 0;\n\n        return CHECKBOX_DEFAULT_SIZE + CHECKBOX_DEFAULT_MARGIN + labelWidth;\n    };\n\n    return ( row: number, col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const div = document.createElement( \"div\" );\n        const label = document.createElement( \"label\" );\n        const checkbox = document.createElement( \"input\" );\n\n        // \uCCB4\uD06C\uBC15\uC2A4 editable \uBE44\uD65C\uC131\uD654\n        data.cellType = \"checkbox\";\n        data.editable = false;\n        data.onCalculateWidth = checkboxCellInnerWidth;\n\n        div.className = clsCheck.checkbox.blockElementName;\n        label.className = clsCheck.checkboxWrapper.blockElementName;\n\n        checkbox.type = \"checkbox\";\n        checkbox.className = clsCheck.checkboxInput.blockElementName;\n\n        label.appendChild( checkbox );\n        if ( data.label )\n        {\n            const span = document.createElement( \"span\" );\n\n            span.className = clsCheck.text.blockElementName;\n            span.innerText = data.label;\n            label.appendChild( span );\n        }\n\n        div.appendChild( label );\n\n        checkbox.checked = data.text === \"true\";\n        label.onkeydown = ( ev ) => ev.preventDefault();\n        checkbox.onchange = () =>\n        {\n            data.text = checkbox.checked ? \"true\" : \"false\";\n            data.emitter.emit( \"onCellInfoChanged\", { row, col } );\n            onCheckboxClick && onCheckboxClick( row, col, checkbox.checked );\n        };\n\n        return div;\n    };\n};", "import { createPopper, Instance } from \"@popperjs/core\";\n\nimport { IRGridCellMetaInfo } from \"../cell\";\nimport clsGrid from \"../grid.classNames\";\n\nimport { IRSelectItem, createDropdownDiv, createDropdownItem } from \"@js-comp\";\nimport clsSelect from \"@js-comp/select/select.classNames\";\nimport { createClickOutsideHandler, getTextWidthContext, createESCHideController } from \"@utils\";\n\nexport type GridComboBoxChangeEvent = ( _row: number, _col: number, _value: string, _text: string, _beforeValue: string | undefined, _beforeText: string | undefined ) => void;\nexport interface RenderGridSelectArgs {\n    items: IRSelectItem[];\n    onChange?: GridComboBoxChangeEvent;\n}\n\ntype DropDownItem = {\n    value: string;\n    text: string;\n    itemWrapperElement: HTMLElement;\n    buttonElement: HTMLElement;\n}\n\nconst DEFAULT_MARGIN = 30;\n\nexport const renderGridSelect = ( { items, onChange }: RenderGridSelectArgs ) =>\n{\n    const { divDropdown, ulItems } = createDropdownDiv();\n    const dropDownItemList: DropDownItem[] = [];\n\n    let beforeValue: string | undefined;\n    let beforeText: string | undefined;\n    let popper: Instance | null = null;\n\n    for ( const { value, text } of items )\n    {\n        const { item, button } = createDropdownItem( value, text );\n\n        dropDownItemList.push( { value, text, buttonElement: button, itemWrapperElement: item } );\n        ulItems.appendChild( item );\n    }\n\n    const selectCellInnerWidth = ( cell: HTMLTableCellElement, _metaInfo: IRGridCellMetaInfo ) =>\n    {\n        const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n\n        const max = items.reduce( ( width, item ) => Math.max( width, context.calculateWidth( item.text ) ), 0 );\n\n        return DEFAULT_MARGIN + max;\n    };\n\n    return ( row: number, col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const div = document.createElement( \"div\" );\n        const input = document.createElement( \"input\" );\n        const icon = document.createElement( \"i\" );\n\n        data.cellType = \"select\";\n        data.editable = false;\n        data.onCalculateWidth = selectCellInnerWidth;\n\n        div.classList.add ( clsGrid.cell.select, clsSelect.select.blockElementName, clsSelect.selectInput.blockElementName );\n        input.classList.add ( clsSelect.selectInputNative.blockElementName );\n        icon.classList.add ( clsSelect.selectInputIcon.blockElementName, \"ir-icon\", \"ir-icon--chevron-down\" );\n\n        input.type = \"text\";\n        input.readOnly = true;\n\n        // \uD604\uC7AC text\uC640 \uAC19\uC740 \uAC12\uC774 \uC788\uB2E4\uBA74 \uC124\uC815\n        dropDownItemList\n            .filter( ( item ) => item.text === data.text )\n            .forEach( ( item ) =>\n            {\n                input.value = item.text;\n                data.value = item.value;\n            } );\n\n        const outsideHandler = createClickOutsideHandler( {\n            eventElements: [div, divDropdown],\n            clickOutsideFunc: () => objHandler.hide(),\n        } );\n\n        const objHandler = {\n            show: () =>\n            {\n                popper = createPopper( div, divDropdown, {\n                    placement: \"bottom-end\",\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [0, 8],\n                            },\n                        },\n                    ],\n                } );\n\n                escController.create();\n                outsideHandler.create();\n                beforeValue = data.value;\n                beforeText = data.text;\n\n                for ( const { value, text, itemWrapperElement, buttonElement } of dropDownItemList )\n                {\n                    if ( text === data.text )\n                        itemWrapperElement.classList.add( \"is-selected\" );\n                    else\n                        itemWrapperElement.classList.remove( \"is-selected\" );\n\n                    buttonElement.onclick = () =>\n                    {\n                        data.text = text;\n                        data.value = value;\n                        input.value = text;\n                        data.emitter.emit( \"onCellInfoChanged\", { row, col } );\n                        data.emitter.emit( \"updateCellStatus\", { row, col } );\n                        onChange?.call( null, row, col, value, text, beforeValue, beforeText );\n                        objHandler.hide();\n                    };\n                }\n\n                divDropdown.style.width = `${div.offsetWidth}px`;\n                divDropdown.setAttribute( \"data-row\", row.toString() );\n                divDropdown.setAttribute( \"data-col\", col.toString() );\n                document.body.appendChild( divDropdown );\n\n                div.classList.add( clsSelect.select['is-expanded'] );\n\n                requestAnimationFrame( () =>\n                {\n                    divDropdown.classList.add( clsSelect.select['is-expanded'] );\n                } );\n            },\n            hide: () =>\n            {\n                escController.destroy();\n                outsideHandler.destroy();\n\n                div.classList.remove( clsSelect.select['is-expanded'] );\n                divDropdown.classList.remove( clsSelect.select['is-expanded'] );\n\n                divDropdown.addEventListener( \"transitionend\", () =>\n                {\n\n                    if ( divDropdown.getAttribute( \"data-row\" ) === row.toString() &&\n                    divDropdown.getAttribute( \"data-col\" ) === col.toString() )\n                    {\n                        popper?.destroy();\n                        divDropdown.remove();\n                    }\n                }, { once: true } );\n            },\n        };\n        const escController = createESCHideController( objHandler );\n\n        const onToggle = () =>\n        {\n            if ( !div.classList.contains( clsSelect.select[\"is-expanded\"] ) )\n                objHandler.show();\n            else\n                objHandler.hide();\n        };\n\n        div.onclick = () => onToggle();\n\n        div.appendChild( input );\n        div.appendChild( icon );\n\n        return div;\n    };\n};", "import moment from \"moment\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { IRGridCellMetaInfo } from \"../cell\";\nimport clsGrid from \"../grid.classNames\";\n\nimport clsInput from \"@components/input/input.classNames\";\nimport i18n from '@i18n';\nimport { createDatePickerHandler } from \"@js-comp/datePicker/datePicker.handler\";\nimport { getTextWidthContext } from '@utils';\n\nexport type GridDatePickerClickEvent = ( _row: number, _col: number, _text: string ) => void;\nexport interface RenderDatePickerArgs {\n    onDateClick?: GridDatePickerClickEvent;\n    format?: string;\n    minDate?: Date;\n    maxDate?: Date;\n}\n\nconst DEFAULT_MARGIN = 24;\n\nexport const renderGridDatePicker = ( { onDateClick, format = i18n.datePicker.dateFormat, minDate = new Date( 0 ), maxDate = new Date( \"9999-12-31\" ) }: RenderDatePickerArgs ) =>\n{\n    const datePickerCellInnerWidth = ( cell: HTMLTableCellElement, metaInfo: IRGridCellMetaInfo ) =>\n    {\n        const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n\n        return context.calculateWidth( metaInfo.text || format ) + DEFAULT_MARGIN;\n    };\n\n    return ( row: number, col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const div = document.createElement( \"div\" );\n        const input = document.createElement( \"input\" );\n        const btn = document.createElement( \"button\" );\n        const icon = document.createElement( \"i\" );\n\n        data.cellType = \"datePicker\";\n        data.onCalculateWidth = datePickerCellInnerWidth;\n\n        input.readOnly = true;\n        input.maxLength = format.length;\n\n        div.classList.add( clsInput.input.blockElementName, clsGrid.cell['date-picker'] );\n        input.classList.add( clsInput.inputNative.blockElementName );\n        btn.classList.add( clsInput.inputSuffix.blockElementName );\n        icon.classList.add( \"ir-icon\", \"ir-icon--calendar\" );\n\n        input.type = \"text\";\n        input.placeholder = format;\n\n        // data.text format \uAC80\uC0AC\n        if ( moment( data.text, format, true ).isValid() === false )\n            data.text = \"\";\n        else\n        {\n            // \uC720\uD6A8\uD55C \uACBD\uC6B0 min max \uBC94\uC704 \uAC80\uC0AC\n            const textMoment = moment( data.text, format );\n\n            if ( textMoment.isBefore( minDate ) || textMoment.isAfter( maxDate ) )\n                data.text = \"\";\n        }\n\n        input.value = data.text || \"\";\n\n        btn.appendChild( icon );\n        div.appendChild( input );\n        div.appendChild( btn );\n\n        const datePickerHandler = createDatePickerHandler( {\n            uuid: uuid(),\n            refElement: div,\n            minDate,\n            maxDate,\n            onClick: ( dt ) =>\n            {\n                const text = moment( dt ).format( format );\n\n                input.value = text;\n                data.text = text;\n                onDateClick?.call( null, row, col, text );\n                data.emitter.emit( \"onCellInfoChanged\", { row, col } );\n                datePickerHandler.hide();\n            },\n        } );\n\n        btn.onclick = () =>\n        {\n            if ( !datePickerHandler.visible )\n            {\n                const check = moment( data.text, format, true );\n\n                if ( check.isValid() )\n                    datePickerHandler.update( check.toDate(), check.toDate() );\n                else\n                    datePickerHandler.update( new Date(), null );\n\n                datePickerHandler.show( );\n            }\n        };\n\n        return div;\n    };\n};", "import { BEMClass } from \"@utils\";\n\nconst block = \"progress\";\n\nexport default {\n    progress: BEMClass( { block, modifier: [\"danger\", \"warning\", \"info\", \"tertiary\", \"secondary\"] } ),\n    bar: BEMClass( { block, element: \"bar\" } ),\n    VALUE_PROPERTY: \"--progress-value\",\n    PERCENT_PROPERTY: \"--progress-percent\",\n};", "import { IRGridCellMetaInfo } from \"../cell\";\nimport clsGrid from \"../grid.classNames\";\n\nimport clsProgress from \"@components/progress/progress.classNames\";\nimport { IRIntent } from \"@types\";\nimport { getMinMaxBetween, getTextWidthContext } from '@utils';\n\nexport interface RendererGridProgressArgs {\n    min?: number;\n    max?: number;\n    defaultIntent?: IRIntent;\n    afterDecimalLen?: number;\n}\n\nconst DEFAULT_MARGIN = 24;\n\nexport const renderGridProgress = ( { min = 0, max = 100, defaultIntent, afterDecimalLen = 2 }: RendererGridProgressArgs ) =>\n{\n\n    return ( _row: number, _col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const wrapper = document.createElement( \"div\" );\n        const progress = document.createElement( \"div\" );\n\n        wrapper.className = clsGrid.cellProgress.blockElementName;\n        progress.className = clsProgress.progress.blockElementName;\n\n        const intent = data.intent ?? defaultIntent;\n\n        if ( intent )\n            progress.classList.add( clsProgress.progress[intent] );\n\n        data.cellType = \"progress\";\n        data.editable = false;\n        data.onCalculateWidth = ( cell ) =>\n        {\n            const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n\n            return context.calculateWidth( progress.style.getPropertyValue( clsProgress.VALUE_PROPERTY ) ) + DEFAULT_MARGIN;\n        };\n\n        const value = getMinMaxBetween( parseFloat( data.text || \"0\" ), min, max );\n        const percent = ( value - min ) / max * 100;\n\n        progress.style.setProperty( clsProgress.VALUE_PROPERTY, `'${percent.toFixed( afterDecimalLen )}%'` );\n        progress.style.setProperty( clsProgress.PERCENT_PROPERTY, `${percent}%` );\n\n        wrapper.appendChild( progress );\n\n        return wrapper;\n    };\n};", "import { IRGridCellMetaInfo } from \"../cell\";\nimport clsGrid from \"../grid.classNames\";\n\nimport clsButton from \"@components/button/button.classNames\";\nimport { IRStyleColor } from \"@types\";\nimport { getTextWidthContext } from '@utils';\n\nexport type IRGridButtonClickHandler = ( _ev: MouseEvent, _row: number, _col: number ) => void;\n\nexport interface RendererGridButtonArgs {\n    onClick?: IRGridButtonClickHandler;\n    defaultColor?: IRStyleColor;\n    defaultLabel?: string;\n    defaultIcon?: string;\n}\n\nconst DEFAULT_MARGIN = 14;\nconst DEFAULT_ICON_SIZE = 26;\n\nexport const renderGridButton = ( { onClick, defaultColor = \"transparent\", defaultLabel, defaultIcon }: RendererGridButtonArgs ) =>\n{\n\n    const buttonCellInnerWidth = ( cell: HTMLTableCellElement, metaInfo: IRGridCellMetaInfo ) =>\n    {\n        const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n        const icon = metaInfo.icon || defaultIcon;\n        const label = metaInfo.label || defaultLabel;\n        const labelWidth = context.calculateWidth( label || \"\" ) + ( icon ? DEFAULT_ICON_SIZE : 0 );\n\n        return DEFAULT_MARGIN + labelWidth;\n    };\n\n    return ( row: number, col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const wrapper = document.createElement( \"div\" );\n        const button = document.createElement( \"button\" );\n\n        wrapper.className = clsGrid.cell.button;\n\n        data.editable = false;\n        data.onCalculateHeight = () => 24;\n        data.onCalculateWidth = buttonCellInnerWidth;\n        button.className = clsButton.button.blockElementName;\n\n        const color = data.intent ?? defaultColor;\n\n        if ( color )\n            button.classList.add( clsButton.button[color as IRStyleColor] );\n\n        if ( onClick )\n            button.onclick = ( ev ) => onClick( ev, row, col );\n\n        const icon = data.icon || defaultIcon;\n        const text = ( data.label ?? defaultLabel ) || \"\";\n\n        if ( icon )\n        {\n            const iconElement = document.createElement( \"i\" );\n            const span = document.createElement( \"span\" );\n\n            iconElement.classList.add( clsButton.buttonIcon.blockElementName, \"ir-icon\", `ir-icon--${icon}` );\n            span.innerText = text;\n\n            button.appendChild( iconElement );\n            button.appendChild( span );\n        }\n        else\n            button.innerText = text;\n\n        wrapper.appendChild( button );\n\n        return wrapper;\n    };\n};", "import { BEMClass } from \"@utils\";\n\nconst block = \"radio\";\n\nexport default {\n    radio: BEMClass( { block } ),\n    radioWrapper: BEMClass( { block, element: \"wrapper\" } ),\n    radioInput: BEMClass( { block, element: \"input\" } ),\n    text: BEMClass( { block, element: \"text\" } ),\n};", "import { IRGridCellMetaInfo } from \"../cell\";\n\nimport clsRadio from \"@components/radio/radio.classNames\";\nimport { getTextWidthContext } from '@utils';\n\nexport type GridRadioClickEvent = ( _row: number, _col: number ) => void;\n\nexport interface RenderGridRadioArgs {\n    onRadioClick?: GridRadioClickEvent;\n}\n\nconst RADIO_DEFAULT_SIZE = 16;\nconst RADIO_DEFAULT_GAP = 6;\nconst RADIO_DEFAULT_MARGIN = 6 * 2;\n\ndeclare type RadioItem = {\n    radio: HTMLInputElement;\n    data: IRGridCellMetaInfo;\n    row: number;\n    col: number;\n}\n\nexport const renderGridRadio = ( { onRadioClick }: RenderGridRadioArgs ) =>\n{\n    let lastClickedRadio: RadioItem | null = null;\n\n    const radioCellInnerWidth = ( cell: HTMLTableCellElement, metaInfo: IRGridCellMetaInfo ) =>\n    {\n        const context = getTextWidthContext( cell.style.fontSize, cell.style.fontFamily );\n        const labelWidth = metaInfo.label ? RADIO_DEFAULT_GAP + context.calculateWidth( metaInfo.label ) : 0;\n\n        return RADIO_DEFAULT_SIZE + RADIO_DEFAULT_MARGIN + labelWidth;\n    };\n\n    const changeRadioButton = ( item: RadioItem ) =>\n    {\n        // \uB9C8\uC9C0\uB9C9 \uD074\uB9AD radio\uC640 \uB2EC\uB77C\uC57C \uD568.\n        if ( lastClickedRadio &&\n            !( item.col === lastClickedRadio.col && item.row === lastClickedRadio.row ) )\n        {\n            lastClickedRadio.radio.checked = false;\n            lastClickedRadio.data.text = \"false\";\n            lastClickedRadio.data.emitter.emit( \"onCellInfoChanged\", { row: item.row, col: item.col } );\n        }\n\n        lastClickedRadio = item;\n    };\n\n    return ( row: number, col: number, data: IRGridCellMetaInfo ) =>\n    {\n        const div = document.createElement( \"div\" );\n        const label = document.createElement( \"label\" );\n        const radio = document.createElement( \"input\" );\n\n        // \uCCB4\uD06C\uBC15\uC2A4 editable \uBE44\uD65C\uC131\uD654\n        data.cellType = \"radio\";\n        data.editable = false;\n        data.onCalculateWidth = radioCellInnerWidth;\n\n        div.className = clsRadio.radio.blockElementName;\n        label.className = clsRadio.radioWrapper.blockElementName;\n\n        radio.type = \"radio\";\n        radio.className = clsRadio.radioInput.blockElementName;\n\n        label.appendChild( radio );\n        if ( data.label )\n        {\n            const span = document.createElement( \"span\" );\n\n            span.className = clsRadio.text.blockElementName;\n            span.innerText = data.label;\n            label.appendChild( span );\n        }\n\n        div.appendChild( label );\n\n        radio.checked = data.text === \"true\";\n\n        // \uCCB4\uD06C\uB41C \uACBD\uC6B0 \uB9C8\uC9C0\uB9C9 \uD074\uB9AD \uC544\uC774\uD15C\uC73C\uB85C \uCD94\uAC00\n        if ( radio.checked === true )\n            changeRadioButton( { radio, data, row, col } );\n\n        label.onkeydown = ( ev ) => ev.preventDefault();\n        radio.onclick = () =>\n        {\n            changeRadioButton( { radio, data, row, col } );\n\n            data.text = \"true\";\n            data.emitter.emit( \"onCellInfoChanged\", { row, col } );\n            onRadioClick && onRadioClick( row, col );\n        };\n\n        return div;\n    };\n};", "import type { IRGridCell } from './cell';\nimport type { IRGrid } from \"./grid\";\n\nconst convertToNumber = ( text: string | undefined ) =>\n{\n    // \uBE48 \uAC12\uC774\uB098 undefined, null\uC740 MAX_VALUE \uC74C\uC218\uB85C \uCC98\uB9AC\n    if ( text === \"\" || !text ) return -Number.MAX_SAFE_INTEGER;\n\n    return parseInt( text, 10 );\n};\n\nexport const createIRGridColumnSortManager = ( grid: IRGrid ) =>\n{\n    const numberSet = new Set<number>();\n\n    let latestClickCell: IRGridCell | null = null;\n    let enabledColumnClick = true;\n\n    return {\n        set enabledColumnClick( flag: boolean )\n        {\n            enabledColumnClick = flag;\n        },\n        clearNumberColumns()\n        {\n            numberSet.clear();\n        },\n        clearSortOrder()\n        {\n            if ( latestClickCell )\n                latestClickCell.cellInfo = { sortOrder: undefined };\n\n            latestClickCell = null;\n        },\n        removeNumberColumns( ...num: number[] )\n        {\n            num.forEach( ( n ) => numberSet.delete( n ) );\n        },\n        setNumberColumns( ...num: number[] )\n        {\n            num.forEach( ( n ) => numberSet.add( n ) );\n        },\n        compareTo( a: IRGridCell, b: IRGridCell ): number\n        {\n            // \uAE30\uBCF8\uC801\uC73C\uB85C \uC140\uC758 text\uC640 \uBE44\uAD50\uD568\n            // numberSet\uC5D0 \uC788\uB294 column\uC778 \uACBD\uC6B0 number\uB85C \uBCC0\uD658 \uD6C4 \uBE44\uAD50\n            const aValue = numberSet.has( a.col ) ? convertToNumber( a.text ) : a.text;\n            const bValue = numberSet.has( b.col ) ? convertToNumber( b.text ) : b.text;\n\n            if ( aValue < bValue )\n                return -1;\n            else if ( aValue > bValue )\n                return 1;\n\n            return 0;\n        },\n        overrideColumnClickEvent()\n        {\n            console.debug( `Overrode IRGrid Column Sort Manager target-uuid::${grid.uuid}` );\n\n            grid.onColumnClick = ( cell ) =>\n            {\n                if ( !enabledColumnClick ) return;\n\n                this.toggleSortColumn( cell );\n            };\n        },\n        sortColumn( col: number, order: \"ASC\" | \"DESC\" )\n        {\n            grid.sort( ( a, b ) =>\n            {\n                return this.compareTo( a.getCell( col ), b.getCell( col ) );\n            }, order );\n        },\n        toggleSortColumn( cell: IRGridCell )\n        {\n            if ( cell.cellType !== \"col-header\" )\n                throw new Error( `Can only execute in col-header` );\n\n            const order = cell.cellInfo.sortOrder === \"ASC\" ? \"DESC\" : \"ASC\";\n\n            // \uC774\uC804 \uD074\uB9AD \uC140\uC774 \uC788\uB2E4\uBA74 order \uC81C\uAC70\n            if ( latestClickCell !== cell )\n                this.clearSortOrder();\n\n            latestClickCell = cell;\n\n            cell.cellInfo = { sortOrder: order };\n            this.sortColumn( cell.col, order );\n        },\n    };\n};"],
  "mappings": "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",
  "names": ["require_emittery", "__commonJSMin", "exports", "module", "anyMap", "eventsMap", "producersMap", "anyProducer", "resolvedPromise", "listenerAdded", "listenerRemoved", "isGlobalDebugEnabled", "assertEventName", "eventName", "assertListener", "listener", "getListeners", "instance", "events", "getEventProducers", "key", "producers", "enqueueProducers", "eventData", "producer", "item", "iterator", "eventNames", "isFinished", "flush", "queue", "__async", "resolve", "_0", "value", "defaultMethodNamesOrAssert", "methodNames", "allEmitteryMethods", "methodName", "isListenerSymbol", "symbol", "Emittery", "emitteryPropertyName", "target", "getEmitteryProperty", "emitteryMethodCaller", "args", "env", "newValue", "options", "type", "debugName", "e", "currentTime", "logTime", "off", "data", "listeners", "anyListeners", "staticListeners", "staticAnyListeners", "count", "v", "import_emittery", "import_lodash", "import_lodash", "block", "grid_classNames_default", "BEMClass", "import_lodash", "GRID_HEIGHT_PROPERTY", "IRGridRow", "row", "height", "rowType", "top", "cell", "grid_classNames_default", "zId", "color", "value", "visible", "rowHeight", "h", "_a", "left", "right", "_", "col", "removedCols", "cells", "target", "id", "c", "minSize", "maxSize", "autoHeight", "getMinMaxBetween", "fixedColCount", "tbody", "_row", "_height", "checkContainsInRange", "row", "col", "range", "checkRowContainsInRange", "checkColContainsInRange", "getCellElementRowCol", "cell", "toggleClass", "element", "cls", "addFlag", "getCellInnerHeight", "child", "maxHeight", "grandChild", "DEFAULT_ROW_PADDING", "calculateCellInnerHeight", "cell", "_metaInfo", "getCellInnerHeight", "calculateCellInnerWidth", "metaInfo", "context", "getTextWidthContext", "iconWidth", "count", "icon", "lines", "firstLine", "_", "width", "line", "deactivationClsList", "grid_classNames_default", "IRGridCell", "row", "col", "tag", "cellRenderer", "__spreadValues", "ev", "text", "visible", "flag", "cellInfo", "type", "height", "GRID_HEIGHT_PROPERTY", "rowSpan", "colSpan", "renderer", "toggleClass", "data", "_a", "textareaWrapper", "textarea", "beforeText", "endEditHandler", "changed", "endKeyCode", "onBlurHandler", "cursorHandler", "start", "_cell", "_ev", "_isChanged", "_beforeText", "_endKeyCode", "_selStart", "_selEnd", "_row", "_col", "_meta", "_ctrlKey", "_shiftKey", "classList", "cls", "createCellContent", "data", "_a", "div", "text", "grid_classNames_default", "icon", "iconElement", "createCellContentWithIconButton", "row", "col", "onClick", "button", "ev", "renderGridCellDefault", "_row", "_col", "renderGridCellIconButton", "renderRowNoHeaderCell", "fixedRowCount", "prevCaptionList", "r", "cellText", "import_lodash", "getNextToken", "ch", "createGridClipboardManager", "grid", "selection", "lineBuffer", "_", "row", "buffer", "col", "text", "payload", "data", "trimmedPayload", "line", "id", "processNextLine", "addText", "start", "end", "processQuotesText", "startId", "processPlainText", "loop", "processTab", "createGridCellCursorManager", "grid", "getNextYAbove", "row", "col", "y", "_a", "startRow", "counter", "nextRow", "currentCell", "tmpRow", "getNextYBelow", "endRow", "getNextXLeft", "x", "startCol", "nextCol", "tmpCol", "getNextXRight", "endCol", "getFirstActiveColumn", "getLastActiveColumn", "getFirstActiveRow", "getLastActiveRow", "getNextActiveRow", "getBeforeActiveRow", "beforeRow", "selectNextActiveCell", "activeCell", "mainCell", "firstCol", "selectBeforeActiveCell", "lastCol", "getColIdWithMaximumRowSpanInRow", "left", "right", "maxRowSpan", "colId", "cell", "rowSpan", "getMaximumBottomByRow", "maxBottom", "bottom", "getMinimumTopByRow", "minTop", "getRowIdWithMaximumColSpanInCol", "top", "maxColSpan", "rowId", "colSpan", "getMaximumRightByColumn", "maxRight", "getMinimumLeftByColumn", "minLeft", "isExpanding", "selection", "nextTop", "nextBottom", "nextLeft", "nextRight", "isExtending", "lastRow", "firstRow", "initIRGridEmitter", "grid", "emitter", "cellAddress", "import_lodash", "createIRGridFinder", "grid", "args", "finderOptions", "found", "getStartRow", "getStartCol", "CellGenerator", "row", "col", "selection", "checkColContainsInRange", "checkRowContainsInRange", "checkContainsInRange", "isMatched", "cell", "escaped", "pattern", "flag", "regexp", "generator", "options", "_", "it", "list", "createGridCellGenerator", "grid", "top", "left", "bottom", "right", "r", "c", "cell", "createCommandManager", "grid", "undoManager", "cellGenerator", "createGridCellGenerator", "commandHandler", "col", "width", "oldSize", "row", "height", "args", "range", "cellInfoList", "cell", "beforeText", "text", "command", "import_lodash", "createMergeHandler", "grid", "mergeList", "generator", "createGridCellGenerator", "isValidatedMerging", "top", "left", "bottom", "right", "_", "mergeArea", "getRowSpanCount", "r", "cnt", "getColSpanCount", "c", "isContainedHiddenCell", "row", "col", "getMergeCell", "cell", "id", "handler", "height", "range", "mergeMain", "info", "rowId", "columnId", "COL_INTERACTION_SIZE", "ROW_INTERACTION_SIZE", "getColumnNo", "cell", "getRowNo", "Resizer", "grid", "context", "enabledColResizer", "enabledRowResizer", "divGuide", "isResizing", "latestContextDownHandler", "latestClickedTime", "resetCursor", "grid_classNames_default", "setCursor", "eventCell", "clsResizing", "initXY", "minXY", "maxXY", "startXY", "size", "getGuideX", "getGuideY", "ev", "curTime", "getCssText", "docKeyDownHandler", "docMouseUpHandler", "docMouseMoveHandler", "diff", "getMinMaxBetween", "removeAllEvents", "getHeaderCellOrNull", "clsResizing2", "getMouseCursorTypeOrNull", "contextMouseMoveHandler", "contextMouseOutHandler", "_ev", "curCell", "row", "col", "ResizerPlugin", "options", "table", "__spreadValues", "import_lodash", "import_lodash", "createGridSelector", "grid", "generator", "createGridCellGenerator", "extendRange", "range", "newRange", "_", "stack", "cur", "mergeArea", "cell", "trimRange", "trimmedRange", "beginRow", "beginCol", "endRow", "endCol", "getMinMaxBetween", "trim", "header", "extend", "r", "c", "MouseCellSelector", "grid", "table", "startCell", "selector", "createGridSelector", "ev", "curCell", "cellAddress", "getCellElementRowCol", "cell", "row", "col", "range", "extendRange", "_", "MouseCellSelectorPlugin", "DefaultKey", "grid", "_table", "context", "textArea", "generator", "createGridCellGenerator", "selectNextActiveCell", "selectNextSelection", "selectBeforeActiveCell", "selectMoveToFirstRow", "selectMoveToFirstColumn", "selectMoveToLastColumn", "selectMoveToLastRow", "createGridCellCursorManager", "grid_classNames_default", "ev", "_a", "cell", "keyFuncMap", "_", "selection", "_ev", "DefaultKeyPlugin", "RowSelection", "grid", "table", "startCell", "selector", "createGridSelector", "ev", "curCell", "cellAddress", "getCellElementRowCol", "RowSelectionPlugin", "ColumnFill", "grid", "table", "contextElement", "fillColumns", "from", "display", "width", "col", "ColumnFillPlugin", "CellObserver", "grid", "onCellInfoChanged", "handler", "row", "col", "pluginController", "CellObserverPlugin", "option", "DEFAULT_VALUES", "CellDrop", "grid", "table", "enabledOnHeader", "dragStatus", "endDrag", "removeDraggingBorder", "setDragCell", "cell", "isDragging", "ev", "CellDropPlugin", "args", "SingleCellDrag", "grid", "table", "dragStatus", "releaseDragging", "setDragging", "cell", "ev", "curCell", "cellAddress", "getCellElementRowCol", "SingleCellDragPlugin", "UndoManager", "grid", "options", "_a", "cellInfoList", "row", "col", "key", "oldValue", "newValue", "height", "width", "newSize", "oldSize", "type", "context", "pop", "ADJUST_SIZE", "createVirtualRenderer", "grid", "tbody", "scrollBottom", "ADJUST_SIZE", "row", "ROW_BORDER_SIZE", "CELL_WIDTH_PADDING", "DEFAULT_UNDO_OPTIONS", "IRGrid", "IRComponent", "contextElement", "colHeader", "rowHeader", "body", "defaultColumnCellFormat", "plugins", "undoManagerOptions", "UndoManager", "createCommandManager", "createGridCellCursorManager", "key", "value", "defaultCellRenderer", "renderGridCellDefault", "grid_classNames_default", "ev", "DefaultKeyPlugin", "MouseCellSelectorPlugin", "CellDropPlugin", "ResizerPlugin", "createMergeHandler", "createVirtualRenderer", "createGridClipboardManager", "createGridSelector", "Emittery", "initIRGridEmitter", "offsetX", "offsetY", "target", "lastFixedRow", "_", "row", "width", "col", "height", "cell", "_a", "_b", "flag", "plugin", "top", "left", "bottom", "right", "scrollTop", "searchStatus", "curRow", "scrollLeft", "curLeft", "curRight", "sum", "c", "id", "targetRow", "targetTop", "targetBottom", "scrollBottom", "fixedRowHeight", "fixedScrollTop", "targetLeft", "targetRight", "fixedColumnWidth", "scrollRight", "fixedScrollLeft", "colElement", "w", "getMinMaxBetween", "gridRow", "color", "obj", "cellInfo", "removedRows", "tmpTop", "tmp", "count", "size", "tmpRowList", "tmpHeight", "lastSelection", "tmpCellList", "changed", "maxWidth", "a", "b", "checkIsChanged", "r", "ClipboardManager", "command", "payload", "cellCopyMetaInfoList", "selection", "data", "pasteRange", "pastingList", "dataSize", "y", "x", "get2DGenerator", "text", "cellCopyMetaInfo", "range", "visible", "args", "createIRGridFinder", "freezingRowCount", "headerRows", "firstRowElement", "element", "columnId", "copyOptions", "commandKey", "compareFunc", "order", "cloneRows", "state", "_cell", "_colId", "_isChanged", "_beforeText", "_endKeyCode", "_selStart", "_selEnd", "_selection", "_ev", "_event", "_row", "_col", "_data", "_text", "_range", "pastingText", "cellMetaInfoBuffer", "generator", "createGridCellGenerator", "copyText", "_command", "isChanged", "beforeText", "err", "headerRow", "rowCnt", "colCnt", "shiftKey", "nextRow", "endKeyCode", "selStart", "selEnd", "meta", "isColHeader", "isRowHeader", "tag", "cellRenderer", "IRGridCell", "__spreadProps", "__spreadValues", "start", "startRow", "maxHeight", "IRGridRow", "mergeMain", "CHECKBOX_DEFAULT_SIZE", "CHECKBOX_DEFAULT_GAP", "CHECKBOX_DEFAULT_MARGIN", "renderGridCheckbox", "onCheckboxClick", "checkboxCellInnerWidth", "cell", "metaInfo", "context", "getTextWidthContext", "labelWidth", "row", "col", "data", "div", "label", "checkbox", "checkbox_classNames_default", "span", "ev", "DEFAULT_MARGIN", "renderGridSelect", "items", "onChange", "divDropdown", "ulItems", "createDropdownDiv", "dropDownItemList", "beforeValue", "beforeText", "popper", "value", "text", "item", "button", "createDropdownItem", "selectCellInnerWidth", "cell", "_metaInfo", "context", "getTextWidthContext", "max", "width", "row", "col", "data", "div", "input", "icon", "grid_classNames_default", "select_classNames_default", "outsideHandler", "createClickOutsideHandler", "objHandler", "createPopper", "escController", "itemWrapperElement", "buttonElement", "createESCHideController", "onToggle", "import_moment", "DEFAULT_MARGIN", "renderGridDatePicker", "onDateClick", "format", "i18n_default", "minDate", "maxDate", "datePickerCellInnerWidth", "cell", "metaInfo", "getTextWidthContext", "row", "col", "data", "div", "input", "btn", "icon", "input_classNames_default", "grid_classNames_default", "moment", "textMoment", "datePickerHandler", "createDatePickerHandler", "v4_default", "dt", "text", "check", "block", "progress_classNames_default", "BEMClass", "DEFAULT_MARGIN", "renderGridProgress", "min", "max", "defaultIntent", "afterDecimalLen", "_row", "_col", "data", "_a", "wrapper", "progress", "grid_classNames_default", "progress_classNames_default", "intent", "cell", "getTextWidthContext", "percent", "getMinMaxBetween", "DEFAULT_MARGIN", "DEFAULT_ICON_SIZE", "renderGridButton", "onClick", "defaultColor", "defaultLabel", "defaultIcon", "buttonCellInnerWidth", "cell", "metaInfo", "context", "getTextWidthContext", "icon", "label", "labelWidth", "row", "col", "data", "_a", "_b", "wrapper", "button", "grid_classNames_default", "button_classNames_default", "color", "ev", "text", "iconElement", "span", "block", "radio_classNames_default", "BEMClass", "RADIO_DEFAULT_SIZE", "RADIO_DEFAULT_GAP", "RADIO_DEFAULT_MARGIN", "renderGridRadio", "onRadioClick", "lastClickedRadio", "radioCellInnerWidth", "cell", "metaInfo", "context", "getTextWidthContext", "labelWidth", "changeRadioButton", "item", "row", "col", "data", "div", "label", "radio", "radio_classNames_default", "span", "ev", "convertToNumber", "text", "createIRGridColumnSortManager", "grid", "numberSet", "latestClickCell", "enabledColumnClick", "flag", "num", "n", "a", "b", "aValue", "bValue", "cell", "col", "order"]
}
